{"version":3,"names":["TypePresets","sampleLoadingState","constructor","this","statusTable","urlTable","totalSamples","samplesLoaded","SampleLoadedEvent","Event","super","SampleLoadEvents","EventTarget","sampleLoadEvents","startLoadingSample","url","chipWaveIndex","presetSettings","rawLoopOptions","customSampleRate","sampleLoaderAudioContext","AudioContext","sampleRate","closedSampleLoaderAudioContext","chipWave","Config","chipWaves","rawChipWave","rawChipWaves","rawRawChipWave","rawRawChipWaves","fetch","then","response","ok","arrayBuffer","Promise","reject","Error","decodeAudioData","audioBuffer","samples","centerWave","Array","from","getChannelData","integratedSamples","performIntegral","length","dispatchEvent","close","catch","error","alert","loadScript","resolve","willReloadForCustomSamples","script","document","createElement","src","head","appendChild","addEventListener","event","loadBuiltInSamples","set","defaultIntegratedSamples","defaultSamples","name","expression","isSampled","isPercussion","extraSampleDetune","startIndex","index","integratedChipWave","dictionary","chipWaveSamples","kicksample","snaresample","pianosample","WOWsample","overdrivesample","trumpetsample","saxophonesample","orchhitsample","detatchedviolinsample","synthsample","sonic3snaresample","comeonsample","choirsample","overdrivensample","flutesample","legatoviolinsample","tremoloviolinsample","amenbreaksample","pizzicatoviolinsample","timallengruntsample","tubasample","loopingcymbalsample","kickdrumsample","snaredrumsample","closedhihatsample","foothihatsample","openhihatsample","crashsample","pianoC4sample","liverpadsample","marimbasample","susdotwavsample","wackyboxttssample","peppersteak1","peppersteak2","vinyl","slapbass","hdeboverdrive","sunsoftbass","masculinechoir","femininechoir","southtololoche","harp","panflute","krumhorn","timpani","crowdhey","warioland4brass","warioland4organ","warioland4daow","warioland4hourchime","warioland4tick","kirbykick","kirbysnare","kirbybongo","kirbyclick","funkkick","funksnare","funksnareleft","funksnareright","funktomhigh","funktomlow","funkhihatclosed","funkhihathalfopen","funkhihatopen","funkhihatopentip","funkhihatfoot","funkcrash","funkcrashtip","funkride","chipWaveIndexOffset","chipWaveSample","chronoperc1finalsample","synthkickfmsample","woodclicksample","acousticsnaresample","catpaintboxsample","gameboypaintboxsample","mariopaintboxsample","drumpaintboxsample","yoshipaintboxsample","starpaintboxsample","fireflowerpaintboxsample","dogpaintbox","oinkpaintbox","swanpaintboxsample","facepaintboxsample","console","log","wave","sum","i","average","push","Float32Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","cumulative","newWave","getPulseWidthRatio","pulseWidth","pulseWidthRange","getDrumWave","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","round","ultraboxnewchipnoiserand","pow","clz32","b3","b4","b5","b6","b0","b1","b2","white","lastOut","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","highIndex","min","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","PI","cos","sin","generateSquareWave","phaseWidth","sineWaveLength","centerPoint","generateSawWave","inverse","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","value","result","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","jsonFormat","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","octaveMin","octaveMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","supersawBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","raw","newArray","Object","assign","key","rawChipToIntegrated","firstIndexForSamplesInChipWaveList","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","max","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","algorithms6Op","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","feedbacks6Op","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthStepPower","supersawVoiceCount","supersawDynamismMax","supersawSpreadMax","supersawShapeMax","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","modCount","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","sineWaveMask","sineWave","generateSineWave","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","enableAcousticSustain","sustainTypeNames","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","operatorWaves","asin","generateTriWave","drive","generateTrapezoidWave","generateRoundedSineWave","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","promptName","promptDesc","ceil","optionalModify","test","navigator","userAgent","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","_a","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","instrumentToPreset","instrument","factor","countBits","n","isPowerOf2","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","transition","fadeInSeconds","chord","unison","cutoffHz","linearGain","vibrato","isNoise","filterCutoffHz","filterResonance","filterEnvelope","reverb","dynamism","shape","algorithm","feedbackType","feedbackAmplitude","operators","frequency","target","envelope","feedbackEnvelope","customChipWave","noteFilter","harmonics","stringSustain","stringSustainType","midiSubharmonicOctaves","interval","bitcrusherOctave","bitcrusherQuantization","distortion","eqFilterType","eqSimpleCut","eqSimplePeak","envelopeSpeed","discreteEnvelope","eqSubFilters0","noteFilterType","noteSimpleCut","noteSimplePeak","noteSubFilters0","chorus","spectrum","pulseEnvelope","drums","pitchShiftSemitones","eqSubFilters1","pan","panDelay","clicklessTransition","vibratoDepth","vibratoDelay","vibratoSpeed","vibratoType","echoSustain","echoDelayBeats","fastTwoNoteArp","arpeggioSpeed","waveform","noteSubFilters1","customChipWaveIntegral","Deque","_capacity","_buffer","undefined","_mask","_offset","_count","pushFront","element","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","get","remove","oldBuffer","size","events","activeEvents","listeners","raise","eventType","eventData","extraEventData","pop","listen","callback","unlisten","lisen","indexOf","splice","unlistenAll","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","highShelf2ndOrder","slope","A","Aplus","Aminus","sqrtA2Alpha","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","warpInfinityToNyquist","atan","epsilon","clamp","val","validateRange","parseFloatWithDefault","defaultValue","parseFloat","Number","isNaN","parseIntWithDefault","parseInt","encode32BitNumber","buffer","base64IntToCharCode","decode32BitNumber","compressed","charIndex","base64CharCodeToInt","charCodeAt","encodeUnisonSettings","v","o","e","cleanS","cleanSDivided","floor","cleanO","cleanODivided","cleanE","cleanI","convertLegacyKeyToKeyAndOctave","rawKeyIndex","octave","BitFieldReader","source","_bits","_readIndex","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","clear","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","lengthBase64","makeNotePin","time","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","toJsonObject","song","channel","isModChannel","noteArray","mod","volumeCap","getVolumeCapForSetting","modFilterTypes","pointArray","useVol","tick","rhythm","pitchBend","volume","forMod","noteObject","points","patternObject","patternInstruments","fromJsonObject","importedPartsPerBeat","isNoiseChannel","isArray","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","startInterval","pointObject","lowestPitch","highestPitch","Operator","copy","CustomAlgorithm","fromPreset","carriers","modulation","CustomFeedBack","inIndices","SpectrumWave","hash","isHarmonic","markCustomWaveDirty","hashMult","Synth","fittingPowerOfTwo","point","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWave","HarmonicsWaveState","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","getSettingValueFromHz","hz","getRoundedSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","getRoundedSettingValueFromLinearGain","toCoefficients","freqMult","getVolumeCompensationMult","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","filterArray","filterObject","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","EnvelopeSettings","envelopeObject","Instrument","isUsingAdvancedLoopControls","chipWaveLoopStart","chipWaveLoopEnd","chipWaveLoopMode","chipWavePlayBackwards","chipWaveStartOffset","chipNoise","eqFilterSimpleCut","eqFilterSimplePeak","noteFilterSimpleCut","noteFilterSimplePeak","eqSubFilters","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","detune","unisonVoices","unisonSpread","unisonOffset","unisonExpression","unisonSign","legacyTieOver","aliases","decimalOffset","supersawDynamism","supersawSpread","supersawShape","bitcrusherFreq","echoDelay","algorithm6Op","feedbackType6Op","customAlgorithm","customFeedbackType","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modInstruments","invalidModulators","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","customFeedback","Float64Array","useSlowerRhythm","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","potentialPitchShift","centsToDetune","vibratoProperty","legacyVibratoNames","findIndex","legacyEnvelopeNames","custom","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","modboxWaveNames","sax","guitar","viola","brass","lyre","piccolo","squaretooth","flatline","sandboxWaveNames","euphonium","recorder","contrabass","zefboxWaveNames","squaretal","sawtal","pulse","miscWaveNames","test1","intense","paandorasboxWaveNames","kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","synth","sonic3snare","choir","overdriveguitar","flute","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","marimba","susdotwav","wackyboxtts","rawName","table","potentialChipWaveIndex","feedback6Op","synthboxLegacyFeedbacks","synthboxFeedbackType","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","getLargestControlPointCount","forNoteFilter","largest","frequencyFromPitch","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","scaleCustom","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","getNewNoteVolume","isMod","modChannel","modInstrument","vol","tempoIndex","tempo","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","pitchChannelCount","noiseChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","barCount","patternsPerChannel","title","pattern","bar","toBase64String","bits","_variant","_latestUltraBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","usingSubFilterBitfield","harmonicsBits","encodedLoopMode","encodedReleaseMode","spectrumBits","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","instrumentIndex","modFilter","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","unshift","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","customSamplesStr","customSamples","join","slice","_envelopeFromLegacyIndex","legacyIndex","_clearSamples","JSON","parse","substring","variantTest","fromBeepBox","fromJummBox","fromGoldBox","fromUltraBox","_latestBeepboxVersion","_oldestBeepboxVersion","_latestJummBoxVersion","_oldestJummBoxVersion","_latestGoldBoxVersion","_oldestGoldBoxVersion","_oldestUltraBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","willLoadLegacySamplesForOldSongs","compressed_array","replaceAll","split","shift","_restoreChipWaveListToDefault","willLoadLegacySamples","willLoadNintariboxSamples","willLoadMarioPaintboxSamples","customSampleUrls","customSamplePresets","toLowerCase","parseOldSyntax","_parseAndConfigureCustomSample","customSamplePresetsMap","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsPerChannel","instrumentsFlagBits","newRhythm","legacyWaves","chipWaveReal","chipWaveCounter","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","sampleLoopInfoEncodedLength","sampleLoopInfoEncoded","sampleLoopInfo","atob","entry","info","Boolean","URL","pregoldToEnvelope","aa","sustainValue","legacyEffects","legacyEnvelopes","originalValue","unisonSpreadNegative","unisonOffsetNegative","unisonExpressionNegative","unisonSignNegative","nextValue","restoreLimiterDefaults","channelNameLength","carrierCountTemp","tempModArray","chipWaveForCompat","freqToGold3","freqToUltraBox","jummToUltraEnvelope","pre3To3g","old","jummToG","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","songReverbChannel","songReverbInstrument","songReverbIndex","jumfive","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","pinCount","initialSize","bendCount","pinObj","intervalIter","isBackwards","restLength","patternIndex","lowestPart","chn","window","location","setTimeout","reload","_isProperUrl","customSampleUrlIndex","urlSliced","isCustomPercussive","customRootKey","presetIsUsingAdvancedLoopControls","presetChipWaveLoopStart","presetChipWaveLoopEnd","presetChipWaveStartOffset","presetChipWaveLoopMode","presetChipWavePlayBackwards","parsedSampleOptions","optionsStartIndex","optionsEndIndex","rawOptions","rawOption","optionCode","charAt","optionData","parsedUrl","sliceForSampleRate","sliceForRootKey","urlWithNamedOptions","namedOptions","pathname","replace","isCustomSampled","rootKey","customSamplePresetSettings","customSamplePreset","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","format","_format","customScale","keyOctave","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","shouldLoadLegacySamples","instrumentObjects","waveName","names","oldNames","veryOldNames","includes","oldScaleNames","enigma","scaleName","letter","toUpperCase","symbol","C","D","E","F","G","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","getPattern","getBeatsPerMinute","maxValue","PickedString","delayLine","allPassG","allPassGDelta","sustainFilterA1","sustainFilterA1Delta","sustainFilterA2","sustainFilterA2Delta","sustainFilterB0","sustainFilterB0Delta","sustainFilterB1","sustainFilterB1Delta","sustainFilterB2","sustainFilterB2Delta","delayIndex","allPassSample","allPassPrevInput","sustainFilterSample","sustainFilterPrevOutput2","sustainFilterPrevInput1","sustainFilterPrevInput2","fractionalDelaySample","prevDelayLength","delayResetOffset","update","instrumentState","tone","stringIndex","roundedSamplesPerTick","stringDecayStart","stringDecayEnd","sustainType","allPassCenter","samplesPerSecond","phaseDeltaStart","phaseDeltas","phaseDeltaScale","phaseDeltaScales","phaseDeltaEnd","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","shelfRadians","decayCurveStart","decayCurveEnd","register","registerShelfCenter","registerLowpassCenter","decayRateStart","decayRateEnd","expressionDecayStart","expressionDecayEnd","tempFilterStartCoefficients","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","tempFilterEndCoefficients","allPassGEnd","allPassPhaseDelayEnd","brightnessType","shelfGainStart","shelfGainEnd","cornerHardness","lowpass1stOrderCutoffRadiansStart","lowpass1stOrderCutoffRadiansEnd","lowpass2ndOrderCutoffRadiansStart","lowpass2ndOrderCutoffRadiansEnd","lowpass2ndOrderGainStart","lowpass2ndOrderGainEnd","sustainFilterA1Start","sustainFilterA2Start","sustainFilterB0Start","sustainFilterB1Start","sustainFilterB2Start","sustainFilterPhaseDelayStart","sustainFilterA1End","sustainFilterA2End","sustainFilterB0End","sustainFilterB1End","sustainFilterB2End","sustainFilterPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","EnvelopeComputer","noteSecondsStart","noteSecondsEnd","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsEnd","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","envelopeStarts","envelopeEnds","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","tickTimeStartReal","secondsPerTick","timeScale","atNoteStart","forceContinueAtStart","tickTimeEnd","tickTimeEndReal","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","beats","noteSize","noteSizeToVolumeMult","attack","lin","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","lastInterval","noiseSample","stringSustainStart","stringSustainEnd","phases","directions","chipWaveCompletions","chipWavePrevWaves","chipWaveCompletionsLastWave","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","supersawDynamismDelta","supersawUnisonDetunes","supersawShapeDelta","supersawDelayLength","supersawDelayLengthDelta","supersawDelayLine","supersawDelayIndex","supersawPrevPhaseDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","envelopeComputer","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","noisePitchFilterMult","volumeScale","arpTime","vibratoTime","nextVibratoTime","envelopeTime","eqFilterVolume","eqFilterVolumeDelta","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","safeEchoDelaySteps","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","getInstrumentSynthFunction","updateWaves","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","useDistortionStart","useDistortionEnd","isModActive","getModValue","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","eqFilterVolumeStart","eqFilterVolumeEnd","delayInputMultStart","delayInputMultEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","maxEchoMult","averageEchoDelaySeconds","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","useEchoDelayStart","useEchoDelayEnd","ignoreTicks","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","maxReverbMult","useReverbStart","useReverbEnd","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","averageMult","averageReverbDelaySeconds","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","ChannelState","singleSeamlessInstrument","syncSongState","channelState","initModFilters","tmpNoteFilterEnd","warmUpSynthesizer","getSamplesPerTick","dummyArray","isPlayingSong","synthesize","computeLatestModValues","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","heldMods","beat","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","setModValue","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","isRecording","playhead","playheadInternal","remainder","tickSampleCountdown","isAtStartOfTick","prevBar","getSamplesPerBar","getTicksIntoBar","getCurrentPart","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","loopRepeatCount","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveBassInputDuration","liveInputStarted","liveBassInputStarted","liveInputPitches","liveBassInputPitches","liveInputChannel","liveBassInputChannel","liveInputInstruments","liveBassInputInstruments","oscRefreshEventTimer","oscEnabled","enableMetronome","countInMetronome","renderingSong","wantToSkip","nextBar","isAtEndOfTick","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","loopBarStart","loopBarEnd","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","limit","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","outputDataR","performance","now","deactivateAudio","computeDelayBufferSizes","setSong","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","setting","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","forceHoldMods","found","holdFor","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","outputBufferLength","playSong","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","isInteger","useEnvelopeSpeed","isFinite","freeTone","newTone","releaseTone","toneIndex","bassPitches","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","beatsPerPart","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","chipWaveLength","firstOffset","lastOffset","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","vibratoLfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetFilterEnvelope","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","freqEndRatio","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","decimalOffsetModStart","decimalOffsetStart","useSustainStart","useSustainEnd","startFreq","unisonEnvelopeStart","unisonEnvelopeEnd","unisonAStart","unisonAEnd","unisonBStart","unisonBEnd","supersawExpressionStart","supersawExpressionEnd","minFirstVoiceAmplitude","useDynamismStart","useDynamismEnd","curvedDynamismStart","curvedDynamismEnd","firstVoiceAmplitudeStart","firstVoiceAmplitudeEnd","dynamismStart","dynamismEnd","initializeSupersaw","accumulator","normalizedPhase","zeroCrossingPhase","prevDrop","nextDrop","phaseDelta","distanceToZeroCrossing","swappedIndex","baseSpreadSlider","useSpreadStart","useSpreadEnd","averageSpreadSlider","curvedSpread","baseShape","useShapeStart","useShapeEnd","shapeStart","shapeEnd","delayLengthStart","pulseExpressionRatio","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","wrappedFmSynth","Function","loopableChipSynth","chipSynth","harmonicsSynth","pulseWidthSynth","supersawSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","fm6SynthFunctionCache","wrappedFm6Synth","wrap","data","chipWaveLoopLength","phaseDeltaA","phaseDeltaB","directionA","directionB","chipWaveCompletionA","chipWaveCompletionB","lastWaveA","lastWaveB","chipWaveCompletionFadeLength","phaseDeltaScaleA","phaseDeltaScaleB","phaseA","phaseB","prevWaveIntegralA","prevWaveIntegralB","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","filters","filterCount","initialFilterInput1","initialFilterInput2","applyFilters","prevWaveA","prevWaveB","sampleIndex","wrapped","waveA","waveB","inputSample","completionFadeA","completionFadeB","nextWaveIntegralA","nextWaveIntegralB","pwia","pwib","phaseA_","phaseB_","output","sanitizeFilters","voiceCount","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","sampleList","voice","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","phase","sawPhaseA","sawPhaseB","pulseWave","t","dynamismDelta","unisonDetunes","shapeDelta","supersawSample","detunedPhaseDelta","delaySampleTime","lowerIndex","upperIndex","delayRatio","prevDelaySample","phaseMask","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","referenceDelta","stereoBufferIndex","dotTarget","lerpEndRatio","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2"],"sources":["../synth/SynthConfig.ts","../editor/EditorConfig.ts","../synth/FFT.ts","../synth/Deque.ts","../global/Events.ts","../synth/filtering.ts","../synth/synth.ts"],"sourcesContent":["/*!\r\nCopyright (c) 2012-2022 John Nesky and contributing authors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\nexport interface Dictionary<T> {\r\n    [K: string]: T;\r\n}\r\n\r\n// @TODO: Not ideal to make this writable like this.\r\n// export interface DictionaryArray<T> extends ReadonlyArray<T> {\r\nexport interface DictionaryArray<T> extends Array<T> {\r\n    dictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum FilterType {\r\n    lowPass,\r\n    highPass,\r\n    peak,\r\n    length,\r\n}\r\n\r\nexport const enum SustainType {\r\n\tbright,\r\n\tacoustic,\r\n\tlength,\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tnoteSize,\r\n    none,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n    decay,\r\n    wibble,\r\n    hard,\r\n    linear,\r\n    rise,\r\n    blip\r\n}\r\n\r\nexport const enum InstrumentType {\r\n    chip,\r\n    fm,\r\n    noise,\r\n    spectrum,\r\n    drumset,\r\n    harmonics,\r\n    pwm,\r\n    pickedString,\r\n    supersaw,\r\n    customChipWave,\r\n    mod,\r\n\tfm6op,\r\n    length,\r\n}\r\n\r\nexport const TypePresets: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\r\n\r\nexport const enum DropdownID {\r\n    Vibrato = 0,\r\n    Pan = 1,\r\n    Chord = 2,\r\n    Transition = 3,\r\n    FM = 4,\r\n    PulseWidth = 5,\r\n    Unison = 6,\r\n    Envelope = 7,\r\n    CorruptNote = 8,\r\n    CorruptPattern = 9,\r\n    CorruptInstrument = 10,\r\n    CorruptLayout = 11,\r\n\r\n}\r\n\r\nexport const enum EffectType {\r\n    reverb,\r\n    chorus,\r\n    panning,\r\n    distortion,\r\n    bitcrusher,\r\n    noteFilter,\r\n    echo,\r\n    pitchShift,\r\n    detune,\r\n    vibrato,\r\n    transition,\r\n    chord,\r\n    // If you add more, you'll also have to extend the bitfield used in Base64 which currently uses two six-bit characters.\r\n    length,\r\n}\r\n\r\nexport const enum EnvelopeComputeIndex {\r\n    noteVolume,\r\n    noteFilterAllFreqs,\r\n    pulseWidth,\r\n    stringSustain,\r\n    unison,\r\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3, operatorFrequency4, operatorFrequency5,\r\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3, operatorAmplitude4, operatorAmplitude5,\r\n    feedbackAmplitude,\r\n    pitchShift,\r\n    detune,\r\n    vibratoDepth,\r\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\r\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\r\n    decimalOffset,\r\n    supersawDynamism,\r\n\tsupersawSpread,\r\n\tsupersawShape,\r\n    length,\r\n}\r\n\r\n/*\r\nexport const enum InstrumentAutomationIndex {\r\n    mixVolume,\r\n    eqFilterAllFreqs,\r\n    eqFilterFreq0, eqFilterFreq1, eqFilterFreq2, eqFilterFreq3, eqFilterFreq4, eqFilterFreq5, eqFilterFreq6, eqFilterFreq7,\r\n    eqFilterGain0, eqFilterGain1, eqFilterGain2, eqFilterGain3, eqFilterGain4, eqFilterGain5, eqFilterGain6, eqFilterGain7,\r\n    distortion,\r\n    bitcrusherQuantization,\r\n    bitcrusherFrequency,\r\n    panning,\r\n    chorus,\r\n    echoSustain,\r\n    //echoDelay, // Wait until tick settings can be computed once for multiple run lengths.\r\n    reverb,\r\n    length,\r\n}\r\n*/\r\n\r\nexport interface BeepBoxOption {\r\n    readonly index: number;\r\n    readonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n    readonly flags: ReadonlyArray<boolean>;\r\n    readonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n    readonly isWhiteKey: boolean;\r\n    readonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n    readonly stepsPerBeat: number;\r\n    readonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n    readonly expression: number;\r\n    samples: Float32Array;\r\n    isPercussion?: boolean;\r\n    isCustomSampled?: boolean;\r\n    isSampled?: boolean;\r\n    extraSampleDetune?: number;\r\n    rootKey?: number;\r\n    sampleRate?: number;\r\n}\r\n\r\nexport interface OperatorWave extends BeepBoxOption {\r\n    samples: Float32Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n    readonly expression: number;\r\n    readonly basePitch: number;\r\n    readonly pitchFilterMult: number;\r\n    readonly isSoft: boolean;\r\n    samples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n    readonly isSeamless: boolean;\r\n    readonly continues: boolean;\r\n    readonly slides: boolean;\r\n    readonly slideTicks: number;\r\n    readonly includeAdjacentPatterns: boolean;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n    readonly amplitude: number;\r\n    readonly type: number;\r\n    readonly delayTicks: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n    readonly periodsSeconds: number[];\r\n    readonly period: number;\r\n}\r\n\r\nexport interface Unison extends BeepBoxOption {\r\n    readonly voices: number;\r\n    readonly spread: number;\r\n    readonly offset: number;\r\n    readonly expression: number;\r\n    readonly sign: number;\r\n}\r\n\r\nexport interface Modulator extends BeepBoxOption {\r\n    readonly name: string; // name that shows up in song editor UI\r\n    readonly pianoName: string; // short name that shows up in mod piano UI\r\n    readonly maxRawVol: number; // raw\r\n    readonly newNoteVol: number; // raw\r\n    readonly forSong: boolean; // true - setting is song scope\r\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\r\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\r\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\r\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\r\n    optionalModify?: string; // optional modifications for the mods (eg. flipping all values)\r\n\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n    readonly customInterval: boolean;\r\n    readonly arpeggiates: boolean;\r\n    readonly strumParts: number;\r\n    readonly singleTone: boolean;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n    readonly carrierCount: number;\r\n    readonly associatedCarrier: ReadonlyArray<number>;\r\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n    readonly mult: number;\r\n    readonly hzOffset: number;\r\n    readonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n    readonly type: EnvelopeType;\r\n    readonly speed: number;\r\n}\r\n\r\nexport interface AutomationTarget extends BeepBoxOption {\r\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\r\n    readonly displayName: string;\r\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\r\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu (e.g. filter frequency and gain).\r\n\treadonly isFilter: boolean; // Filters are special because the maxCount depends on other instrument settings.\r\n\t//readonly range: number | null; // set if automation is allowed.\r\n    readonly maxCount: number;\r\n    readonly effect: EffectType | null;\r\n    readonly compatibleInstruments: InstrumentType[] | null;\r\n}\r\n\r\nexport const enum SampleLoadingStatus {\r\n    loading,\r\n    loaded,\r\n    error,\r\n}\r\n\r\nexport function getSampleLoadingStatusName(status: SampleLoadingStatus): string {\r\n    switch (status) {\r\n\tcase SampleLoadingStatus.loading: return \"loading\";\r\n\tcase SampleLoadingStatus.loaded: return \"loaded\";\r\n\tcase SampleLoadingStatus.error: return \"error\";\r\n    }\r\n}\r\n\r\nexport class SampleLoadingState {\r\n    public statusTable: Dictionary<SampleLoadingStatus>;\r\n    public urlTable: Dictionary<string>;\r\n    public totalSamples: number;\r\n    public samplesLoaded: number;\r\n\r\n    constructor() {\r\n\tthis.statusTable = {};\r\n\tthis.urlTable = {};\r\n\tthis.totalSamples = 0;\r\n\tthis.samplesLoaded = 0;\r\n    }\r\n}\r\n\r\nexport const sampleLoadingState: SampleLoadingState = new SampleLoadingState();\r\n\r\nexport class SampleLoadedEvent extends Event {\r\n    public readonly totalSamples: number;\r\n    public readonly samplesLoaded: number;\r\n\r\n    constructor(totalSamples: number, samplesLoaded: number) {\r\n\tsuper(\"sampleloaded\");\r\n\tthis.totalSamples = totalSamples;\r\n\tthis.samplesLoaded = samplesLoaded;\r\n    }\r\n}\r\n\r\nexport interface SampleLoadEventMap {\r\n    \"sampleloaded\": SampleLoadedEvent;\r\n}\r\n\r\nexport class SampleLoadEvents extends EventTarget {\r\n    constructor() {\r\n\tsuper();\r\n    }\r\n}\r\n\r\nexport const sampleLoadEvents: SampleLoadEvents = new SampleLoadEvents();\r\n\r\nexport async function startLoadingSample(url: string, chipWaveIndex: number, presetSettings: Dictionary<any>, rawLoopOptions: any, customSampleRate: number): Promise<void> {\r\n    // @TODO: Make parts of the code that expect everything to already be\r\n    // in memory work correctly.\r\n    // It would be easy to only instantiate `SongEditor` and company after\r\n    // everything is loaded, but if dynamic sample loading without a reload\r\n    // is deemed necessary, anything that involves chip waves has to be\r\n    // revisited so as to be able to work with a changing list of chip\r\n    // waves that may or may not be ready to be used.\r\n    const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\r\n    let closedSampleLoaderAudioContext: boolean = false;\r\n    const chipWave = Config.chipWaves[chipWaveIndex];\r\n    const rawChipWave = Config.rawChipWaves[chipWaveIndex];\r\n    const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\r\n    if (OFFLINE) {\r\n        if (url.slice(0, 5) === \"file:\") {\r\n            const dirname = await getDirname();\r\n            const joined = await pathJoin(dirname, url.slice(5));\r\n            url = joined;\r\n        }\r\n    }\r\n    fetch(url).then((response) => {\r\n\tif (!response.ok) {\r\n\t    // @TODO: Be specific with the error handling.\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\r\n\t    return Promise.reject(new Error(\"Couldn't load sample\"));\r\n\t}\r\n\treturn response.arrayBuffer();\r\n    }).then((arrayBuffer) => {\r\n\treturn sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\r\n    }).then((audioBuffer) => {\r\n\t// @TODO: Downmix.\r\n\tconst samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\r\n\tconst integratedSamples = performIntegral(samples);\r\n\tchipWave.samples = integratedSamples;\r\n\trawChipWave.samples = samples;\r\n\trawRawChipWave.samples = samples;\r\n\tif (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\r\n\t    presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\r\n\t    presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\r\n\t    presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\r\n\t    presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\r\n\t    presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\r\n\t}\r\n\tsampleLoadingState.samplesLoaded++;\r\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t    sampleLoadingState.totalSamples,\r\n\t    sampleLoadingState.samplesLoaded\r\n\t));\r\n\tif (!closedSampleLoaderAudioContext) {\r\n\t    closedSampleLoaderAudioContext = true;\r\n\t    sampleLoaderAudioContext.close();\r\n\t}\r\n    }).catch((error) => {\r\n\t//console.error(error);\r\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\r\n\talert(\"Failed to load \" + url + \":\\n\" + error);\r\n\tif (!closedSampleLoaderAudioContext) {\r\n\t    closedSampleLoaderAudioContext = true;\r\n\t    sampleLoaderAudioContext.close();\r\n\t}\r\n    });\r\n}\r\n\r\nexport function getLocalStorageItem<T>(key: string, defaultValue: T): T | string {\r\n    let value: T | string | null = localStorage.getItem(key);\r\n    if (value == null || value === \"null\" || value === \"undefined\") {\r\n        value = defaultValue;\r\n    }\r\n    return value;\r\n}\r\n\r\n// @HACK: This just assumes these exist, regardless of whether they actually do\r\n// or not.\r\ndeclare global {\r\n    const OFFLINE: boolean; // for UB offline\r\n    const getDirname: () => Promise<string>; // for UB offline\r\n    const pathJoin: (...parts: string[]) => Promise<string>; // for UB offline\r\n    const kicksample: number[];\r\n    const snaresample: number[];\r\n    const pianosample: number[];\r\n    const WOWsample: number[];\r\n    const overdrivesample: number[];\r\n    const trumpetsample: number[];\r\n    const saxophonesample: number[];\r\n    const orchhitsample: number[];\r\n    const detatchedviolinsample: number[];\r\n    const synthsample: number[];\r\n    const sonic3snaresample: number[];\r\n    const comeonsample: number[];\r\n    const choirsample: number[];\r\n    const overdrivensample: number[];\r\n    const flutesample: number[];\r\n    const legatoviolinsample: number[];\r\n    const tremoloviolinsample: number[];\r\n    const amenbreaksample: number[];\r\n    const pizzicatoviolinsample: number[];\r\n    const timallengruntsample: number[];\r\n    const tubasample: number[];\r\n    const loopingcymbalsample: number[];\r\n    const kickdrumsample: number[];\r\n    const snaredrumsample: number[];\r\n    const closedhihatsample: number[];\r\n    const foothihatsample: number[];\r\n    const openhihatsample: number[];\r\n    const crashsample: number[];\r\n    const pianoC4sample: number[];\r\n    const liverpadsample: number[];\r\n    const marimbasample: number[];\r\n    const susdotwavsample: number[];\r\n    const wackyboxttssample: number[];\r\n    const peppersteak1: number[];\r\n    const peppersteak2: number[];\r\n    const vinyl: number[];\r\n    const slapbass: number[];\r\n    const hdeboverdrive: number[];\r\n    const sunsoftbass: number[];\r\n    const masculinechoir: number[];\r\n    const femininechoir: number[];\r\n    const southtololoche: number[];\r\n    const harp: number[];\r\n    const panflute: number[];\r\n    const krumhorn: number[];\r\n    const timpani: number[];\r\n    const crowdhey: number[];\r\n    const warioland4brass: number[];\r\n    const warioland4organ: number[];\r\n    const warioland4daow: number[];\r\n    const warioland4hourchime: number[];\r\n    const warioland4tick: number[];\r\n    const kirbykick: number[];\r\n    const kirbysnare: number[];\r\n    const kirbybongo: number[];\r\n    const kirbyclick: number[];\r\n    const funkkick: number[];\r\n    const funksnare: number[];\r\n    const funksnareleft: number[];\r\n    const funksnareright: number[];\r\n    const funktomhigh: number[];\r\n    const funktomlow: number[];\r\n    const funkhihatclosed: number[];\r\n    const funkhihathalfopen: number[];\r\n    const funkhihatopen: number[];\r\n    const funkhihatopentip: number[];\r\n    const funkhihatfoot: number[];\r\n    const funkcrash: number[];\r\n    const funkcrashtip: number[];\r\n    const funkride: number[];\r\n    const chronoperc1finalsample: number[];\r\n    const synthkickfmsample: number[];\r\n    const woodclicksample: number[];\r\n    const acousticsnaresample: number[];\r\n    const catpaintboxsample: number[];\r\n    const gameboypaintboxsample: number[];\r\n    const mariopaintboxsample: number[];\r\n    const drumpaintboxsample: number[];\r\n    const yoshipaintboxsample: number[];\r\n    const starpaintboxsample: number[];\r\n    const fireflowerpaintboxsample: number[];\r\n    const dogpaintbox: number[];\r\n    const oinkpaintbox: number[];\r\n    const swanpaintboxsample: number[];\r\n    const facepaintboxsample: number[];\r\n}\r\n\r\nfunction loadScript(url: string): Promise<void> {\r\n    const result: Promise<void> = new Promise((resolve, reject) => {\r\n\tif (!Config.willReloadForCustomSamples) {\r\n\t    const script = document.createElement(\"script\");\r\n\t    script.src = url;\r\n\t    document.head.appendChild(script);\r\n\t    script.addEventListener(\"load\", (event) => {\r\n\t\tresolve();\r\n\t    });\r\n\t} else {\r\n\t    // There's not really any errors that show up if the loading for\r\n\t    // this script is stopped early, but it won't really do anything\r\n\t    // particularly useful either in that case.\r\n\t}\r\n    });\r\n    return result;\r\n}\r\n\r\nexport function loadBuiltInSamples(set: number): void {\r\n    const defaultIndex: number = 0;\r\n    const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\r\n    const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\r\n\r\n    if (set == 0) {\r\n\t// Create chip waves with the wrong sound.\r\n\tconst chipWaves = [\r\n\t    { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\r\n\t    { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\r\n\t    { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\r\n\t    { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\r\n\t    { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\r\n\t    { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\r\n\t    { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\r\n\t    { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\r\n\t    { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\r\n\t    { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\r\n\t    { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\r\n\t    { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\r\n\t    { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\r\n\t    { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\r\n\t    { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\r\n\t    { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\r\n\t    { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\r\n\t    { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\r\n\t    { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\r\n\t    { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\r\n\t    { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\r\n\t    { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\r\n\t    { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\r\n\t    { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\r\n\t    { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\r\n\t    { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\r\n\t    { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\r\n\t    { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\r\n\t    { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\r\n\t    { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\r\n\t    { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\r\n\t    { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\r\n\t    { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\r\n\t    { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\r\n\t    { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\r\n\t    { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\r\n\t    { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\r\n\t    { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\r\n\t    { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\r\n\t    { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\r\n\t    { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\r\n\t    { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\r\n\t    { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\r\n\t    { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\r\n\t    { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\r\n\t    { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\r\n\t    { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\r\n\t    { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\r\n\t    { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\r\n\t    { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\r\n\t    { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\r\n\t    { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\r\n\t    { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\r\n\t    { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\r\n\t    { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\r\n\t    { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\r\n\t    { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\r\n\t    { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\r\n\t    { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\r\n\t    { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\r\n\t];\r\n\r\n\tsampleLoadingState.totalSamples += chipWaves.length;\r\n\r\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\r\n\t// the same number of elements.\r\n\tconst startIndex: number = Config.rawRawChipWaves.length;\r\n\tfor (const chipWave of chipWaves) {\r\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\r\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\r\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\r\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\r\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\r\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\r\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\r\n\t}\r\n\r\n\tloadScript(\"samples.js\")\r\n\t.then(() => loadScript(\"samples2.js\"))\r\n\t.then(() => loadScript(\"samples3.js\"))\r\n\t.then(() => loadScript(\"drumsamples.js\"))\r\n\t.then(() => loadScript(\"wario_samples.js\"))\r\n\t.then(() => loadScript(\"kirby_samples.js\"))\r\n\t.then(() => {\r\n\t    // Now put the right sounds in there after everything\r\n\t    // got loaded.\r\n\t    const chipWaveSamples: Float32Array[] = [\r\n\t\tcenterWave(kicksample),\r\n\t\tcenterWave(snaresample),\r\n\t\tcenterWave(pianosample),\r\n\t\tcenterWave(WOWsample),\r\n\t\tcenterWave(overdrivesample),\r\n\t\tcenterWave(trumpetsample),\r\n\t\tcenterWave(saxophonesample),\r\n\t\tcenterWave(orchhitsample),\r\n\t\tcenterWave(detatchedviolinsample),\r\n\t\tcenterWave(synthsample),\r\n\t\tcenterWave(sonic3snaresample),\r\n\t\tcenterWave(comeonsample),\r\n\t\tcenterWave(choirsample),\r\n\t\tcenterWave(overdrivensample),\r\n\t\tcenterWave(flutesample),\r\n\t\tcenterWave(legatoviolinsample),\r\n\t\tcenterWave(tremoloviolinsample),\r\n\t\tcenterWave(amenbreaksample),\r\n\t\tcenterWave(pizzicatoviolinsample),\r\n\t\tcenterWave(timallengruntsample),\r\n\t\tcenterWave(tubasample),\r\n\t\tcenterWave(loopingcymbalsample),\r\n\t\tcenterWave(kickdrumsample),\r\n\t\tcenterWave(snaredrumsample),\r\n\t\tcenterWave(closedhihatsample),\r\n\t\tcenterWave(foothihatsample),\r\n\t\tcenterWave(openhihatsample),\r\n\t\tcenterWave(crashsample),\r\n\t\tcenterWave(pianoC4sample),\r\n\t\tcenterWave(liverpadsample),\r\n\t\tcenterWave(marimbasample),\r\n\t\tcenterWave(susdotwavsample),\r\n\t\tcenterWave(wackyboxttssample),\r\n\t\tcenterWave(peppersteak1),\r\n\t\tcenterWave(peppersteak2),\r\n\t\tcenterWave(vinyl),\r\n\t\tcenterWave(slapbass),\r\n\t\tcenterWave(hdeboverdrive),\r\n\t\tcenterWave(sunsoftbass),\r\n\t\tcenterWave(masculinechoir),\r\n\t\tcenterWave(femininechoir),\r\n\t\tcenterWave(southtololoche),\r\n\t\tcenterWave(harp),\r\n\t\tcenterWave(panflute),\r\n\t\tcenterWave(krumhorn),\r\n\t\tcenterWave(timpani),\r\n\t\tcenterWave(crowdhey),\r\n\t\tcenterWave(warioland4brass),\r\n\t\tcenterWave(warioland4organ),\r\n\t\tcenterWave(warioland4daow),\r\n\t\tcenterWave(warioland4hourchime),\r\n\t\tcenterWave(warioland4tick),\r\n\t\tcenterWave(kirbykick),\r\n\t\tcenterWave(kirbysnare),\r\n\t\tcenterWave(kirbybongo),\r\n\t\tcenterWave(kirbyclick),\r\n\t\tcenterWave(funkkick),\r\n\t\tcenterWave(funksnare),\r\n\t\tcenterWave(funksnareleft),\r\n\t\tcenterWave(funksnareright),\r\n\t\tcenterWave(funktomhigh),\r\n\t\tcenterWave(funktomlow),\r\n\t\tcenterWave(funkhihatclosed),\r\n\t\tcenterWave(funkhihathalfopen),\r\n\t\tcenterWave(funkhihatopen),\r\n\t\tcenterWave(funkhihatopentip),\r\n\t\tcenterWave(funkhihatfoot),\r\n\t\tcenterWave(funkcrash),\r\n\t\tcenterWave(funkcrashtip),\r\n\t\tcenterWave(funkride)\r\n\t    ];\r\n\t    let chipWaveIndexOffset: number = 0;\r\n\t    for (const chipWaveSample of chipWaveSamples) {\r\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\r\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\r\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\t\tsampleLoadingState.samplesLoaded++;\r\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t\t    sampleLoadingState.totalSamples,\r\n\t\t    sampleLoadingState.samplesLoaded\r\n\t\t));\r\n\t\tchipWaveIndexOffset++;\r\n\t    }\r\n\t});\r\n\t//EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {name: \"Legacy Sample Presets\", presets:  { name: \"Earthbound O. Guitar\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"paandorasbox overdrive\", \"unison\": \"none\", \"envelopes\": [] } }, index: EditorConfig.presetCategories.length,};\r\n    }\r\n    else if (set == 1) {\r\n\t// Create chip waves with the wrong sound.\r\n\tconst chipWaves = [\r\n\t    { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\r\n\t];\r\n\r\n\tsampleLoadingState.totalSamples += chipWaves.length;\r\n\r\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\r\n\t// the same number of elements.\r\n\tconst startIndex: number = Config.rawRawChipWaves.length;\r\n\tfor (const chipWave of chipWaves) {\r\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\r\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\r\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\r\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\r\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\r\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\r\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\r\n\t}\r\n\r\n\tloadScript(\"nintaribox_samples.js\")\r\n\t.then(() => {\r\n\t    // Now put the right sounds in there after everything\r\n\t    // got loaded.\r\n\t    const chipWaveSamples: Float32Array[] = [\r\n\t\tcenterWave(chronoperc1finalsample),\r\n\t\tcenterWave(synthkickfmsample),\r\n\t\tcenterWave(woodclicksample),\r\n\t\tcenterWave(acousticsnaresample)\r\n\t    ];\r\n\t    let chipWaveIndexOffset: number = 0;\r\n\t    for (const chipWaveSample of chipWaveSamples) {\r\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\r\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\r\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\t\tsampleLoadingState.samplesLoaded++;\r\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t\t    sampleLoadingState.totalSamples,\r\n\t\t    sampleLoadingState.samplesLoaded\r\n\t\t));\r\n\t\tchipWaveIndexOffset++;\r\n\t    }\r\n\t});\r\n    }\r\n    else if (set == 2) {\r\n\t// Create chip waves with the wrong sound.\r\n\tconst chipWaves = [\r\n\t    { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\r\n\t    { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\r\n\t    { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\r\n\t    { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\r\n\t    { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\r\n\t    { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\r\n\t    { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\r\n\t    { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\r\n\t    { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\r\n\t    { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\r\n\t    { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\r\n\t];\r\n\r\n\tsampleLoadingState.totalSamples += chipWaves.length;\r\n\r\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\r\n\t// the same number of elements.\r\n\tconst startIndex: number = Config.rawRawChipWaves.length;\r\n\tfor (const chipWave of chipWaves) {\r\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\r\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\r\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\r\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\r\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\r\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\r\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\r\n\t}\r\n\r\n\tloadScript(\"mario_paintbox_samples.js\")\r\n\t.then(() => {\r\n\t    // Now put the right sounds in there after everything\r\n\t    // got loaded.\r\n\t    const chipWaveSamples: Float32Array[] = [\r\n\t\tcenterWave(catpaintboxsample),\r\n\t\tcenterWave(gameboypaintboxsample),\r\n\t\tcenterWave(mariopaintboxsample),\r\n\t\tcenterWave(drumpaintboxsample),\r\n\t\tcenterWave(yoshipaintboxsample),\r\n\t\tcenterWave(starpaintboxsample),\r\n\t\tcenterWave(fireflowerpaintboxsample),\r\n\t\tcenterWave(dogpaintbox),\r\n\t\tcenterWave(oinkpaintbox),\r\n\t\tcenterWave(swanpaintboxsample),\r\n\t\tcenterWave(facepaintboxsample)\r\n\t    ];\r\n\t    let chipWaveIndexOffset: number = 0;\r\n\t    for (const chipWaveSample of chipWaveSamples) {\r\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\r\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\r\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\t\tsampleLoadingState.samplesLoaded++;\r\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t\t    sampleLoadingState.totalSamples,\r\n\t\t    sampleLoadingState.samplesLoaded\r\n\t\t));\r\n\t\tchipWaveIndexOffset++;\r\n\t    }\r\n\t});\r\n    }\r\n    else {\r\n        console.log(\"invalid set of built-in samples\");\r\n    }\r\n}\r\n\r\nexport class Config {\r\n    // Params for post-processing compressor\r\n    public static thresholdVal: number = -10;\r\n    public static kneeVal: number = 40;\r\n    public static ratioVal: number = 12;\r\n    public static attackVal: number = 0;\r\n    public static releaseVal: number = 0.25;\r\n\r\n    public static willReloadForCustomSamples: boolean = false;\r\n\r\n    public static jsonFormat: string = \"UltraBox\";\r\n\r\n    public static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n        { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n        { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n        { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n        { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n        { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n        { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n        { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n        { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n        { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n        { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n        { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n        { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n        { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n        { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n        { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n        { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n        { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n        { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n        { name: \"No Dabbing\", realName: \"no dabbing\", flags:[true, true, false, true, true, true, true, true, true, false, true, false] },\r\n\t//modbox\r\n\t{ name: \"Jacked Toad\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\r\n\t{ name: \"Dumb\", realName: \"Originally named, currently named, and will always be named 'dumb.'\", flags: [true, false, false, false, false, true, true, true, true, false, false, true] },\r\n        { name: \"Test Scale\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\r\n\t// todbox\r\n\t{ name: \"die\", realName: \"death\", flags: [true, false, false, false, false, false, false, false, true, false, false, false] },\r\n\t//wackybox\r\n        // { name: \"Rythmic\", realName: \"Pretty straightforward.\", flags: [true, false, false, false, false, false, false, false, false, false, false, false] },\r\n        //todbox\r\n\t{ name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] }, // Custom? considering allowing this one to be be completely configurable\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\r\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\r\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\r\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\r\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\r\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\r\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\r\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\r\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\r\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\r\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\r\n\t\t\t\t// { name: \"C+\", isWhiteKey: false, basePitch: 24 },\r\n\t\t//taken from todbox, called \"B#\" for some reason lol\r\n\t\t// { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 },\r\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 },\r\n\t    //brucebox\r\n\t\t//g- isn't actually g-???\r\n\t\t// { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 },\r\n\t\t//shitbox\r\n\t]);\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tpublic static readonly tempoMin: number = 1;\r\n\tpublic static readonly tempoMax: number = 500;\r\n\tpublic static readonly octaveMin: number = -2;\r\n\tpublic static readonly octaveMax: number = 2;\r\n    public static readonly echoDelayRange: number = 24;\r\n    public static readonly echoDelayStepTicks: number = 4;\r\n    public static readonly echoSustainRange: number = 8;\r\n    public static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\r\n    public static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\r\n    public static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\r\n    public static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\r\n\tpublic static readonly reverbRange: number = 32;\r\n    public static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\r\n    public static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\r\n    public static readonly beatsPerBarMin: number = 1;\r\n\tpublic static readonly beatsPerBarMax: number = 64;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 1024;\r\n    public static readonly instrumentCountMin: number = 1;\r\n    public static readonly layeredInstrumentCountMax: number = 10;\r\n\t//this still hasn't been properly tested...\r\n    public static readonly patternInstrumentCountMax: number = 10;\r\n\tpublic static readonly partsPerBeat: number = 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7] ];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷1 (whole notes)\", stepsPerBeat: 1, /*ticksPerArpeggio: 6, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]],*/ roundUpThresholds: [3] },\r\n\t\t{ name: \"÷2 (half notes)\", stepsPerBeat: 2, /*ticksPerArpeggio: 5, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]],*/ roundUpThresholds: [3, 9] },\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷6 (sextuplets)\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8 (eighth notes)\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷12 (twelfth notes)\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n    public static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false, false, false];\r\n    public static readonly chipBaseExpression: number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape.\r\n    public static readonly fmBaseExpression: number = 0.03;\r\n    public static readonly noiseBaseExpression: number = 0.19;\r\n    public static readonly spectrumBaseExpression: number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\r\n    public static readonly drumsetBaseExpression: number = 0.45; // Drums tend to be loud but brief!\r\n    public static readonly harmonicsBaseExpression: number = 0.025;\r\n    public static readonly pwmBaseExpression: number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/π times the measured square wave amplitude.\r\n    public static readonly supersawBaseExpression:  number = 0.061425; // It's actually closer to half of this, the synthesized sawtooth amplitude range is only .5 to -.5.\r\n    public static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\r\n    public static readonly distortionBaseVolume: number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\r\n    public static readonly bitcrusherBaseVolume: number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\r\n\tpublic static rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\r\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n        { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,])},\r\n   \t//normal\r\n{ name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t{ name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\r\n\t{ name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\r\n\t   { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\r\n\t    { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\r\n\t  { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\r\n\t   { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\r\n\t    { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t  { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\r\n\t   { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\r\n\t { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\r\n        { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\r\n      { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\r\n\t   { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\r\n\t { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },  \r\n\t  { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\r\n     { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\r\n\t  { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\r\n\t  { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\r\n\t  { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\r\n\t//modbox\r\n\t{ name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\r\n        { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\r\n        { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\r\n      { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\r\n     { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\r\n        { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\r\n      { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 -2, 0, 4, 1, 4, 6, 7, 3]) },\r\n      { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\r\n        { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\r\n        { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1 ,0.13 / -0.3 ,0.13 / -0.5 ,0.13 / -0.7 ,0.13 / -0.9 ,0.13 / -0.11 ,0.13 / -0.31 ,0.13 / -0.51 ,0.13 / -0.71 ,0.13 / -0.91 ,0.13 / -0.12 ,0.13 / -0.32 ,0.13 / -0.52 ,0.13 / -0.72 ,0.13 / -0.92 ,0.13 / -0.13 ,0.13 / 0.13 ,0.13 / 0.92 ,0.13 / 0.72 ,0.13 / 0.52 ,0.13 / 0.32 ,0.13 / 0.12 ,0.13 / 0.91 ,0.13 / 0.71 ,0.13 / 0.51 ,0.13 / 0.31 ,0.13 / 0.11 ,0.13 / 0.9 ,0.13 / 0.7 ,0.13 / 0.5 ,0.13 / 0.3 ,0.13]) },\r\n        { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\r\n      //cut\r\n\t  { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n      { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\r\n        { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\r\n       { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\r\n     //   { name: \"sandbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },     \r\n\t//from sandbox, are these correct????\r\n\t  { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\r\n\t  { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n\t{ name: \"brucebox pokey 5step bass\", expression: 0.5,samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\r\n\t{ name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\r\n\t//brucebox\r\n\t{ name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2 , 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\r\n\t{ name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0 , 5.0 / 55.0 , -9.0 , 6.5 / 6.5 , -55.0, 18.5 / -26.0]) },\r\n//nerdbox\r\n\t { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\r\n\t{ name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\r\n { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\r\n//\t{ name: \"zefbox sawtooth\", expression: 0.65, samples: centerAndNormalizeWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6 , -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\r\n\t{ name: \"zefbox saw narrow\", expression: 0.65,samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2 ,1]) },\r\n\t { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\r\n\t//{ name: \"zefbox double saw\", expression: 0.5, samples: centerAndNormalizeWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\r\n\t{ name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\r\n//\t { name: \"zefbox squaretooth\", expression: 0.25, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\r\n\t//identical to the modbox squaretooth, just louder - this was pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah\r\n\t{ name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\r\n//{ name: \"zefbox double pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n{ name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\r\n{ name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\r\n{ name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\r\n//from zefbox, are these correct????\r\n\t //\"triangle\", \"square\", \"semi-square\", \"deep square\", \"squaretal\", \"sawtooth\", \"saw wide\", \"saw narrow\",  \"deep sawtooth\", \"double saw\", \"sawtal\", \"deep sawtal\", \"squaretooth\", \"pulse\", \"pulse wide\", \"pulse narrow\", \"double pulse\", \"triple pulse\", \"high pulse\", \"deep pulse\",  \"nes pulse\", \"spiky\", \"plateau\", \"sinusoid\"\r\n\t { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\r\n\t\t{ name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\r\n\t\t{ name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\r\n        //wackybox\r\n\t\t        { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\r\n        { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t//these WEREN'T in pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah\r\n\t\t{ name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\r\n\t{ name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t{ name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2,  2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\r\n    //from todbox\r\n\t{ name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\r\n\t{ name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\r\n\t//I don't like this one.\r\n\t{ name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000,-0.01208,-0.02997,-0.04382,-0.06042,-0.07529,-0.09116,-0.10654,-0.12189,-0.13751,-0.15289,-0.16849,-0.18387,-0.19974,-0.21484,-0.23071,-0.24557,-0.26144,-0.27731,-0.29141,-0.30350,-0.32416,-0.34406,-0.32947,-0.31158,-0.33725,-0.37579,-0.39746,-0.40201,-0.40906,-0.44180,-0.47229,-0.47379,-0.47733,-0.45239,-0.33954,-0.22894,-0.22443,-0.32138,-0.46371,-0.57178,-0.61081,-0.59998,-0.61459,-0.62189,-0.43979,-0.19217,-0.12643,-0.17252,-0.20956,-0.20981,-0.19217,-0.22845,-0.34332,-0.50629,-0.64307,-0.72922,-0.81384,-0.87857,-0.90149,-0.88687,-0.86169,-0.87781,-0.80478,-0.52493,-0.31308,-0.33249,-0.39395,-0.39017,-0.30301,-0.19949,-0.13071,-0.02493,0.14307,0.34961,0.52542,0.63223,0.68613,0.74710,0.87305,0.98184,0.98889,0.97052,0.99066,0.99747,0.99344,0.99469,0.99393,0.99570,0.99393,0.99521,0.99469,0.99420,0.99521,0.99420,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99469,0.99493,0.99420,0.99521,0.99393,0.99493,0.99469,0.99445,0.99570,0.99445,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99445,0.99493,0.99420,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99445,0.99521,0.99469,0.99445,0.99545,0.99368,0.99393,0.99445,0.99268,0.97983,0.97229,0.95944,0.88486,0.76773,0.64481,0.53098,0.39847,0.19318,-0.03827,-0.20325,-0.39319,-0.68765,-0.88461,-0.93448,-0.96069,-0.97681,-0.98715,-0.99042,-0.99142,-0.99091,-0.99142,-0.99219,-0.99091,-0.99219,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99142,-0.99142,-0.99191,-0.99091,-0.99219,-0.99118,-0.99142,-0.99167,-0.99091,-0.99219,-0.99091,-0.99167,-0.99142,-0.99091,-0.99191,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99118,-0.99142,-0.99191,-0.99066,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99243,-0.98865,-0.98764,-0.99219,-0.98083,-0.92517,-0.92770,-0.91486,-0.59042,-0.15189,0.02945,0.05667,0.06195,0.00629,-0.18008,-0.56497,-0.88010,-0.92770,-0.92871,-0.97705,-0.99167,-0.98663,-0.99118,-0.99042,-0.99219,-0.99142,-0.99118,-0.98941,-0.99219,-1.00000,-0.97580,-0.95993,-0.99948,-0.98236,-0.84659,-0.74860,-0.70679,-0.59747,-0.48035,-0.41687,-0.36826,-0.29745,-0.18185,-0.06219,0.02164,0.07907,0.13123,0.18033,0.19620,0.15692,0.14053,0.20251,0.27530,0.30905,0.29092,0.27252,0.30402,0.32416,0.32214,0.35239,0.39670,0.43198,0.49420,0.58487,0.64154,0.65967,0.67050,0.67026,0.66522,0.65540,0.66119,0.70627,0.75842,0.78738,0.78940,0.78763,0.80402,0.85944,0.94559,0.98990,0.98160,0.98007,0.99368,0.99393,0.98538,0.97580,0.97101,0.93802,0.81812,0.64633,0.46649,0.28613,0.14685,0.08966,0.12543,0.20325,0.24557,0.18866,0.02795,-0.20175,-0.44205,-0.58713,-0.57629,-0.41385,-0.14255,0.18033,0.47882,0.68311,0.72314,0.62064,0.48309,0.43073,0.53577,0.72794,0.90250,0.97354,0.97000,0.98083,0.99191,0.99319,0.99493,0.99393,0.99521,0.99393,0.99545,0.99420,0.99493,0.99493,0.99445,0.99545,0.99420,0.99545,0.99243,0.98917,0.98386,0.97781,0.95844,0.89066,0.81561,0.78134,0.77277,0.75995,0.73022,0.67126,0.57178,0.47000,0.38361,0.29419,0.20703,0.14734,0.15866,0.25162,0.35818,0.45062,0.56750,0.69748,0.81232,0.89697,0.95062,0.97656,0.98615,0.99191,0.99219,0.99243,0.99368,0.99368,0.97028,0.95566,0.94559,0.82617,0.59973,0.38361,0.23901,0.15338,0.12921,0.11206,0.04382,-0.12946,-0.43552,-0.72644,-0.89847,-0.95465,-0.95541,-0.97229,-0.99268,-0.99319,-0.98840,-0.99142,-0.99167,-0.99091,-0.98840,-0.98965,-0.99368,-0.97455,-0.95010,-0.94684,-0.96219,-0.98514,-0.99243,-0.98889,-0.98917,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99191,-0.99066,-0.99167,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99167,-0.99091,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99091,-0.99118,-0.99243,-0.98941,-0.98462,-0.96976,-0.96320,-0.96194,-0.87305,-0.66196,-0.44809,-0.29495,-0.18085,-0.11813,-0.11334,-0.18564,-0.34885,-0.58237,-0.80450,-0.93726,-0.97806,-0.97354,-0.97531,-0.98990,-0.99368,-0.98941,-0.99219,-0.99091,-0.99142,-0.99167,-0.99091,-0.99191,-0.99118,-0.99219,-0.98236,-0.97781,-0.97656,-0.95135,-0.87204,-0.71335,-0.52139,-0.34232,-0.17783,-0.00906,0.14886,0.30450,0.48889,0.67404,0.84030,0.94128,0.97681,0.98462,0.98337,0.99142,0.99521,0.99493,0.99420,0.99445,0.99521,0.99393,0.99545,0.99445,0.99521,0.99521,0.99445,0.99570,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99521,0.99445,0.99445,0.99521,0.99445,0.99545,0.99445,0.99469,0.99493,0.99393,0.99493,0.99445,0.99393,0.98285,0.97781,0.97479,0.92844,0.82114,0.66095,0.52417,0.46826,0.46722,0.47934,0.47379,0.47076,0.48209,0.42014,0.25439,0.10074,-0.00302,-0.08966,-0.16068,-0.21436,-0.22040,-0.15137,-0.00476,0.18536,0.37631,0.52292,0.62164,0.70425,0.74835,0.72366,0.63928,0.52567,0.40805,0.35666,0.42896,0.60175,0.80200,0.92743,0.96548,0.97632,0.98337,0.99066,0.99521,0.99420,0.99368,0.99292,0.98840,0.98083,0.96774,0.93323,0.85440,0.69470,0.47202,0.20425,-0.08890,-0.36423,-0.60025,-0.77481,-0.90173,-0.96017,-0.97028,-0.98108,-0.98840,-0.99219,-0.98990,-0.99219,-0.99142,-0.99142,-0.99219,-0.99091,-0.99243,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99118,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.98917,-0.99042,-0.99445,-0.97330,-0.95590,-0.96219,-0.89670,-0.72241,-0.55112,-0.44809,-0.39319,-0.37833,-0.35641,-0.26270,-0.14230,-0.11282,-0.13525,-0.11536,-0.09671,-0.11511,-0.18060,-0.26874,-0.33374,-0.42215,-0.51358,-0.44785,-0.30450,-0.28613,-0.30527,-0.25037,-0.15390,-0.08286,-0.11157,-0.12592,-0.00327,0.13803,0.19141,0.12820,0.01788,-0.03952,-0.12592,-0.26773,-0.34634,-0.31384,-0.18060,-0.01080,0.13574,0.26120,0.36975,0.46573,0.55087,0.63626,0.73022,0.83072,0.92014,0.97177,0.98587,0.98413,0.99167,0.99445,0.99292,0.99219,0.98740,0.98007,0.96472,0.92239,0.82166,0.69067,0.57959,0.54962,0.59695,0.64255,0.64633,0.60629,0.55942,0.54910,0.58966,0.61887,0.56952,0.54181,0.59518,0.63248,0.63876,0.65463,0.73398,0.88312,0.96927,0.97101,0.97958,0.99344,0.99420,0.99268,0.99493,0.99469,0.99445,0.99521,0.99445,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99420,0.99493,0.99420,0.99393,0.99420,0.98840,0.98309,0.98309,0.96069,0.88461,0.79370,0.72064,0.65765,0.59998,0.53247,0.49268,0.48615,0.44205,0.38034,0.36447,0.38715,0.39294,0.32645,0.19595,0.07782,-0.05893,-0.27832,-0.48309,-0.62619,-0.72995,-0.79999,-0.84583,-0.82166,-0.73575,-0.67227,-0.65491,-0.64960,-0.66397,-0.70175,-0.72894,-0.74658,-0.76724,-0.79520,-0.82846,-0.86523,-0.90527,-0.94382,-0.89948,-0.69849,-0.47479,-0.31662,-0.15414,-0.00729,0.07077,0.08237,0.04431,-0.02292,-0.11761,-0.24307,-0.36926,-0.45087,-0.46170,-0.40250,-0.30679,-0.17529,0.00000,0.14331,0.24179,0.36774,0.49545,0.56522,0.57907,0.56775,0.53851,0.51132,0.48688,0.41913,0.26044,0.00955,-0.26297,-0.46396,-0.62341,-0.82214,-0.94684,-0.96774,-0.97531,-0.98413,-0.99017,-0.98990,-0.99219,-0.99066,-0.99142,-0.99167,-0.99118,-0.99219,-0.98990,-0.99118,-0.99368,-0.99142,-0.97757,-0.97403,-0.98007,-0.96170,-0.86826,-0.67783,-0.52719,-0.48788,-0.45490,-0.43146,-0.47681,-0.54105,-0.57983,-0.60904,-0.62317,-0.59949,-0.55566,-0.52063,-0.52115,-0.55112,-0.56244,-0.58337,-0.65540,-0.73373,-0.77228,-0.74759,-0.68890,-0.64609,-0.61887,-0.58060,-0.50351,-0.40729,-0.33929,-0.35110,-0.42944,-0.47028,-0.42267,-0.32718,-0.20224,-0.05640,0.04556,0.10529,0.17630,0.26169,0.33197,0.32138,0.23776,0.20956,0.23148,0.20352,0.23325,0.39267,0.52719,0.58438,0.62289,0.66345,0.70023,0.66296,0.54330,0.42618,0.33475,0.24533,0.14105,0.03851,0.01358,0.09143,0.22845,0.34961,0.41711,0.48740,0.58914,0.69519,0.78186,0.84357,0.89822,0.95389,0.98135,0.98615,0.99167,0.99243,0.99445,0.99420,0.99469,0.99493,0.99393,0.99545,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99469,0.98965,0.98715,0.98563,0.96295,0.91736,0.86624,0.82367,0.77554,0.68411,0.53549,0.38916,0.26120,0.11435,-0.04053,-0.18161,-0.23172,-0.19394,-0.15237,-0.10730,-0.02997,0.08588,0.22620,0.34305,0.44104,0.55740,0.65765,0.71259,0.69217,0.65363,0.69748,0.79572,0.89368,0.95514,0.97733,0.98413,0.98816,0.99243,0.99445,0.99243,0.97302,0.96674,0.97983,0.90378,0.71005,0.51056,0.40451,0.40982,0.41559,0.32996,0.24356,0.18866,0.11411,0.05365,0.01157,-0.03247,-0.09216,-0.16095,-0.23248,-0.31662,-0.39771,-0.48663,-0.59647,-0.71536,-0.82013,-0.85287,-0.82947,-0.84937,-0.92215,-0.97177,-0.98663,-0.98816,-0.98438,-0.99091,-0.99219,-0.99091,-0.99191,-0.99042,-0.99191,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99142]) },\r\n\t//from todbox beta (obviously)\r\n\t\r\n\t//{ name: \"ultrabox nes 12.5%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 0, 0, 0, 0, 0, 0]) },\r\n\t//{ name: \"ultrabox nes 25%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 0, 0, 0, 0, 0]) },\r\n//\t{ name: \"ultrabox nes 50%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 1, 1, 0, 0, 0]) },\r\n//\t{ name: \"ultrabox nes 25% negated\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([1, 0, 0, 1, 1, 1, 1, 1]) },\r\n\t//{ name: \"ultrabox nes triangle\", expression: 0.5, isSampled: true, isPercussion: false, extraSampleDetune: 63.28, samples: centerAndNormalizeWave([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) },\r\n\t//{ name: \"ultrabox gameboy kirby triangle\", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([2,5,7,1,0,2,2,3,2,5,5,9,3,4,8,9,5,4,8,1,3,1,3,5,9,8,9,2,1,6,9,0,7,9,6,8,1,6]) },\r\n\t//{ name: \"ultrabox gameboy kirby bass\", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([4,5,7,2,6,8,3,3,0,8,1,4,2,1,1,4,8,6,7,3,7,8,3,8,7,7,7,5,7,4,3,9,8,7,8,7,0,7]) },\r\n\t\r\n\t\r\n\t{ name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785,-0.67621,-0.40268,-0.43817,-0.45468,-0.22531,-0.18329,0.24750,0.71246,0.52155,0.56082,0.48395,0.33990,0.46957,0.27744,0.42313,0.47104,0.18796,0.12930,-0.13901,-0.07431,-0.16348,-0.74857,-0.73206,-0.35181,-0.26227,-0.41882,-0.27786,-0.19806,-0.19867,0.18643,0.24808,0.08847,-0.06964,0.06912,0.20474,-0.05304,0.29416,0.31967,0.14243,0.27521,-0.23932,-0.14752,0.12360,-0.26123,-0.26111,0.06616,0.26520,0.08090,0.15240,0.16254,-0.12061,0.04562,0.00131,0.04050,0.08182,-0.21729,-0.17041,-0.16312,-0.08563,0.06390,0.05099,0.05627,0.02728,0.00726,-0.13028,-0.05673,-0.14969,-0.17645,0.35492,0.16766,-0.00897,0.24326,-0.00461,-0.04456,0.01776,-0.04950,-0.01221,0.02039,0.07684,0.13397,0.39850,0.35962,0.13754,0.42310,0.27161,-0.17609,0.03659,0.10635,-0.21909,-0.22046,-0.20258,-0.40973,-0.40280,-0.40521,-0.66284]) },\r\n\t//based off an old mp3 in #modded-beepbox where someone tried to shorten the overdrive guitar into the size of other chip waves \r\n\t//search \"normie alert\" in beepcord\r\n]); \r\n\tpublic static chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\r\n\tpublic static rawRawChipWaves: DictionaryArray<ChipWave> = Config.rawChipWaves;\r\n\r\n\tpublic static firstIndexForSamplesInChipWaveList: number = Config.chipWaves.length;\r\n  \r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t// technically these are from the pandorasbox beta but whatever\r\n\t\t{ name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t// ultrabox noises\r\n\t\t{ name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t{ name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t//{ name: \"doom random\", expression: 1.0, basePitch: 84, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\t\r\n    public static readonly filterFreqStep: number = 1.0 / 4.0;\r\n    public static readonly filterFreqRange: number = 34;\r\n    public static readonly filterFreqReferenceSetting: number = 28;\r\n    public static readonly filterFreqReferenceHz: number = 8000.0;\r\n    public static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\r\n    public static readonly filterFreqMinHz: number = 8.0;\r\n    public static readonly filterGainRange: number = 15;\r\n    public static readonly filterGainCenter: number = 7;\r\n    public static readonly filterGainStep: number = 1.0 / 2.0;\r\n    public static readonly filterMaxPoints: number = 8;\r\n    public static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\r\n    public static readonly filterMorphCount: number = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\r\n\r\n    public static readonly filterSimpleCutRange: number = 11;\r\n    public static readonly filterSimplePeakRange: number = 8;\r\n\r\n    public static readonly fadeInRange: number = 10;\r\n    public static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\r\n    public static readonly fadeOutNeutral: number = 4;\r\n    public static readonly drumsetFadeOutTicks: number = 48;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\r\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\r\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\r\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\r\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\r\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\r\n\t\t\t//    { name: \"very shaky\", amplitude: 1, type: 0, delayTicks: 0 },\r\n\t//{ name: \"insane\", amplitude: 10, type: 1, delayTicks: 0 },\r\n\t    //todbox vibratos\r\n\t//\t{ name: \"super insane\", amplitude: 30, type: 1, delayTicks: 1 },\r\n\t\t//wackybox\r\n\t//\t { name: \"quiver\", amplitude: 0.001, type: 0, delayTicks: 0 },\r\n      //  { name: \"wub-wub\", amplitude: 10.0, type: 0, delayTicks: 0 },\r\n   //     { name: \"quiver delayed\", amplitude: 0.001, type: 0, delayTicks: 18 },\r\n      //  { name: \"vibrate\", amplitude: 0.08, type: 0, delayTicks: 0 },\r\n    //    { name: \"too much wub\", amplitude: 30.0, type: 0, delayTicks: 18 },\r\n\t //too much wub breaks things just a little bit at it's original amplitude\r\n\t\t//sandbox\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly unisons: DictionaryArray<Unison> = toNameMap([\r\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\r\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\r\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\r\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\r\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\r\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\r\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\r\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\r\n        { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\r\n\t\t{ name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\r\n\t\t{ name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\r\n\t\t{ name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\r\n\t\t{ name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\r\n\t\t{ name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\r\n\t\t{ name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\r\n\t    { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\r\n        { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\r\n\t\t{ name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\r\n\t\t\r\n\t //for modbox; voices = riffapp, spread = intervals, offset = offsets, expression = volume, and sign = signs\r\n\t]);\r\n    public static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\"];\r\n    public static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.panning, EffectType.transition, EffectType.chord, EffectType.pitchShift, EffectType.detune, EffectType.vibrato, EffectType.noteFilter, EffectType.distortion, EffectType.bitcrusher, EffectType.chorus, EffectType.echo, EffectType.reverb];\r\n    public static readonly noteSizeMax: number = 6;\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly panDelaySecondsMax: number = 0.001;\r\n    public static readonly chorusRange: number = 8;\r\n    public static readonly chorusPeriodSeconds: number = 2.0;\r\n    public static readonly chorusDelayRange: number = 0.0034;\r\n    public static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\r\n    public static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\r\n    public static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\r\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\r\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\r\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\r\n    ]);\r\n    public static readonly maxChordSize: number = 9;\r\n    public static readonly operatorCount: number = 4;\r\n\tpublic static readonly maxPitchOrOperatorCount: number = Math.max(Config.maxChordSize, Config.operatorCount+2);\r\n    public static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n        { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n        { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n        { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n        { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n        { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n        { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n        { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n        { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n        { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n        { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n        { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n        { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n        { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n        { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\r\n        { name: \"1←(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\r\n    ]);\r\n    public static readonly algorithms6Op: DictionaryArray<Algorithm> = toNameMap([\r\n        //placeholder makes life easier for later\r\n        { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\r\n        //yoinked from SynthBox\r\n        //algortihm Section 1\r\n        { name: \"1←2←3←4←5←6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\r\n        { name: \"1←3 2←4←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\r\n        { name: \"1←3←4 2←5←6\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\r\n        { name: \"1←4 2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\r\n        //Algorithm Section 2\r\n        { name: \"1←3 2←(4 5←6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\r\n        { name: \"1←(3 4) 2←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\r\n        { name: \"1←3 2←(4 5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\r\n        { name: \"1←3 2←(4 5)←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\r\n        { name: \"1←3 2←4←(5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\r\n        { name: \"1←(2 3 4 5 6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\r\n        { name: \"1←(2 3←5 4←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\r\n        { name: \"1←(2 3 4←5←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\r\n        //Algorithm Section 3\r\n        { name: \"1←4←5 (2 3)←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\r\n        { name: \"1←(3 4)←5 2←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\r\n        { name: \"(1 2)←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\r\n        { name: \"(1 2)←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\r\n        { name: \"(1 2 3)←(4 5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\r\n        { name: \"1←5 (2 3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\r\n        { name: \"1 2←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\r\n        { name: \"1 2 (3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\r\n        { name: \"1 2 3 (4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\r\n        //Algorithm Section 3\r\n        { name: \"1 2←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\r\n        { name: \"1←4 2←(5 6) 3\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\r\n        { name: \"1 2 3←5 4←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\r\n        { name: \"1 (2 3)←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\r\n        { name: \"1 2 3←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\r\n        { name: \"(1 2 3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\r\n        { name: \"1 2 3 4 5←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\r\n        { name: \"1 2 3 4 5 6\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\r\n        //Section 4 where we take our own previous ones for 4op and it gets weird\r\n        { name: \"1←(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\r\n        { name: \"1←(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\r\n        { name: \"1←4(2←5(3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\r\n        { name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\r\n    ]);\r\n    public static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n    public static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n        { name: \"0.12×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n        { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n        { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\r\n        { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~4×\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\r\n        { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t\t{ name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t//ultrabox\r\n        { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t\t{ name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t//ultrabox\r\n        { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t\t{ name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t//ultrabox\r\n        { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t{ name: \"~20×\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\r\n\t    // dogebox (maybe another mod also adds this? I got it from dogebox)\r\n\t\t{ name: \"25×\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t{ name: \"50×\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t{ name: \"75×\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t{ name: \"100×\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 }\r\n\t    //50 and 100 are from dogebox\r\n    ]);\r\n\r\n    public static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\r\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\r\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n        { name: \"flare -1\", type: EnvelopeType.flare, speed: 128.0 },\r\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n        { name: \"twang -1\", type: EnvelopeType.twang, speed: 128.0 },\r\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n        { name: \"swell -1\", type: EnvelopeType.swell, speed: 128.0 },\r\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n        { name: \"tremolo0\", type: EnvelopeType.tremolo, speed: 8.0 },\r\n        { name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n        { name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n        { name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n        { name: \"decay -1\", type: EnvelopeType.decay, speed: 40.0 },\r\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n        { name: \"wibble-1\", type: EnvelopeType.wibble, speed: 96.0 },\r\n        { name: \"wibble 1\", type: EnvelopeType.wibble, speed: 24.0 },\r\n        { name: \"wibble 2\", type: EnvelopeType.wibble, speed: 12.0 },\r\n        { name: \"wibble 3\", type: EnvelopeType.wibble, speed: 4.0 },\r\n        { name: \"linear-2\", type: EnvelopeType.linear, speed: 256.0 },\r\n        { name: \"linear-1\", type: EnvelopeType.linear, speed: 128.0 },\r\n        { name: \"linear 1\", type: EnvelopeType.linear, speed: 32.0 },\r\n        { name: \"linear 2\", type: EnvelopeType.linear, speed: 8.0 },\r\n        { name: \"linear 3\", type: EnvelopeType.linear, speed: 2.0 },\r\n        { name: \"rise -2\", type: EnvelopeType.rise, speed: 256.0 },\r\n        { name: \"rise -1\", type: EnvelopeType.rise, speed: 128.0 },\r\n        { name: \"rise 1\", type: EnvelopeType.rise, speed: 32.0 },\r\n        { name: \"rise 2\", type: EnvelopeType.rise, speed: 8.0 },\r\n        { name: \"rise 3\", type: EnvelopeType.rise, speed: 2.0 },\r\n\t    \t\t//modbox\r\n        { name: \"flute 1\", type: 9, speed: 16.0 },\r\n\t\t{ name: \"flute 2\", type: 9, speed: 8.0 },\r\n\t\t{ name: \"flute 3\", type: 9, speed: 4.0 },\r\n        // sandbox\r\n\t\t{ name: \"tripolo1\", type: 6, speed: 9.0 },\r\n        { name: \"tripolo2\", type: 6, speed: 6.0 },\r\n        { name: \"tripolo3\", type: 6, speed: 3.0 },\r\n        { name: \"tripolo4\", type: 7, speed: 9.0 },\r\n        { name: \"tripolo5\", type: 7, speed: 6.0 },\r\n        { name: \"tripolo6\", type: 7, speed: 3.0 },\r\n        { name: \"pentolo1\", type: 6, speed: 10.0 },\r\n        { name: \"pentolo2\", type: 6, speed: 5.0 },\r\n        { name: \"pentolo3\", type: 6, speed: 2.5 },\r\n        { name: \"pentolo4\", type: 7, speed: 10.0 },\r\n        { name: \"pentolo5\", type: 7, speed: 5.0 },\r\n        { name: \"pentolo6\", type: 7, speed: 2.5 },\t\r\n        // todbox\r\n\t    { name: \"flutter 1\", type: 6, speed: 14.0 },\r\n        { name: \"flutter 2\", type: 7, speed: 11.0 },\r\n        { name: \"water-y flutter\", type: 6, speed: 9.0 },\r\n\t    // new jummbox\r\n        { name: \"blip 1\", type: EnvelopeType.blip, speed: 6.0 },\r\n        { name: \"blip 2\", type: EnvelopeType.blip, speed: 16.0 },\r\n        { name: \"blip 3\", type: EnvelopeType.blip, speed: 32.0 },\r\n    ]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n        { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n        { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\r\n        { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\r\n        { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\r\n        { name: \"1→2→3→4→1\", indices: [[4], [1], [2], [3]] },\r\n        { name: \"(1 2 3)→4\", indices: [[], [], [], [1, 2, 3]] },\r\n        { name: \"ALL\", indices: [[1,2,3,4], [1,2,3,4], [1,2,3,4], [1, 2, 3,4]] },\r\n    ]);\r\n    public static readonly feedbacks6Op: DictionaryArray<Feedback> = toNameMap([\r\n        //placeholder makes life easier for later\r\n        { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\r\n\r\n        { name: \"1⟲\", indices: [[1], [], [], [], [], []] },\r\n        { name: \"2⟲\", indices: [[], [2], [], [], [], []] },\r\n        { name: \"3⟲\", indices: [[], [], [3], [], [], []] },\r\n        { name: \"4⟲\", indices: [[], [], [], [4], [], []] },\r\n        { name: \"5⟲\", indices: [[], [], [], [], [5], []] },\r\n        { name: \"6⟲\", indices: [[], [], [], [], [], [6]] },\r\n        { name: \"1⟲ 2⟲\", indices: [[1], [2], [], [], [], []] },\r\n        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], [], [], []] },\r\n        { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4], [], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4], [], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲\", indices: [[1], [2], [3], [4], [5], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", indices: [[1], [2], [3], [4], [5], [6]] },\r\n        { name: \"1→2\", indices: [[], [1], [], [], [], []] },\r\n        { name: \"1→3\", indices: [[], [], [1], [], [], []] },\r\n        { name: \"1→4\", indices: [[], [], [], [1], [], []] },\r\n        { name: \"1→5\", indices: [[], [], [], [], [1], []] },\r\n        { name: \"1→6\", indices: [[], [], [], [], [], [1]] },\r\n        { name: \"2→3\", indices: [[], [], [2], [], [], []] },\r\n        { name: \"2→4\", indices: [[], [], [], [2], [], []] },\r\n        { name: \"3→4\", indices: [[], [], [], [3], [], []] },\r\n        { name: \"4→5\", indices: [[], [], [], [], [4], []] },\r\n        { name: \"1→4 2→5 3→6\", indices: [[], [], [], [1], [2], [3]] },\r\n        { name: \"1→5 2→6 3→4\", indices: [[], [], [], [3], [1], [2]] },\r\n        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\r\n        { name: \"2→1→6→5→4→3→2\", indices: [[2], [3], [4], [5], [6], [1]] },\r\n        { name: \"1→2→3→4→5→6→1\", indices: [[6], [1], [2], [3], [4], [5]] },\r\n        { name: \"1↔2 3↔4 5↔6\", indices: [[2], [1], [4], [3], [6], [5]] },\r\n        { name: \"1↔4 2↔5 3↔6\", indices: [[4], [5], [6], [1], [2], [3]] },\r\n        { name: \"(1,2,3,4,5)→6\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\r\n        { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\r\n    ]);\r\n    public static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n    public static readonly spectrumNoiseLength: number = 1 << 15; // 32768\r\n    public static readonly spectrumBasePitch: number = 24;\r\n    public static readonly spectrumControlPoints: number = 30;\r\n    public static readonly spectrumControlPointsPerOctave: number = 7;\r\n    public static readonly spectrumControlPointBits: number = 3;\r\n    public static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n    public static readonly harmonicsControlPoints: number = 28;\r\n    public static readonly harmonicsRendered: number = 64;\r\n    public static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\r\n    public static readonly harmonicsControlPointBits: number = 3;\r\n    public static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n    public static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n    public static readonly pulseWidthRange: number = 50;\r\n    public static readonly pulseWidthStepPower: number = 0.5;\r\n    public static readonly supersawVoiceCount: number = 7;\r\n\tpublic static readonly supersawDynamismMax: number = 6;\r\n\tpublic static readonly supersawSpreadMax: number = 12;\r\n\tpublic static readonly supersawShapeMax: number = 6;\r\n    public static readonly pitchChannelCountMin: number = 1;\r\n    public static readonly pitchChannelCountMax: number = 60;\r\n    public static readonly noiseChannelCountMin: number = 0;\r\n    public static readonly noiseChannelCountMax: number = 32;\r\n    public static readonly modChannelCountMin: number = 0;\r\n    public static readonly modChannelCountMax: number = 24;\r\n    public static readonly noiseInterval: number = 6;\r\n    public static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n    public static readonly drumCount: number = 12;\r\n    public static readonly pitchOctaves: number = 8;\r\n    public static readonly modCount: number = 6;\r\n    public static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n    public static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n    public static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);\r\n    public static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\r\n    public static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\r\n    public static readonly detuneCenter: number = 200;\r\n    public static readonly detuneMax: number = 400;\r\n    public static readonly detuneMin: number = 0;\r\n    public static readonly songDetuneMin: number = 0;\r\n    public static readonly songDetuneMax: number = 500;\r\n    public static readonly sineWaveLength: number = 1 << 8; // 256\r\n    public static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n    public static readonly sineWave: Float32Array = generateSineWave();\r\n\r\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\r\n    public static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\r\n    public static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\r\n    public static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\r\n    public static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\r\n\r\n    public static readonly distortionRange: number = 8;\r\n    public static readonly stringSustainRange: number = 15;\r\n    public static readonly stringDecayRate: number = 0.12;\r\n    public static readonly enableAcousticSustain: boolean = false;\r\n\tpublic static readonly sustainTypeNames: ReadonlyArray<string> = [\"bright\", \"acoustic\"]; // See SustainType enum above.\r\n\r\n    public static readonly bitcrusherFreqRange: number = 14;\r\n    public static readonly bitcrusherOctaveStep: number = 0.5;\r\n    public static readonly bitcrusherQuantizationRange: number = 8;\r\n\r\n    public static readonly maxEnvelopeCount: number = 12;\r\n    public static readonly defaultAutomationRange: number = 13;\r\n    public static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\r\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, compatibleInstruments: null },\r\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"note volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, compatibleInstruments: null },\r\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\r\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pickedString] },\r\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString, InstrumentType.customChipWave] },\r\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\r\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\r\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\r\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: EffectType.pitchShift, compatibleInstruments: null },\r\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: EffectType.detune, compatibleInstruments: null },\r\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato range\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\r\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"n. filter freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: EffectType.noteFilter, compatibleInstruments: null },\r\n        { name: \"noteFilterFreq\", computeIndex: EnvelopeComputeIndex.noteFilterFreq0, displayName: \"n. filter # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter: true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null },\r\n        { name: \"decimalOffset\", computeIndex: EnvelopeComputeIndex.decimalOffset, displayName: \"decimal offset\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\r\n        { name: \"supersawDynamism\",       computeIndex:       EnvelopeComputeIndex.supersawDynamism,       displayName: \"dynamism\",         /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawDynamismMax + 1, */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\r\n\t\t{ name: \"supersawSpread\",         computeIndex:       EnvelopeComputeIndex.supersawSpread,         displayName: \"spread\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawSpreadMax + 1,   */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\r\n\t\t{ name: \"supersawShape\",          computeIndex:       EnvelopeComputeIndex.supersawShape,          displayName: \"saw↔pulse\",        /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawShapeMax + 1,    */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},    \r\n        // Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\r\n        //{name: \"noteFilterGain\",         computeIndex:       EnvelopeComputeIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\r\n        /*\r\n        {name: \"distortion\",             computeIndex: InstrumentAutomationIndex.distortion,             displayName: \"distortion\",       perNote: false, interleave: false, isFilter: false, range: Config.distortionRange,             maxCount: 1,    effect: EffectType.distortion,   compatibleInstruments: null},\r\n        {name: \"bitcrusherQuantization\", computeIndex: InstrumentAutomationIndex.bitcrusherQuantization, displayName: \"bit crush\",        perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherQuantizationRange, maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\r\n        {name: \"bitcrusherFrequency\",    computeIndex: InstrumentAutomationIndex.bitcrusherFrequency,    displayName: \"freq crush\",       perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherFreqRange,         maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\r\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\r\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\r\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\r\n        {name: \"panning\",                computeIndex: InstrumentAutomationIndex.panning,                displayName: \"panning\",          perNote: false, interleave: false, isFilter: false, range: Config.panMax + 1,                  maxCount: 1,    effect: EffectType.panning,      compatibleInstruments: null},\r\n        {name: \"chorus\",                 computeIndex: InstrumentAutomationIndex.chorus,                 displayName: \"chorus\",           perNote: false, interleave: false, isFilter: false, range: Config.chorusRange,                 maxCount: 1,    effect: EffectType.chorus,       compatibleInstruments: null},\r\n        {name: \"echoSustain\",            computeIndex: InstrumentAutomationIndex.echoSustain,            displayName: \"echo\",             perNote: false, interleave: false, isFilter: false, range: Config.echoSustainRange,            maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null},\r\n        {name: \"echoDelay\",              computeIndex: InstrumentAutomationIndex.echoDelay,              displayName: \"echo delay\",       perNote: false, interleave: false, isFilter: false, range: Config.echoDelayRange,              maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null}, // wait until after we're computing a tick's settings for multiple run lengths.\r\n        {name: \"reverb\",                 computeIndex: InstrumentAutomationIndex.reverb,                 displayName: \"reverb\",           perNote: false, interleave: false, isFilter: false, range: Config.reverbRange,                 maxCount: 1,    effect: EffectType.reverb,       compatibleInstruments: null},\r\n        {name: \"mixVolume\",              computeIndex: InstrumentAutomationIndex.mixVolume,              displayName: \"mix volume\",       perNote: false, interleave: false, isFilter: false, range: Config.volumeRange,                 maxCount: 1,    effect: null,                    compatibleInstruments: null},\r\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\r\n        */\r\n    ]);\r\n    public static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\r\n\t\t{ name: \"sine\", samples: Config.sineWave },\r\n\t\t{ name: \"triangle\", samples: generateTriWave() },\r\n\t\t{ name: \"pulse width\", samples: generateSquareWave() },\r\n\t\t{ name: \"sawtooth\", samples: generateSawWave() },\r\n\t\t{ name: \"ramp\", samples: generateSawWave(true) },\r\n\t\t{ name: \"trapezoid\", samples: generateTrapezoidWave(2) },\r\n\t    { name: \"rounded\", samples: generateRoundedSineWave() },\r\n\t\t//{ name: \"white noise\", samples: generateWhiteNoiseFmWave() },\r\n\t\t//{ name: \"1-bit white noise\", samples: generateOneBitWhiteNoiseFmWave() },\r\n    ]);\r\n    public static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\r\n        { name: \"1%\", samples: generateSquareWave(0.01) },\r\n        { name: \"5%\", samples: generateSquareWave(0.05) },\r\n        { name: \"12.5%\", samples: generateSquareWave(0.125) },\r\n        { name: \"25%\", samples: generateSquareWave(0.25) },\r\n        { name: \"33%\", samples: generateSquareWave(1 / 3) },\r\n        { name: \"50%\", samples: generateSquareWave(0.5) },\r\n        { name: \"66%\", samples: generateSquareWave(2 / 3) },\r\n        { name: \"75%\", samples: generateSquareWave(0.75) },\r\n        { name: \"87.5%\", samples: generateSquareWave(0.875) },\r\n        { name: \"95%\", samples: generateSquareWave(0.95) },\r\n        { name: \"99%\", samples: generateSquareWave(0.99) },\r\n    ]);\r\n\r\n\r\n    // Height of the small editor column for inserting/deleting rows, in pixels.\r\n    public static readonly barEditorHeight: number = 10;\r\n\r\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\r\n    public static readonly modulators: DictionaryArray<Modulator> = toNameMap([\r\n        { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"No Mod Setting\", promptDesc: [ \"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\" ] },\r\n        { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Song Volume\", promptDesc: [ \"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length,\r\n            promptName: \"Song Tempo\", promptDesc: [ \"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\" ] },\r\n        { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length,\r\n            promptName: \"Song Reverb\", promptDesc: [ \"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\r\n        { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Go To Next Bar\", promptDesc: [ \"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\" ] },\r\n        { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\r\n            promptName: \"Note Volume\", promptDesc: [ \"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\r\n        { name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\r\n            promptName: \"Instrument Panning\", promptDesc: [ \"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\" ] },\r\n        { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb,\r\n            promptName: \"Instrument Reverb\", promptDesc: [ \"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion,\r\n            promptName: \"Instrument Distortion\", promptDesc: [ \"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\" ] },\r\n        { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 1\", promptDesc: [ \"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm feedback\", pianoName: \"FM Feedback\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\r\n        { name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.detune,\r\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\r\n        { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\r\n        { name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length,\r\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\r\n        { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\r\n        { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\r\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\r\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\r\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\r\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\r\n        { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange-1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\r\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange-1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\r\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo,\r\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\" ]\r\n        }, // Disabled via associatedEffect and manually in list build in SongEditor, enable and set back to echo after fixing bugginess!\r\n        { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus,\r\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.pitchShift,\r\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\r\n        { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\r\n            promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\r\n        { name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, optionalModify: \"invert-0to99\", associatedEffect: EffectType.length,\r\n            promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"] },\r\n        { name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\r\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: Config.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"spread\", pianoName: \"Spread\", maxRawVol: Config.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: Config.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"] },\r\n        ]);\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float32Array {\r\n    let sum: number = 0.0;\r\n    for (let i: number = 0; i < wave.length; i++) sum += wave[i];\r\n    const average: number = sum / wave.length;\r\n    for (let i: number = 0; i < wave.length; i++) wave[i] -= average;\r\n    performIntegral(wave);\r\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n    wave.push(0);\r\n    return new Float32Array(wave);\r\n}\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\r\n    let magn: number = 0.0;\r\n\r\n    centerWave(wave);\r\n\r\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\r\n    for (let i: number = 0; i < wave.length - 1; i++) {\r\n        magn += Math.abs(wave[i]);\r\n    }\r\n    const magnAvg: number = magn / (wave.length - 1);\r\n\r\n    for (let i: number = 0; i < wave.length - 1; i++) {\r\n        wave[i] = wave[i] / magnAvg;\r\n    }\r\n\r\n    return new Float32Array(wave);\r\n\r\n}\r\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\r\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\r\n    let cumulative: number = 0.0;\r\n    let newWave: Float32Array = new Float32Array(wave.length);\r\n    for (let i: number = 0; i < wave.length; i++) {\r\n        newWave[i] = cumulative;\r\n        cumulative += wave[i];\r\n    }\r\n\r\n    return newWave;\r\n}\r\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\r\n\t// Old ver used in harmonics/picked string instruments, manipulates wave in place.\r\n\tlet cumulative: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tconst temp = wave[i];\r\n\t\twave[i] = cumulative;\r\n\t\tcumulative += temp;\r\n\t}\r\n}\r\n\r\nexport function getPulseWidthRatio(pulseWidth: number): number {\r\n    // BeepBox formula for reference\r\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\r\n\r\n    return pulseWidth / (Config.pulseWidthRange * 2);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\r\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\r\n    if (wave == null) {\r\n        wave = new Float32Array(Config.chipNoiseLength + 1);\r\n        Config.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 - 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 9) {\r\n            // a noise more like old static than white noise\r\n            let drumBuffer: number = 1;\r\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\r\n                let newBuffer: number = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 8 ^ 2 << 16;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n\t\t}\r\n\t\t\t\t\telse if (index == 10) {\r\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n                    wave[i] = Math.round(Math.random());\r\n                }\r\n            }\r\n\t\t\t else if (index == 11) {\r\n                var drumBuffer = 1;\r\n                for (var i = 0; i < 32768; i++) {\r\n                    wave[i] = Math.round((drumBuffer & 1));\r\n                    var newBuffer = drumBuffer >> 1;\r\n                    if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                        newBuffer -= 10 << 2;\r\n                    }\r\n                    drumBuffer = newBuffer;\r\n                }\r\n            }\r\n\t\t\telse if (index == 12) {\r\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n                   var ultraboxnewchipnoiserand = Math.random();\r\n\t\t\t\t   wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\r\n                }\r\n            }\r\n\t\t\telse if (index == 13) {\r\n\t\t\t\tvar b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\r\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\r\n\t\t\t\t\r\n\t\t\t\tfor (let i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\t\tvar white = Math.random() * 2 - 1;\r\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\r\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\r\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\r\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\r\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\r\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\r\n\t\t\t\t\twave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\r\n\t\t\t\t\twave[i] *= 0.44;\r\n\t\t\t\t\tb6 = white * 0.115926;\r\n\t\t\t\t\t// from https://github.com/zacharydenton/noise.js, MIT license soooo\r\n                }\r\n            }\r\n\t\t\telse if (index == 14) {\r\n\t\t\t\tvar lastOut = 0.0;\r\n\t\t\t\t\r\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\t\tvar white = Math.random() * 2 - 1;\r\n\t\t\t\t\twave[i] = (lastOut + (0.02 * white)) / 1.02;\r\n\t\t\t\t\tlastOut = wave[i];\r\n\t\t\t\t\twave[i] *= 14;\r\n\t\t\t\t\t// this is also from noise.js\r\n                }\r\n            }\r\n\t\t//\telse if (index == 15) {\r\n\t\t//\t\tconst doomRandArray = [0, 8, 109, 220, 222, 241, 149, 107, 75, 248, 254, 140, 16, 66 , 74, 21, 211, 47, 80, 242, 154, 27, 205, 128, 161, 89, 77, 36 , 95, 110, 85, 48, 212, 140, 211, 249, 22, 79, 200, 50, 28, 188 , 52, 140, 202, 120, 68, 145, 62, 70, 184, 190, 91, 197, 152, 224 , 149, 104, 25, 178, 252, 182, 202, 182, 141, 197, 4, 81, 181, 242 , 145, 42, 39, 227, 156, 198, 225, 193, 219, 93, 122, 175, 249, 0 , 175, 143, 70, 239, 46, 246, 163, 53, 163, 109, 168, 135, 2, 235 , 25, 92, 20, 145, 138, 77, 69, 166, 78, 176, 173, 212, 166, 113 , 94, 161, 41, 50, 239, 49, 111, 164, 70, 60, 2, 37, 171, 75 , 136, 156, 11, 56, 42, 146, 138, 229, 73, 146, 77, 61, 98, 196 , 135, 106, 63, 197, 195, 86, 96, 203, 113, 101, 170, 247, 181, 113 , 80, 250, 108, 7, 255, 237, 129, 226, 79, 107, 112, 166, 103, 241 , 24, 223, 239, 120, 198, 58, 60, 82, 128, 3, 184, 66, 143, 224 , 145, 224, 81, 206, 163, 45, 63, 90, 168, 114, 59, 33, 159, 95 , 28, 139, 123, 98, 125, 196, 15, 70, 194, 253, 54, 14, 109, 226 , 71, 17, 161, 93, 186, 87, 244, 138, 20, 52, 123, 251, 26, 36 , 17, 46, 52, 231, 232, 76, 31, 221, 84, 37, 216, 165, 212, 106 , 197, 242, 98, 43, 39, 175, 254, 145, 190, 84, 118, 222, 187, 136 , 120, 163, 236, 249];\r\n\t\t//\t\tconst randomSeed = Math.floor(Math.random() * 256);\r\n\t\t//\t\tvar amountOfLoops = 0;\r\n\t\t//\t\tvar newWaveValue = 0;\r\n       //         for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t//\t\t\tif (i / 256 > amountOfLoops) {amountOfLoops++;}\r\n\t\t//\t\t\tnewWaveValue = doomRandArray.at(i - amountOfLoops * 256 + randomSeed);\r\n\t\t//\t\t\tif (newWaveValue > 256) {newWaveValue += - 256;}\r\n\t\t//\t\t\twave[i] = newWaveValue * 0.0025;\r\n\t\t\t\t\t//this sucks\r\n\t\t\t\t\t//also the randomized starting point code I spent 5 minutes on does nothing (auditorily)\r\n        //        }\r\n            //}\r\n\t\t\r\n\t\telse {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n        wave[Config.chipNoiseLength] = wave[0];\r\n    }\r\n\r\n    return wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n    const referenceOctave: number = 11;\r\n    const referenceIndex: number = 1 << referenceOctave;\r\n    const lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n    const highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\r\n    const retroWave: Float32Array = getDrumWave(0, null, null);\r\n    let combinedAmplitude: number = 0.0;\r\n    for (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n        let lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\r\n        let amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\r\n\r\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n        combinedAmplitude += amplitude;\r\n\r\n        // Add two different sources of psuedo-randomness to the noise\r\n        // (individually they aren't random enough) but in a deterministic\r\n        // way so that live spectrum editing doesn't result in audible pops.\r\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\r\n        // LFSR retro wave (effectively random), and also rotate the phase\r\n        // of each sine wave based on the golden angle to disrupt the symmetry.\r\n        amplitude *= retroWave[i];\r\n        const radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n        wave[i] = Math.cos(radians) * amplitude;\r\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\r\n    }\r\n\r\n    return combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateTriWave(): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateTrapezoidWave(drive: number = 2): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSquareWave(phaseWidth: number = 0): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    const centerPoint: number = Config.sineWaveLength / 4;\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\r\n            || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSawWave(inverse: boolean = false): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\r\n        wave[i] = inverse ? -wave[i] : wave[i];\r\n    }\r\n    return wave;\r\n}\r\n\r\n\t// function generateWhiteNoiseFmWave() {\r\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\r\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n            // wave[i] = Math.random() * 2.0 - 1.0;\r\n        // }\r\n        // return wave;\r\n    // }\r\n\t// function generateOneBitWhiteNoiseFmWave() {\r\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\r\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n            // wave[i] = Math.round(Math.random());\r\n        // }\r\n        // return wave;\r\n    // }\r\n\tfunction generateRoundedSineWave() {\r\n        const wave = new Float32Array(Config.sineWaveLength + 1);\r\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));\r\n        }\r\n        return wave;\r\n\t}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n    let arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n    if (arpeggioPattern != null) {\r\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n            arpeggioPattern = [0, 0, 1, 1];\r\n        }\r\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n    } else {\r\n        return arpeggio % pitchCount;\r\n    }\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n    const dictionary: Dictionary<T> = {};\r\n    for (let i: number = 0; i < array.length; i++) {\r\n        const value: any = array[i];\r\n        value.index = i;\r\n        dictionary[value.name] = <T>value;\r\n    }\r\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n    result.dictionary = dictionary;\r\n    return result;\r\n}\r\n\r\nexport function effectsIncludeTransition(effects: number): boolean {\r\n    return (effects & (1 << EffectType.transition)) != 0;\r\n}\r\nexport function effectsIncludeChord(effects: number): boolean {\r\n    return (effects & (1 << EffectType.chord)) != 0;\r\n}\r\nexport function effectsIncludePitchShift(effects: number): boolean {\r\n    return (effects & (1 << EffectType.pitchShift)) != 0;\r\n}\r\nexport function effectsIncludeDetune(effects: number): boolean {\r\n    return (effects & (1 << EffectType.detune)) != 0;\r\n}\r\nexport function effectsIncludeVibrato(effects: number): boolean {\r\n    return (effects & (1 << EffectType.vibrato)) != 0;\r\n}\r\nexport function effectsIncludeNoteFilter(effects: number): boolean {\r\n    return (effects & (1 << EffectType.noteFilter)) != 0;\r\n}\r\nexport function effectsIncludeDistortion(effects: number): boolean {\r\n    return (effects & (1 << EffectType.distortion)) != 0;\r\n}\r\nexport function effectsIncludeBitcrusher(effects: number): boolean {\r\n    return (effects & (1 << EffectType.bitcrusher)) != 0;\r\n}\r\nexport function effectsIncludePanning(effects: number): boolean {\r\n    return (effects & (1 << EffectType.panning)) != 0;\r\n}\r\nexport function effectsIncludeChorus(effects: number): boolean {\r\n    return (effects & (1 << EffectType.chorus)) != 0;\r\n}\r\nexport function effectsIncludeEcho(effects: number): boolean {\r\n    return (effects & (1 << EffectType.echo)) != 0;\r\n}\r\nexport function effectsIncludeReverb(effects: number): boolean {\r\n    return (effects & (1 << EffectType.reverb)) != 0;\r\n}\r\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\r\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\r\n    const dictionary: Dictionary<ChipWave> = {};\r\n    for (let i: number = 0; i < newArray.length; i++) {\r\n        newArray[i] = Object.assign([], raw[i]);\r\n        const value: any = newArray[i];\r\n        value.index = i;\r\n        dictionary[value.name] = <ChipWave>value;\r\n    }\r\n    for (let key in dictionary) {\r\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\r\n    }\r\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\r\n    result.dictionary = dictionary;\r\n    return result;\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap, TypePresets } from \"../synth/SynthConfig\";\r\n\r\nexport interface PresetCategory extends BeepBoxOption {\r\n    readonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n    readonly isNoise?: boolean;\r\n    readonly isMod?: boolean;\r\n    readonly generalMidi?: boolean;\r\n    readonly midiProgram?: number;\r\n    readonly midiSubharmonicOctaves?: number;\r\n    readonly customType?: InstrumentType;\r\n    readonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n    public static readonly version: string = \"2.2.4\"; // Using patch versions in display right now, maybe TODAY.\r\n    public static readonly versionDisplayName: string = \"BariBox™ \" + EditorConfig.version;\r\n\r\n    public static readonly releaseNotesURL: string = \"./patch_notes.html\";\r\n\r\n    public static readonly isOnMac: boolean = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\r\n    public static readonly ctrlSymbol: string = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\r\n    public static readonly ctrlName: string = EditorConfig.isOnMac ? \"command\" : \"control\";\r\n\r\n    public static customSamples: string[] | null;\r\n\t\r\n    public static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n        {\r\n        // The order of this array needs to line up with the order of the InstrumentType declarations in SynthConfig.ts. (changes.ts' random instrument generation relies on this, for one.)\r\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: TypePresets[InstrumentType.chip], customType: InstrumentType.chip },\r\n                { name: TypePresets[InstrumentType.fm], customType: InstrumentType.fm },\r\n                { name: TypePresets[InstrumentType.noise], customType: InstrumentType.noise },\r\n                { name: TypePresets[InstrumentType.spectrum], customType: InstrumentType.spectrum },\r\n                { name: TypePresets[InstrumentType.drumset], customType: InstrumentType.drumset },\r\n                { name: TypePresets[InstrumentType.harmonics], customType: InstrumentType.harmonics },\r\n                { name: TypePresets[InstrumentType.pwm], customType: InstrumentType.pwm },\r\n                { name: TypePresets[InstrumentType.pickedString], customType: InstrumentType.pickedString },\r\n                { name: TypePresets[InstrumentType.supersaw], customType: InstrumentType.supersaw },\r\n                { name: TypePresets[InstrumentType.customChipWave], customType: InstrumentType.customChipWave },\r\n                { name: TypePresets[InstrumentType.fm6op], customType: InstrumentType.fm6op },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\r\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\r\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\r\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n                { name: \"supersaw lead\",    midiProgram:  81, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":2}],\"effects\":[\"reverb\"],\"reverb\":67,\"fadeInSeconds\":0,\"fadeOutTicks\":-6,\"pulseWidth\":50,\"dynamism\":100,\"spread\":58,\"shape\":0,\"envelopes\":[]}},\r\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\r\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\r\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\r\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\r\n                { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\", \"transition\": \"seemless\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\r\n                \r\n            ])\r\n        },\r\n        {\r\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\r\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\r\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\r\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\r\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\r\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\r\n                { name: \"grand piano 3\",  midiProgram: 0, generalMidi: true, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":148.65,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":4},{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":4},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":0.25}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.0884}],\"reverb\":67,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"harmonics\":[100,100,86,86,86,71,71,71,0,71,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],\"unison\":\"piano\",\"stringSustain\":86,\"stringSustainType\":\"acoustic\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1}]}},\r\n\r\n            ])\r\n        },\r\n        {\r\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\r\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\r\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\r\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\r\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\r\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\r\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\r\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\r\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\r\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\r\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n                { name: \"supersaw string\",  midiProgram:  41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":1.4142},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":0.1768}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":500,\"linearGain\":0.1768}],\"reverb\":33,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":6,\"pulseWidth\":35.35534,\"dynamism\":83,\"spread\":8,\"shape\":50,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0}]}},\r\n                { name: \"supersaw string 2\", midiProgram: 41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"effects\":[\"note filter\",\"chorus\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"chorus\":57,\"reverb\":42,\"fadeInSeconds\":0.0575,\"fadeOutTicks\":-6,\"pulseWidth\":50,\"dynamism\":67,\"spread\":58,\"shape\":0,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"punch\"},{\"target\":\"pulseWidth\",\"envelope\":\"flare 2\"}]}},\r\n            ])\r\n        },\r\n        {\r\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\r\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\r\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\r\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\r\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\r\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\r\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\r\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\r\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\r\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\r\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\r\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\r\n                { name: \"supersaw pad\", midiProgram: 93, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768}],\"effects\":[\"reverb\"],\"reverb\":100,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":24,\"pulseWidth\":50,\"dynamism\":100,\"spread\":58,\"shape\":0,\"envelopes\":[]}},\r\n            ])\r\n        },\r\n        {\r\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\r\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\r\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\r\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\r\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\r\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\r\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\r\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\r\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\r\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n            ])\r\n        },\r\n        { name: \"UltraBox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                // custom presets from this mod\t\t    \r\n                { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } }, \r\n                { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } }, \r\n                //\r\n                { name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"noteSubFilters0\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                // from lognes\r\n                { name: \"dubsteb bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"chord type\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 } ] } },\r\n                //\r\n                { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"note filter\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 } ] } },\r\n                //\r\n                { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 } ], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" } ] } },\r\n                //\r\n                { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [ \"chord type\" ], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"2×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" } ] } },\r\n                // from main\r\n                { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 } ], \"effects\": [ \"note filter\", \"echo\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 } ], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [ 86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86 ], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" } ] } }, \r\n                // from neputendo\r\n                { name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 } ], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"chorus\", \"reverb\" ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\r\n                // from neputendo\r\n                { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\r\n                // THANKS TO ANSWEARING MACHINE for the FM supersaw\r\n                { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\" ], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4 5 6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 } ], \"envelopes\": [] } },\r\n                // based off of the todbox wind preset that was removed\r\n                { name: \"wind\", generalMidi: false, settings:{\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":250.03,\"linearGain\":11.3137}],\"eqFilterType\":true,\"eqSimpleCut\":0,\"eqSimplePeak\":7,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"eqSubFilters1\":[],\"effects\":[\"transition type\",\"reverb\"],\"transition\":\"continue\",\"clicklessTransition\":false,\"panDelay\":10,\"reverb\":0,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1→3 2→4\",\"feedbackAmplitude\":15,\"operators\":[{\"frequency\":\"16×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"16×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"16×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"16×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[]} },\r\n                // this meow is from nobo\r\n                { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [ \"panning\", \"chord type\", \"reverb\" ], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [ { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" } ] } },  \r\n                // based off of the \"obama why\" beepcord inside joke so thanks to nobo ig\r\n                { name: \"vocal why\", generalMidi: false, settings:{ \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [ \"note filter\", \"panning\", \"reverb\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 } ], \"pan\": 0, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [ 100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0 ], \"unison\": \"octave\", \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" } ] } },\r\n                ]) },\r\n    ]);\r\n\r\n    public static valueToPreset(presetValue: number): Preset | null {\r\n        const categoryIndex: number = presetValue >> 6;\r\n        const presetIndex: number = presetValue & 0x3F;\r\n        return EditorConfig.presetCategories[categoryIndex]?.presets[presetIndex];\r\n    }\r\n\r\n    public static midiProgramToPresetValue(program: number): number | null {\r\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n                const preset: Preset = category.presets[presetIndex];\r\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static nameToPresetValue(presetName: string): number | null {\r\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n                const preset: Preset = category.presets[presetIndex];\r\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static instrumentToPreset(instrument: InstrumentType): Preset | null {\r\n        return EditorConfig.presetCategories[0].presets.dictionary?.[TypePresets?.[instrument]];\r\n    }\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\t\t\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\t\t\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\t\tconst real0: number = realArray[startIndex ];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\t\tconst imag0: number = imagArray[startIndex ];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\t\t\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\t\r\n\treverseIndexBits(array, fullArrayLength);\r\n\t\t\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\t\tarray[index ] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\t\t\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\t\tarray[index ] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\t\t\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\t\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\t\tarray[index ] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\t\t\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}","//A simple events system for effectively direct links without actualy linking files or references\r\nclass EventManager { \r\n    private activeEvents:string[] = [];\r\n    private listeners:any = {};\r\n\r\n    constructor() {\r\n        this.activeEvents = [];\r\n        this.listeners = {};\r\n    }\r\n\r\n\r\n    public raise(eventType: string, eventData: any, extraEventData?: any): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        this.activeEvents.push(eventType);\r\n        for (let i: number = 0; i < this.listeners[eventType].length; i++) {\r\n            this.listeners[eventType][i](eventData,extraEventData)\r\n        }\r\n        this.activeEvents.pop();\r\n    }\r\n\r\n    public listen(eventType:string,callback:Function): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            this.listeners[eventType] = []\r\n        }\r\n        this.listeners[eventType].push(callback)\r\n    }\r\n\r\n    public unlisten(eventType: string, callback: Function): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        const lisen = this.listeners[eventType].indexOf(callback);\r\n        if (lisen != -1) {\r\n            this.listeners[eventType].splice(lisen, 1);\r\n        }\r\n    }\r\n    public unlistenAll(eventType: string): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        this.listeners[eventType]=[];\r\n    }\r\n}\r\n\r\nexport const events:EventManager = new EventManager()","/*\r\nThis file contains code to compute digital audio filter coefficients based on\r\nthe desired type, cutoff frequency, and other parameters. You can use these\r\ncoefficients to apply the filter to audio samples. It also contains code to\r\nanalyze these filters, which is useful for graphically displaying their effects.\r\n\r\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\r\nfilters, because older output samples contribute feedback to newer output\r\nsamples and thus contribute to all future samples, although typically filters\r\nare design to reduce the contribution of older samples over time.\r\n\r\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\r\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\r\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\r\nvolume of the signal at all but induce phase changes above the cutoff frequency.\r\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\r\nbut raise or lower the volume at that frequency. \r\n\r\nThe number of old samples used in the filter determines the \"order\" of the\r\nfilter. First-order filters generally have shallower slopes, and second-order\r\nfilters generally have steeper slopes and can be configured to \"resonate\",\r\nmeaning they have a louder peak at the cutoff frequency. This file contains\r\nfirst-order filters and second-order filters, meaning one or two older samples\r\nare involved, as well as the current input sample.\r\n\r\nThe class FilterCoefficients is defined lower in this file. You can use it to\r\nset up a first order filter like this:\r\n\r\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\r\n\tconst filter: FilterCoefficients = new FilterCoefficients();\r\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\r\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\r\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\r\n\tconst a: number[] = filter.a;\r\n\t// input sample coefficients are conventionally called b0, b1, etc\r\n\tconst b: number[] = filter.b;\r\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\r\n\tconst x: number[] = [0, 0, 0];\r\n\t// filter output samples, y[0] will be computed by the filter based on input\r\n\t// samples and older output samples.\r\n\tconst y: number[] = [0, 0, 0];\r\n\r\nThen to apply the first-order filter to samples inside a loop, using the current\r\ninput sample (x[0]) as well as previous input and output samples, do this:\r\n\r\n\t// Compute the next output sample y[0]:\r\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\r\n\t// Remember the input and output samples for next time:\r\n\tx[1] = x[0];\r\n\ty[1] = y[0];\r\n\r\n2nd order filters are similar, but have more parameters and require more old\r\nsamples:\r\n\r\n\t// Compute the next output sample y[0]:\r\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\r\n\t// Remember the input and output samples for next time:\r\n\tx[2] = x[1];\r\n\tx[1] = x[0];\r\n\ty[2] = y[1];\r\n\ty[1] = y[0];\r\n\r\nYou can compose multiple filters into a higher order filter, although doing so\r\nreduces the numerical stability of the filter:\r\n\r\n\tfilter3.combination(filter1, filter2);\r\n\t// filter3.order will equal: filter1.order + filter2.order\r\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\r\n\r\nThis file also contains a class called FrequencyResponse. You can use it to\r\ndetermine how much gain or attenuation a filter would apply to sounds at a\r\nspecific input frequency, as well as the phase offset:\r\n\r\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\r\n\tconst response: FrequencyResponse = new FrequencyResponse();\r\n\tresponse.analyze(filter, inputRadians);\r\n\tconst gainResponse = response.magnitude();\r\n\tconst phaseResponse = response.angle();\r\n\r\nThat's basically all you need to know to use this code, but I'll also explain\r\nhow the analysis works.\r\n\r\nA first-order digital IIR filter is ordinarily implemented in a form like this:\r\n\r\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\r\n\r\nIf we adopt standard naming conventions for audio filters, this same code would\r\ninstead look like:\r\n\r\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\r\n\ty0 = b0*x0 + b1*x1 - a1*y1;\r\n\r\nLeaving behind the world of code for a moment and entering the world of algebra,\r\nwe can rewrite this equation by moving all the output terms to the left side,\r\nand we can add a coefficient to the y0 term called a0 (which is typically\r\nnormalized to 1.0, which is why I didn't bother including it until now):\r\n\r\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\r\n\r\nThis is known as the symmetrical form of the filter, and it will help us analyze\r\nthe impact of the filter on an input audio signal. Here's a lesson that helped\r\nme understand the symmetrical form:\r\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\r\n\r\nThe end of that lesson introduces a concept called the \"delay operator\" which\r\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\r\nwhen you multiply them. For example:\r\n\r\n\tx0 * z^-1 = x1\r\n\r\nThe lesson doesn't explain how it actually works. Audio signals aren't always\r\npredictable, which means that you generally can't do math on a single sample to\r\ncompute what the previous sample was. However, some audio signals ARE\r\npredictable, such as pure sine waves. Fortunately, all audio signals can be\r\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\r\ntime, and use it to analyze the filter's impact on waves at that frequency. In\r\npractice, this tells us what the filter will do to unpredictable input samples\r\nthat contain a partial sine wave at that frequency.\r\n\r\nTechnically, you can't just use a single sine wave sample to determine the\r\nprevious sine wave sample, because each possible value is passed going upwards\r\nand downwards once per period and the direction is ambigous. This is where we\r\nneed to move into the complex number domain, where the real and imaginary\r\ncomponents can provide enough information to compute the previous position on\r\nthe input signal. So now instead of talking about sine waves, we're talking\r\nabout waves where the imaginary component is a sine wave and the real component\r\nis a cosine wave at the same frequency. Together, they trace around a unit\r\ncircle in the complex domain, and each sample is just a consistent rotation\r\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\r\nthis same rotation applied in reverse, and it can be computed as:\r\n\r\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\r\n\r\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\r\nexplaining what that means is probably beyond the scope of this documentation\r\naside from noting that a complex number on the unit circle represents a 2D\r\nrotation that you can apply via multiplication.\r\n\r\nNow we can rewrite the symmetrical form using the delay operator and algebra:\r\n\r\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\r\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\r\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\r\nThat last equation expresses the relationship between the input and output\r\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\r\npoint, the specific values of the input and output samples don't even matter!\r\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\r\n\r\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\r\nIf you plug in actual filter coefficients and express the delay operators as\r\ncomplex numbers with the appropriate trigonometry functions, the transfer\r\nfunction can be computed and produces a complex number that represents the\r\nrelationship between the input and output signals, whose magnitude represents\r\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\r\nrepresents how much phase shift is applied by the filter to signals at that\r\nfrequency.\r\n\r\n(Note that in order to compute the transfer function, you'll need to do\r\nsomething about the complex number in the denominator. It turns out you can turn\r\nthe denominator into a real number by multiplying both the numerator and\r\ndenominator by the complex conjugate of the denominator, which is just the\r\ndenominator with the imaginary component negated.)\r\n\r\nFinally, I'll list some of the links that helped me understand filters and\r\nprovided some of the algorithms I that use here.\r\n\r\nHere's where I found accurate 2nd order low-pass, high-pass, and high-shelf\r\ndigital filters:\r\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\r\n\r\nThis page is how I found a link to the cookbook article above. It claims these\r\nfilters are Butterworth filters:\r\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\r\n\r\nI found the first-order digital Butterworth filter coefficients at:\r\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\r\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\r\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\r\n\r\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\r\nhttps://www.drpetter.se/project_sfxr.html\r\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\r\nnearly identical, but when closer to the nyquist frequency the simpler filters\r\ncreate extra resonance.\r\n*/\r\n\r\nexport class FilterCoefficients {\r\n\tpublic readonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\r\n\tpublic readonly b: number[] = [1.0]; // input coefficients\r\n\tpublic order: number = 0;\r\n\t\r\n\tpublic linearGain0thOrder(linearGain: number): void {\r\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\r\n\t\tthis.b[0] = linearGain;\r\n\t\tthis.order = 0;\r\n\t}\r\n\t\r\n\tpublic lowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\r\n\t\t// First-order Butterworth low-pass filter according to:\r\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\t\t// A butterworth filter is one where the amplitude response is equal to:\r\n\t\t// 1 / √(1 + (freq / cutoffFreq)^(2 * order))\r\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst a0: number = 1.0 + g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[1] = this.b[0] = 1 / a0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic lowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\r\n\t\t// The output of this filter is nearly identical to the 1st order\r\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\r\n\t\t// then the output is the same as the input, and if the cutoff is higher\r\n\t\t// than that, then the output actually resonates at high frequencies\r\n\t\t// instead of attenuating.\r\n\t\t// I'm guessing this filter was converted from analog to digital using\r\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\r\n\t\t// method. The difference is that the bilinear transform warps\r\n\t\t// frequencies so that the lowpass response of zero at analogue ∞hz maps\r\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\r\n\t\t// preserves the frequency of the filter response but also adds the\r\n\t\t// reflected response from above the nyquist frequency.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tthis.a[1] = g - 1.0;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 0.0;\r\n\t\t/*\r\n\t\t// Alternatively:\r\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\r\n\t\tconst a0: number = g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[0] = 1.0 / a0;\r\n\t\tthis.b[1] = 0.0 / a0;\r\n\t\t*/\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic highPass1stOrderButterworth(cornerRadiansPerSample: number): void {\r\n\t\t// First-order Butterworth high-pass filter according to:\r\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst a0: number = 1.0 + g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[0] = g / a0;\r\n\t\tthis.b[1] = -g / a0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t/*\r\n\tpublic highPass1stOrderSimplified(cornerRadiansPerSample: number): void {\r\n\t\t// The output of this filter is nearly identical to the 1st order\r\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\r\n\t\t// appoaches the nyquist.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tthis.a[1] = g - 1.0;\r\n\t\tthis.b[0] = 1.0;\r\n\t\tthis.b[1] = -1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t*/\r\n\tpublic highShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\r\n\t\t// I had trouble figuring this one out because I couldn't find any\r\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\r\n\t\t// and I could narrow down a couple of them based on the desired gain at\r\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\r\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\r\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\r\n\t\t// Obviously I don't fully understand the bilinear transform yet!\r\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\r\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\r\n\t\tconst a0: number = 1.0;\r\n\t\tthis.a[1] = g / a0;\r\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\r\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\r\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\t/*\r\n\t// I haven't found a practical use for this version of the all pass filter.\r\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\r\n\tpublic allPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\r\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = -g;\r\n\t\tthis.b[1] = -1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t*/\r\n\t\r\n\tpublic allPass1stOrderFractionalDelay(delay: number) {\r\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\r\n\t\t// differently and for a different purpose! Useful for interpolating\r\n\t\t// between samples in a delay line.\r\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic lowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\t// This is Butterworth if peakLinearGain=1/√2 according to:\r\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\r\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\r\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\r\n\t\t// although it gets distorted near the nyquist.\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\r\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst a0: number = 1.0 + alpha;\r\n\t\tthis.a[1] = -2.0*cos / a0;\r\n\t\tthis.a[2] = (1 - alpha) / a0;\r\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\r\n\t\tthis.b[1] = (1 - cos) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t\r\n\tpublic lowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\t// This filter is adapted from the one in the SFXR source code:\r\n\t\t// https://www.drpetter.se/project_sfxr.html\r\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\r\n\t\t// above, except it resonates too much when the cutoff appoaches the\r\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\r\n\t\t// nyquist/3, then the output is the same as the input.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\r\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\r\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\r\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\r\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\r\n\t\tthis.b[0] = g*g;\r\n\t\tthis.b[1] = 0;\r\n\t\tthis.b[2] = 0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t\r\n\tpublic highPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\r\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst a0: number = 1.0 + alpha;\r\n\t\tthis.a[1] = -2.0*cos / a0;\r\n\t\tthis.a[2] = (1.0 - alpha) / a0;\r\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\r\n\t\tthis.b[1] = -(1.0 + cos) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t/*\r\n\tpublic highPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\r\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\r\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\r\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\r\n\t\tthis.b[0] = 1.0;\r\n\t\tthis.b[1] = -2.0;\r\n\t\tthis.b[2] = 1.0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t*/\r\n\tpublic highShelf2ndOrder(cornerRadiansPerSample: number, shelfLinearGain: number, slope: number): void {\r\n\t\tconst A: number = Math.sqrt(shelfLinearGain);\r\n\t\tconst c: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst Aplus: number = A + 1.0;\r\n\t\tconst Aminus: number = A - 1.0;\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\r\n\t\tconst sqrtA2Alpha: number = 2.0 * Math.sqrt(A) * alpha;\r\n\t\tconst a0: number =   (Aplus  - Aminus * c + sqrtA2Alpha);\r\n\t\tthis.a[1] =  2 *     (Aminus - Aplus  * c              ) / a0;\r\n\t\tthis.a[2] =          (Aplus  - Aminus * c - sqrtA2Alpha) / a0;\r\n\t\tthis.b[0] =      A * (Aplus  + Aminus * c + sqrtA2Alpha) / a0;\r\n\t\tthis.b[1] = -2 * A * (Aminus + Aplus  * c              ) / a0;\r\n\t\tthis.b[2] =      A * (Aplus  + Aminus * c - sqrtA2Alpha) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\r\n\tpublic peak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\r\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\r\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\r\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\r\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\r\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\r\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\r\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\r\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\r\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t/*\r\n\t// Create a higher order filter by combining two lower order filters.\r\n\t// However, making high order filters in this manner results in instability.\r\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\r\n\tpublic combination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\r\n\t\tthis.order = filter1.order + filter2.order;\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = 0.0;\r\n\t\t\tthis.b[i] = 0.0;\r\n\t\t}\r\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\r\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\r\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\r\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic scaledDifference(other: FilterCoefficients, scale: number): void {\r\n\t\tif (other.order != this.order) throw new Error();\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\r\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic copy(other: FilterCoefficients): void {\r\n\t\tthis.order = other.order;\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = other.a[i];\r\n\t\t\tthis.b[i] = other.b[i];\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\nexport class FrequencyResponse {\r\n\tpublic real: number = 0.0;\r\n\tpublic imag: number = 0.0;\r\n\tpublic denom: number = 1.0;\r\n\t\r\n\tpublic analyze(filter: FilterCoefficients, radiansPerSample: number): void {\r\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\r\n\t}\r\n\t\r\n\tpublic analyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\r\n\t\tconst a: number[] = filter.a;\r\n\t\tconst b: number[] = filter.b;\r\n\t\tconst realZ1: number = real;\r\n\t\tconst imagZ1: number = -imag;\r\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\r\n\t\tlet imagNum: number = b[1] * imagZ1;\r\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\r\n\t\tlet imagDenom: number = a[1] * imagZ1;\r\n\t\tlet realZ: number = realZ1;\r\n\t\tlet imagZ: number = imagZ1;\r\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\r\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\r\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\r\n\t\t\trealZ = realTemp;\r\n\t\t\timagZ = imagTemp;\r\n\t\t\trealNum += b[i] * realZ;\r\n\t\t\timagNum += b[i] * imagZ;\r\n\t\t\trealDenom += a[i] * realZ;\r\n\t\t\timagDenom += a[i] * imagZ;\r\n\t\t}\r\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\r\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\r\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\r\n\t}\r\n\t\r\n\tpublic magnitude(): number {\r\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\r\n\t}\r\n\t\r\n\tpublic angle(): number {\r\n\t\treturn Math.atan2(this.imag, this.real);\r\n\t}\r\n}\r\n\r\nexport class DynamicBiquadFilter {\r\n\tpublic a1: number = 0.0;\r\n\tpublic a2: number = 0.0;\r\n\tpublic b0: number = 1.0;\r\n\tpublic b1: number = 0.0;\r\n\tpublic b2: number = 0.0;\r\n\tpublic a1Delta: number = 0.0;\r\n\tpublic a2Delta: number = 0.0;\r\n\tpublic b0Delta: number = 0.0;\r\n\tpublic b1Delta: number = 0.0;\r\n\tpublic b2Delta: number = 0.0;\r\n\tpublic output1: number = 0.0;\r\n\tpublic output2: number = 0.0;\r\n\t\r\n\t// Some filter types are more stable when interpolating between coefficients\r\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\r\n\t// for filter types where the \"b\" coefficients might change sign!\r\n\tpublic useMultiplicativeInputCoefficients: boolean = false;\r\n\t\r\n\tpublic resetOutput(): void {\r\n\t\tthis.output1 = 0.0;\r\n\t\tthis.output2 = 0.0;\r\n\t}\r\n\t\r\n\tpublic loadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\r\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\r\n\t\tthis.a1 = start.a[1];\r\n\t\tthis.a2 = start.a[2];\r\n\t\tthis.b0 = start.b[0];\r\n\t\tthis.b1 = start.b[1];\r\n\t\tthis.b2 = start.b[2];\r\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\r\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\r\n\t\tif (useMultiplicativeInputCoefficients) {\r\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\r\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\r\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\r\n\t\t} else {\r\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\r\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\r\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\r\n\t\t}\r\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\r\n\t}\r\n}\r\n\r\n// Filters are typically designed as analog filters first, then converted to\r\n// digital filters using one of two methods: the \"matched z-transform\" or the\r\n// \"bilinear transform\". The \"bilinear transform\" does a better job of\r\n// preserving the magnitudes of the frequency response, but warps the frequency\r\n// range such that the nyquist frequency of the digital filter (π) maps to the\r\n// infinity frequency of the analog filter. You can use the below functions to\r\n// manually perform this warping in either direction.\r\nexport function warpNyquistToInfinity(radians: number): number {\r\n\treturn 2.0 * Math.tan(radians * 0.5);\r\n}\r\nexport function warpInfinityToNyquist(radians: number): number {\r\n\treturn 2.0 * Math.atan(radians * 0.5);\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { startLoadingSample, sampleLoadingState, SampleLoadingState, sampleLoadEvents, SampleLoadedEvent, SampleLoadingStatus, loadBuiltInSamples, Dictionary, DictionaryArray, toNameMap, FilterType, SustainType, EnvelopeType, InstrumentType, EffectType, EnvelopeComputeIndex, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, OperatorWave } from \"./SynthConfig\";\r\nimport { Preset, EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\nimport { events } from \"../global/Events\";\r\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter, warpInfinityToNyquist } from \"./filtering\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        AudioContext: any;\r\n        webkitAudioContext: any;\r\n    }\r\n}\r\n\r\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\r\n\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nexport function clamp(min: number, max: number, val: number): number {\r\n    max = max - 1;\r\n    if (val <= max) {\r\n        if (val >= min) return val;\r\n        else return min;\r\n    } else {\r\n        return max;\r\n    }\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n    if (min <= val && val <= max) return val;\r\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport function parseFloatWithDefault<T>(s: string, defaultValue: T): number | T {\r\n    let result: number | T = parseFloat(s);\r\n    if (Number.isNaN(result)) result = defaultValue;\r\n    return result;\r\n}\r\n\r\nexport function parseIntWithDefault<T>(s: string, defaultValue: T): number | T {\r\n    let result: number | T = parseInt(s);\r\n    if (Number.isNaN(result)) result = defaultValue;\r\n    return result;\r\n}\r\n\r\nfunction encode32BitNumber(buffer: number[], x: number): void {\r\n    // 0b11_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\r\n    //      111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\r\n    //             111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\r\n    //                    111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\r\n    //                           111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\r\n    //                                  111111\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\r\n}\r\n\r\n// @TODO: This is error-prone, because the caller has to remember to increment\r\n// charIndex by 6 afterwards.\r\nfunction decode32BitNumber(compressed: string, charIndex: number): number {\r\n    let x: number = 0;\r\n    // 0b11_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\r\n    //      111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\r\n    //             111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\r\n    //                    111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\r\n    //                           111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\r\n    //                                  111111\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\r\n    return x;\r\n}\r\n\r\nfunction encodeUnisonSettings(buffer: number[], v: number, s: number, o: number, e: number, i: number): void {\r\n    buffer.push(base64IntToCharCode[v]);\r\n    \r\n    // logically this should be done with bitshifts... but I don't know how to do that, so\r\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\r\n    let cleanS = Math.round(Math.abs(s) * 1000);\r\n    let cleanSDivided = Math.floor(cleanS / 63);\r\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\r\n\r\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\r\n    let cleanO = Math.round(Math.abs(o) * 1000);\r\n    let cleanODivided = Math.floor(cleanO / 63);\r\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\r\n    \r\n    buffer.push(base64IntToCharCode[Number((e > 0))]);\r\n    let cleanE = Math.round(Math.abs(e) * 1000);\r\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\r\n\r\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\r\n    let cleanI = Math.round(Math.abs(i) * 1000);\r\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\r\n}\r\n\r\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex: number): [number, number] {\r\n    let key: number = clamp(0, Config.keys.length, rawKeyIndex);\r\n    let octave: number = 0;\r\n    // This conversion code depends on C through B being\r\n    // available as keys, of course.\r\n    if (rawKeyIndex === 12) {\r\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 }\r\n        key = 0;\r\n        octave = 1;\r\n    } else if (rawKeyIndex === 13) {\r\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 }\r\n        key = 6;\r\n        octave = -1;\r\n    } else if (rawKeyIndex === 14) {\r\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 }\r\n        key = 0;\r\n        octave = -1;\r\n    } else if (rawKeyIndex === 15) {\r\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 }\r\n        key = 5;\r\n        octave = -1;\r\n    }\r\n    return [key, octave];\r\n}\r\n\r\nconst enum CharCode {\r\n    SPACE = 32,\r\n    HASH = 35,\r\n    PERCENT = 37,\r\n    AMPERSAND = 38,\r\n    PLUS = 43,\r\n    DASH = 45,\r\n    DOT = 46,\r\n    NUM_0 = 48,\r\n    NUM_1 = 49,\r\n    NUM_2 = 50,\r\n    NUM_3 = 51,\r\n    NUM_4 = 52,\r\n    NUM_5 = 53,\r\n    NUM_6 = 54,\r\n    NUM_7 = 55,\r\n    NUM_8 = 56,\r\n    NUM_9 = 57,\r\n    EQUALS = 61,\r\n    A = 65,\r\n    B = 66,\r\n    C = 67,\r\n    D = 68,\r\n    E = 69,\r\n    F = 70,\r\n    G = 71,\r\n    H = 72,\r\n    I = 73,\r\n    J = 74,\r\n    K = 75,\r\n    L = 76,\r\n    M = 77,\r\n    N = 78,\r\n    O = 79,\r\n    P = 80,\r\n    Q = 81,\r\n    R = 82,\r\n    S = 83,\r\n    T = 84,\r\n    U = 85,\r\n    V = 86,\r\n    W = 87,\r\n    X = 88,\r\n    Y = 89,\r\n    Z = 90,\r\n    UNDERSCORE = 95,\r\n    a = 97,\r\n    b = 98,\r\n    c = 99,\r\n    d = 100,\r\n    e = 101,\r\n    f = 102,\r\n    g = 103,\r\n    h = 104,\r\n    i = 105,\r\n    j = 106,\r\n    k = 107,\r\n    l = 108,\r\n    m = 109,\r\n    n = 110,\r\n    o = 111,\r\n    p = 112,\r\n    q = 113,\r\n    r = 114,\r\n    s = 115,\r\n    t = 116,\r\n    u = 117,\r\n    v = 118,\r\n    w = 119,\r\n    x = 120,\r\n    y = 121,\r\n    z = 122,\r\n    LEFT_CURLY_BRACE = 123,\r\n    RIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n    beatCount           = CharCode.a, // added in BeepBox URL version 2\r\n\tbars                = CharCode.b, // added in BeepBox URL version 2\r\n\tvibrato             = CharCode.c, // added in BeepBox URL version 2, DEPRECATED\r\n\tfadeInOut           = CharCode.d, // added in BeepBox URL version 3 for transition, switched to fadeInOut in 9\r\n\tloopEnd             = CharCode.e, // added in BeepBox URL version 2\r\n\teqFilter            = CharCode.f, // added in BeepBox URL version 3\r\n\tbarCount            = CharCode.g, // added in BeepBox URL version 3\r\n\tunison              = CharCode.h, // added in BeepBox URL version 2\r\n\tinstrumentCount     = CharCode.i, // added in BeepBox URL version 3\r\n\tpatternCount        = CharCode.j, // added in BeepBox URL version 3\r\n\tkey                 = CharCode.k, // added in BeepBox URL version 2\r\n\tloopStart           = CharCode.l, // added in BeepBox URL version 2\r\n\treverb              = CharCode.m, // added in BeepBox URL version 5, DEPRECATED\r\n\tchannelCount        = CharCode.n, // added in BeepBox URL version 6\r\n\tchannelOctave       = CharCode.o, // added in BeepBox URL version 3\r\n\tpatterns            = CharCode.p, // added in BeepBox URL version 2\r\n\teffects             = CharCode.q, // added in BeepBox URL version 7\r\n\trhythm              = CharCode.r, // added in BeepBox URL version 2\r\n\tscale               = CharCode.s, // added in BeepBox URL version 2\r\n\ttempo               = CharCode.t, // added in BeepBox URL version 2\r\n\tpreset              = CharCode.u, // added in BeepBox URL version 7\r\n\tvolume              = CharCode.v, // added in BeepBox URL version 2\r\n\twave                = CharCode.w, // added in BeepBox URL version 2\r\n\tsupersaw            = CharCode.x, // added in BeepBox URL version 9 ([UB] was used for chip wave but is now DEPRECATED)\r\n\tfilterResonance     = CharCode.y, // added in BeepBox URL version 7, DEPRECATED, [UB] repurposed for chip wave loop controls\r\n\tdrumsetEnvelopes    = CharCode.z, // added in BeepBox URL version 7 for filter envelopes, still used for drumset envelopes\r\n\talgorithm           = CharCode.A, // added in BeepBox URL version 6\r\n\tfeedbackAmplitude   = CharCode.B, // added in BeepBox URL version 6\r\n\tchord               = CharCode.C, // added in BeepBox URL version 7, DEPRECATED\r\n\tdetune              = CharCode.D, // added in JummBox URL version 3(?) for detune, DEPRECATED\r\n\tenvelopes           = CharCode.E, // added in BeepBox URL version 6 for FM operator envelopes, repurposed in 9 for general envelopes.\r\n\tfeedbackType        = CharCode.F, // added in BeepBox URL version 6\r\n\tarpeggioSpeed       = CharCode.G, // added in JummBox URL version 3 for arpeggioSpeed, DEPRECATED\r\n\tharmonics           = CharCode.H, // added in BeepBox URL version 7\r\n\tstringSustain       = CharCode.I, // added in BeepBox URL version 9\r\n//\t                    = CharCode.J,\r\n//\t                    = CharCode.K,\r\n\tpan                 = CharCode.L, // added between 8 and 9, DEPRECATED\r\n\tcustomChipWave      = CharCode.M, // added in JummBox URL version 1(?) for customChipWave\r\n\tsongTitle           = CharCode.N, // added in JummBox URL version 1(?) for songTitle\r\n\tlimiterSettings     = CharCode.O, // added in JummBox URL version 3(?) for limiterSettings\r\n\toperatorAmplitudes  = CharCode.P, // added in BeepBox URL version 6\r\n\toperatorFrequencies = CharCode.Q, // added in BeepBox URL version 6\r\n\toperatorWaves       = CharCode.R, // added in JummBox URL version 4 for operatorWaves\r\n\tspectrum            = CharCode.S, // added in BeepBox URL version 7\r\n\tstartInstrument     = CharCode.T, // added in BeepBox URL version 6\r\n\tchannelNames        = CharCode.U, // added in JummBox URL version 4(?) for channelNames\r\n\tfeedbackEnvelope    = CharCode.V, // added in BeepBox URL version 6, DEPRECATED\r\n\tpulseWidth          = CharCode.W, // added in BeepBox URL version 7\r\n\taliases             = CharCode.X, // added in JummBox URL version 4 for aliases, DEPRECATED, [UB] repurposed for PWM decimal offset (DEPRECATED as well)\r\n//\t                    = CharCode.Y,\r\n//\t                    = CharCode.Z,\r\n//\t                    = CharCode.NUM_0,\r\n//\t                    = CharCode.NUM_1,\r\n//\t                    = CharCode.NUM_2,\r\n//\t                    = CharCode.NUM_3,\r\n//\t                    = CharCode.NUM_4,\r\n//\t                    = CharCode.NUM_5,\r\n//\t                    = CharCode.NUM_6,\r\n//\t                    = CharCode.NUM_7,\r\n//\t                    = CharCode.NUM_8,\r\n//\t                    = CharCode.NUM_9,\r\n//\t                    = CharCode.DASH,\r\n//\t                    = CharCode.UNDERSCORE,\r\n\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n    private _bits: number[] = [];\r\n    private _readIndex: number = 0;\r\n\r\n    constructor(source: string, startIndex: number, stopIndex: number) {\r\n        for (let i: number = startIndex; i < stopIndex; i++) {\r\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n            this._bits.push((value >> 5) & 0x1);\r\n            this._bits.push((value >> 4) & 0x1);\r\n            this._bits.push((value >> 3) & 0x1);\r\n            this._bits.push((value >> 2) & 0x1);\r\n            this._bits.push((value >> 1) & 0x1);\r\n            this._bits.push(value & 0x1);\r\n        }\r\n    }\r\n\r\n    public read(bitCount: number): number {\r\n        let result: number = 0;\r\n        while (bitCount > 0) {\r\n            result = result << 1;\r\n            result += this._bits[this._readIndex++];\r\n            bitCount--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readLongTail(minValue: number, minBits: number): number {\r\n        let result: number = minValue;\r\n        let numBits: number = minBits;\r\n        while (this._bits[this._readIndex++]) {\r\n            result += 1 << numBits;\r\n            numBits++;\r\n        }\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            if (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readPartDuration(): number {\r\n        return this.readLongTail(1, 3);\r\n    }\r\n\r\n    public readLegacyPartDuration(): number {\r\n        return this.readLongTail(1, 2);\r\n    }\r\n\r\n    public readPinCount(): number {\r\n        return this.readLongTail(1, 0);\r\n    }\r\n\r\n    public readPitchInterval(): number {\r\n        if (this.read(1)) {\r\n            return -this.readLongTail(1, 3);\r\n        } else {\r\n            return this.readLongTail(1, 3);\r\n        }\r\n    }\r\n}\r\n\r\nclass BitFieldWriter {\r\n    private _index: number = 0;\r\n    private _bits: number[] = [];\r\n\r\n    public clear() {\r\n        this._index = 0;\r\n    }\r\n\r\n    public write(bitCount: number, value: number): void {\r\n        bitCount--;\r\n        while (bitCount >= 0) {\r\n            this._bits[this._index++] = (value >>> bitCount) & 1;\r\n            bitCount--;\r\n        }\r\n    }\r\n\r\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n        if (value < minValue) throw new Error(\"value out of bounds\");\r\n        value -= minValue;\r\n        let numBits: number = minBits;\r\n        while (value >= (1 << numBits)) {\r\n            this._bits[this._index++] = 1;\r\n            value -= 1 << numBits;\r\n            numBits++;\r\n        }\r\n        this._bits[this._index++] = 0;\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            this._bits[this._index++] = (value >>> numBits) & 1;\r\n        }\r\n    }\r\n\r\n    public writePartDuration(value: number): void {\r\n        this.writeLongTail(1, 3, value);\r\n    }\r\n\r\n    public writePinCount(value: number): void {\r\n        this.writeLongTail(1, 0, value);\r\n    }\r\n\r\n    public writePitchInterval(value: number): void {\r\n        if (value < 0) {\r\n            this.write(1, 1); // sign\r\n            this.writeLongTail(1, 3, -value);\r\n        } else {\r\n            this.write(1, 0); // sign\r\n            this.writeLongTail(1, 3, value);\r\n        }\r\n    }\r\n\r\n    public concat(other: BitFieldWriter): void {\r\n        for (let i: number = 0; i < other._index; i++) {\r\n            this._bits[this._index++] = other._bits[i];\r\n        }\r\n    }\r\n\r\n    public encodeBase64(buffer: number[]): number[] {\r\n\r\n        for (let i: number = 0; i < this._index; i += 6) {\r\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n            buffer.push(base64IntToCharCode[value]);\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    public lengthBase64(): number {\r\n        return Math.ceil(this._index / 6);\r\n    }\r\n}\r\n\r\nexport interface NotePin {\r\n    interval: number;\r\n    time: number;\r\n    size: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\r\n    return { interval: interval, time: time, size: size };\r\n}\r\n\r\nexport class Note {\r\n    public pitches: number[];\r\n    public pins: NotePin[];\r\n    public start: number;\r\n    public end: number;\r\n    public continuesLastPattern: boolean;\r\n\r\n    public constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false) {\r\n        this.pitches = [pitch];\r\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\r\n        this.start = start;\r\n        this.end = end;\r\n        this.continuesLastPattern = false;\r\n    }\r\n\r\n    public pickMainInterval(): number {\r\n        let longestFlatIntervalDuration: number = 0;\r\n        let mainInterval: number = 0;\r\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n            const pinA: NotePin = this.pins[pinIndex - 1];\r\n            const pinB: NotePin = this.pins[pinIndex];\r\n            if (pinA.interval == pinB.interval) {\r\n                const duration: number = pinB.time - pinA.time;\r\n                if (longestFlatIntervalDuration < duration) {\r\n                    longestFlatIntervalDuration = duration;\r\n                    mainInterval = pinA.interval;\r\n                }\r\n            }\r\n        }\r\n        if (longestFlatIntervalDuration == 0) {\r\n            let loudestSize: number = 0;\r\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n                const pin: NotePin = this.pins[pinIndex];\r\n                if (loudestSize < pin.size) {\r\n                    loudestSize = pin.size;\r\n                    mainInterval = pin.interval;\r\n                }\r\n            }\r\n        }\r\n        return mainInterval;\r\n    }\r\n\r\n    public clone(): Note {\r\n        const newNote: Note = new Note(-1, this.start, this.end, 3);\r\n        newNote.pitches = this.pitches.concat();\r\n        newNote.pins = [];\r\n        for (const pin of this.pins) {\r\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\r\n        }\r\n        newNote.continuesLastPattern = this.continuesLastPattern;\r\n        return newNote;\r\n    }\r\n\r\n    public getEndPinIndex(part: number): number {\r\n        let endPinIndex: number;\r\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\r\n            if (this.pins[endPinIndex].time + this.start > part) break;\r\n        }\r\n        return endPinIndex;\r\n    }\r\n}\r\n\r\nexport class Pattern {\r\n    public notes: Note[] = [];\r\n    public readonly instruments: number[] = [0];\r\n\r\n    public cloneNotes(): Note[] {\r\n        const result: Note[] = [];\r\n        for (const note of this.notes) {\r\n            result.push(note.clone());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.notes.length = 0;\r\n        this.instruments[0] = 0;\r\n        this.instruments.length = 1;\r\n    }\r\n\r\n    public toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\r\n        const noteArray: Object[] = [];\r\n        for (const note of this.notes) {\r\n            // Only one ins per pattern is enforced in mod channels.\r\n            let instrument: Instrument = channel.instruments[this.instruments[0]];\r\n            let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\r\n            let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\r\n            const pointArray: Object[] = [];\r\n            for (const pin of note.pins) {\r\n                let useVol: number = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\r\n                pointArray.push({\r\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n                    \"pitchBend\": pin.interval,\r\n                    \"volume\": useVol,\r\n                    \"forMod\": isModChannel,\r\n                });\r\n            }\r\n\r\n            const noteObject: any = {\r\n                \"pitches\": note.pitches,\r\n                \"points\": pointArray,\r\n            };\r\n            if (note.start == 0) {\r\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\r\n            }\r\n            noteArray.push(noteObject);\r\n        }\r\n\r\n        const patternObject: any = { \"notes\": noteArray };\r\n        if (song.patternInstruments) {\r\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\r\n        }\r\n        return patternObject;\r\n    }\r\n\r\n    public fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        if (song.patternInstruments) {\r\n            if (Array.isArray(patternObject[\"instruments\"])) {\r\n                const instruments: any[] = patternObject[\"instruments\"];\r\n                const instrumentCount: number = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\r\n                for (let j: number = 0; j < instrumentCount; j++) {\r\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\r\n                }\r\n                this.instruments.length = instrumentCount;\r\n            } else {\r\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\r\n                this.instruments.length = 1;\r\n            }\r\n        }\r\n\r\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n            const maxNoteCount: number = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\r\n\r\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\r\n            //let tickClock: number = 0;\r\n            for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n                if (j >= maxNoteCount) break;\r\n\r\n                const noteObject = patternObject[\"notes\"][j];\r\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n                    continue;\r\n                }\r\n\r\n                const note: Note = new Note(0, 0, 0, 0);\r\n                note.pitches = [];\r\n                note.pins = [];\r\n\r\n                for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n                    const pitch: number = noteObject[\"pitches\"][k] | 0;\r\n                    if (note.pitches.indexOf(pitch) != -1) continue;\r\n                    note.pitches.push(pitch);\r\n                    if (note.pitches.length >= Config.maxChordSize) break;\r\n                }\r\n                if (note.pitches.length < 1) continue;\r\n\r\n                //let noteClock: number = tickClock;\r\n                let startInterval: number = 0;\r\n                for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n                    const pointObject: any = noteObject[\"points\"][k];\r\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n                    const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n                    const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n                    let instrument: Instrument = channel.instruments[this.instruments[0]];\r\n                    let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\r\n\r\n                    // Only one instrument per pattern allowed in mod channels.\r\n                    let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\r\n\r\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n                    let size: number;\r\n                    if (pointObject[\"volume\"] == undefined) {\r\n                        size = volumeCap;\r\n                    } else if (pointObject[\"forMod\"] == undefined) {\r\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                    }\r\n                    else {\r\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                    }\r\n\r\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\r\n                    if (note.pins.length == 0) {\r\n                        //if (time < noteClock) continue;\r\n                        note.start = time;\r\n                        startInterval = interval;\r\n                    } else {\r\n                        //if (time <= noteClock) continue;\r\n                    }\r\n                    //noteClock = time;\r\n\r\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\r\n                }\r\n                if (note.pins.length < 2) continue;\r\n\r\n                note.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n                const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n                let lowestPitch: number = maxPitch;\r\n                let highestPitch: number = 0;\r\n                for (let k: number = 0; k < note.pitches.length; k++) {\r\n                    note.pitches[k] += startInterval;\r\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n                        note.pitches.splice(k, 1);\r\n                        k--;\r\n                    }\r\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n                }\r\n                if (note.pitches.length < 1) continue;\r\n\r\n                for (let k: number = 0; k < note.pins.length; k++) {\r\n                    const pin: NotePin = note.pins[k];\r\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n                    if (k >= 2) {\r\n                        if (pin.interval == note.pins[k - 1].interval &&\r\n                            pin.interval == note.pins[k - 2].interval &&\r\n                            pin.size == note.pins[k - 1].size &&\r\n                            pin.size == note.pins[k - 2].size) {\r\n                            note.pins.splice(k - 1, 1);\r\n                            k--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (note.start == 0) {\r\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\r\n                } else {\r\n                    note.continuesLastPattern = false;\r\n                }\r\n\r\n                this.notes.push(note);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Operator {\r\n    public frequency: number = 4;\r\n    public amplitude: number = 0;\r\n    public waveform: number = 0;\r\n    public pulseWidth: number = 0.5;\r\n\r\n    constructor(index: number) {\r\n        this.reset(index);\r\n    }\r\n\r\n    public reset(index: number): void {\r\n        this.frequency = 4; //defualt to 1x\r\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n        this.waveform = 0;\r\n        this.pulseWidth = 5;\r\n    }\r\n\r\n    public copy(other: Operator): void {\r\n        this.frequency = other.frequency;\r\n        this.amplitude = other.amplitude;\r\n        this.waveform = other.waveform;\r\n        this.pulseWidth = other.pulseWidth;\r\n    }\r\n}\r\n\r\nexport class CustomAlgorithm {\r\n    public name: string = \"\";\r\n    public carrierCount: number = 0;\r\n    public modulatedBy: number[][] = [[], [], [], [], [], []];\r\n    public associatedCarrier: number[] = [];\r\n\r\n    constructor(){\r\n        this.fromPreset(1);\r\n    }\r\n\r\n    public set(carriers: number, modulation: number[][]) {\r\n        this.reset();\r\n        this.carrierCount = carriers;\r\n        for (let i = 0; i < this.modulatedBy.length; i++) {\r\n            this.modulatedBy[i] = modulation[i];\r\n            if (i < carriers) {\r\n                this.associatedCarrier[i] = i+1;\r\n            }\r\n            this.name += (i+1);\r\n            for (let j = 0; j < modulation[i].length;j++) {\r\n                this.name += modulation[i][j];\r\n                if (modulation[i][j] > carriers-1) {\r\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\r\n                }\r\n                this.name += \",\";\r\n            }\r\n            if (i < carriers) {\r\n                this.name += \"|\";\r\n            } else {\r\n                this.name += \".\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.name = \"\"\r\n        this.carrierCount = 1;\r\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\r\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\r\n    }\r\n\r\n    public copy(other: CustomAlgorithm): void {\r\n        this.name = other.name;\r\n        this.carrierCount = other.carrierCount;\r\n        this.modulatedBy = other.modulatedBy;\r\n        this.associatedCarrier = other.associatedCarrier;\r\n    }\r\n\r\n    public fromPreset(other: number): void {\r\n        this.reset();\r\n        let preset = Config.algorithms6Op[other]\r\n        this.name = preset.name;\r\n        this.carrierCount = preset.carrierCount;\r\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\r\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\r\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\r\n        }\r\n    }\r\n}\r\n\r\nexport class CustomFeedBack { //feels redunant\r\n    public name: string = \"\";\r\n    public indices: number[][] = [[], [], [], [], [], []];\r\n\r\n    constructor() {\r\n        this.fromPreset(1);\r\n    }\r\n\r\n    public set(inIndices: number[][]) {\r\n        this.reset();\r\n        for (let i = 0; i < this.indices.length; i++) {\r\n            this.indices[i] = inIndices[i];\r\n            for (let j = 0; j < inIndices[i].length; j++) {\r\n                this.name += inIndices[i][j];\r\n                this.name += \",\";\r\n            }\r\n            this.name += \".\";\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.reset;\r\n        this.name = \"\";\r\n        this.indices = [[1], [], [], [], [], []];\r\n    }\r\n\r\n    public copy(other: CustomFeedBack): void {\r\n        this.name = other.name;\r\n        this.indices = other.indices;\r\n    }\r\n\r\n    public fromPreset(other: number): void {\r\n        this.reset();\r\n        let preset = Config.feedbacks6Op[other]\r\n        for (var i = 0; i < preset.indices.length; i++) {\r\n            this.indices[i] = Array.from(preset.indices[i]);\r\n            for (let j = 0; j < preset.indices[i].length; j++) {\r\n                this.name += preset.indices[i][j];\r\n                this.name += \",\";\r\n            }\r\n            this.name += \".\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpectrumWave {\r\n    public spectrum: number[] = [];\r\n    public hash: number = -1;\r\n\r\n    constructor(isNoiseChannel: boolean) {\r\n        this.reset(isNoiseChannel);\r\n    }\r\n\r\n    public reset(isNoiseChannel: boolean): void {\r\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n            if (isNoiseChannel) {\r\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n            } else {\r\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n            }\r\n        }\r\n        this.markCustomWaveDirty();\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\r\n        let hash: number = 0;\r\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\r\n        this.hash = hash;\r\n    }\r\n}\r\n\r\nclass SpectrumWaveState {\r\n    public wave: Float32Array | null = null;\r\n    private _hash: number = -1;\r\n\r\n    public getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\r\n        if (this._hash == settings.hash) return this.wave!;\r\n        this._hash = settings.hash;\r\n\r\n        const waveLength: number = Config.spectrumNoiseLength;\r\n        if (this.wave == null || this.wave.length != waveLength + 1) {\r\n            this.wave = new Float32Array(waveLength + 1);\r\n        }\r\n        const wave: Float32Array = this.wave;\r\n\r\n        for (let i: number = 0; i < waveLength; i++) {\r\n            wave[i] = 0;\r\n        }\r\n\r\n        const highestOctave: number = 14;\r\n        const falloffRatio: number = 0.25;\r\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\r\n        function controlPointToOctave(point: number): number {\r\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n        }\r\n\r\n        let combinedAmplitude: number = 1;\r\n        for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n            const value1: number = (i <= 0) ? 0 : settings.spectrum[i - 1];\r\n            const value2: number = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\r\n            const octave1: number = controlPointToOctave(i - 1);\r\n            let octave2: number = controlPointToOctave(i);\r\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n            if (value1 == 0 && value2 == 0) continue;\r\n\r\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n        }\r\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n        }\r\n\r\n        inverseRealFourierTransform(wave, waveLength);\r\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\r\n        wave[waveLength] = wave[0];\r\n\r\n        return wave;\r\n    }\r\n}\r\n\r\nexport class HarmonicsWave {\r\n    public harmonics: number[] = [];\r\n    public hash: number = -1;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n            this.harmonics[i] = 0;\r\n        }\r\n        this.harmonics[0] = Config.harmonicsMax;\r\n        this.harmonics[3] = Config.harmonicsMax;\r\n        this.harmonics[6] = Config.harmonicsMax;\r\n        this.markCustomWaveDirty();\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\r\n        let hash: number = 0;\r\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\r\n        this.hash = hash;\r\n    }\r\n}\r\n\r\nclass HarmonicsWaveState {\r\n    public wave: Float32Array | null = null;\r\n    private _hash: number = -1;\r\n    private _generatedForType: InstrumentType;\r\n\r\n    public getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\r\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\r\n        this._hash = settings.hash;\r\n        this._generatedForType = instrumentType;\r\n\r\n        const harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\r\n\r\n        const waveLength: number = Config.harmonicsWavelength;\r\n        const retroWave: Float32Array = getDrumWave(0, null, null);\r\n\r\n        if (this.wave == null || this.wave.length != waveLength + 1) {\r\n            this.wave = new Float32Array(waveLength + 1);\r\n        }\r\n        const wave: Float32Array = this.wave;\r\n\r\n        for (let i: number = 0; i < waveLength; i++) {\r\n            wave[i] = 0;\r\n        }\r\n\r\n        const overallSlope: number = -0.25;\r\n        let combinedControlPointAmplitude: number = 1;\r\n\r\n        for (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\r\n            const harmonicFreq: number = harmonicIndex + 1;\r\n            let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\r\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\r\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\r\n            }\r\n            const normalizedValue: number = controlValue / Config.harmonicsMax;\r\n            let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n            if (harmonicIndex < Config.harmonicsControlPoints) {\r\n                combinedControlPointAmplitude += amplitude;\r\n            }\r\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n            // retro wave (effectively random) to avoid egregiously tall spikes.\r\n            amplitude *= retroWave[harmonicIndex + 589];\r\n\r\n            wave[waveLength - harmonicFreq] = amplitude;\r\n        }\r\n\r\n        inverseRealFourierTransform(wave, waveLength);\r\n\r\n        // Limit the maximum wave amplitude.\r\n        const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n        for (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\r\n\r\n        performIntegralOld(wave);\r\n\r\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n        wave[waveLength] = wave[0];\r\n\r\n        return wave;\r\n    }\r\n}\r\n\r\nexport class FilterControlPoint {\r\n    public freq: number = 0;\r\n    public gain: number = Config.filterGainCenter;\r\n    public type: FilterType = FilterType.peak;\r\n\r\n    public set(freqSetting: number, gainSetting: number): void {\r\n        this.freq = freqSetting;\r\n        this.gain = gainSetting;\r\n    }\r\n\r\n    public getHz(): number {\r\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\r\n    }\r\n\r\n    public static getHzFromSettingValue(value: number): number {\r\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\r\n    }\r\n    public static getSettingValueFromHz(hz: number): number {\r\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\r\n    }\r\n    public static getRoundedSettingValueFromHz(hz: number): number {\r\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\r\n    }\r\n\r\n    public getLinearGain(peakMult: number = 1.0): number {\r\n        const power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\r\n        const neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\r\n        const interpolatedPower: number = neutral + (power - neutral) * peakMult;\r\n        return Math.pow(2.0, interpolatedPower);\r\n    }\r\n    public static getRoundedSettingValueFromLinearGain(linearGain: number): number {\r\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\r\n    }\r\n\r\n    public toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\r\n        const cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\r\n        const linearGain: number = this.getLinearGain(peakMult);\r\n        switch (this.type) {\r\n            case FilterType.lowPass:\r\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\r\n                break;\r\n            case FilterType.highPass:\r\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\r\n                break;\r\n            case FilterType.peak:\r\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\r\n                break;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    public getVolumeCompensationMult(): number {\r\n        const octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\r\n        const gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\r\n        switch (this.type) {\r\n            case FilterType.lowPass:\r\n                const freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\r\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\r\n                const warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\r\n                const warpedOctave: number = Math.log2(warpedFreq);\r\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\r\n            case FilterType.highPass:\r\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\r\n            case FilterType.peak:\r\n                const distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\r\n                const freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\r\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport class FilterSettings {\r\n    public readonly controlPoints: FilterControlPoint[] = [];\r\n    public controlPointCount: number = 0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset(): void {\r\n        this.controlPointCount = 0;\r\n    }\r\n\r\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\r\n        let controlPoint: FilterControlPoint;\r\n        if (this.controlPoints.length <= this.controlPointCount) {\r\n            controlPoint = new FilterControlPoint();\r\n            this.controlPoints[this.controlPointCount] = controlPoint;\r\n        } else {\r\n            controlPoint = this.controlPoints[this.controlPointCount];\r\n        }\r\n        this.controlPointCount++;\r\n        controlPoint.type = type;\r\n        controlPoint.set(freqSetting, gainSetting);\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const filterArray: any[] = [];\r\n        for (let i: number = 0; i < this.controlPointCount; i++) {\r\n            const point: FilterControlPoint = this.controlPoints[i];\r\n            filterArray.push({\r\n                \"type\": Config.filterTypeNames[point.type],\r\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\r\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\r\n            });\r\n        }\r\n        return filterArray;\r\n    }\r\n\r\n    public fromJsonObject(filterObject: any): void {\r\n        this.controlPoints.length = 0;\r\n        if (filterObject) {\r\n            for (const pointObject of filterObject) {\r\n                const point: FilterControlPoint = new FilterControlPoint();\r\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\r\n                if (<any>point.type == -1) point.type = FilterType.peak;\r\n                if (pointObject[\"cutoffHz\"] != undefined) {\r\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\r\n                } else {\r\n                    point.freq = 0;\r\n                }\r\n                if (pointObject[\"linearGain\"] != undefined) {\r\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\r\n                } else {\r\n                    point.gain = Config.filterGainCenter;\r\n                }\r\n                this.controlPoints.push(point);\r\n            }\r\n        }\r\n        this.controlPointCount = this.controlPoints.length;\r\n    }\r\n\r\n    // Returns true if all filter control points match in number and type (but not freq/gain)\r\n    public static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\r\n        if (filterA.controlPointCount != filterB.controlPointCount)\r\n            return false;\r\n        for (let i: number = 0; i < filterA.controlPointCount; i++) {\r\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\r\n    public static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\r\n\r\n        let lerpedFilter: FilterSettings = new FilterSettings();\r\n\r\n        // One setting or another is null, return the other.\r\n        if (filterA == null) {\r\n            return filterA;\r\n        }\r\n        if (filterB == null) {\r\n            return filterB;\r\n        }\r\n\r\n        pos = Math.max(0, Math.min(1, pos));\r\n\r\n        // Filter control points match in number and type\r\n        if (this.filtersCanMorph(filterA, filterB)) {\r\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\r\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\r\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\r\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\r\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\r\n            }\r\n\r\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\r\n\r\n            return lerpedFilter;\r\n        }\r\n        else {\r\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\r\n            return (pos >= 1) ? filterB : filterA;\r\n        }\r\n    }\r\n\r\n    public convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\r\n        this.reset();\r\n\r\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\r\n        const legacyFilterMax: number = 0.95;\r\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\r\n        const legacyFilterMaxResonance: number = 0.95;\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const legacyFilterResonanceRange: number = 8;\r\n\r\n        const resonant: boolean = (legacyResonanceSetting > 1);\r\n        const firstOrder: boolean = (legacyResonanceSetting == 0);\r\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\r\n        const envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\r\n\r\n        const standardSampleRate: number = 48000;\r\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\r\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\r\n\r\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\r\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\r\n        } else if (firstOrder) {\r\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\r\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\r\n            // However, BeepBox's original lowpass filters behaved oddly as they\r\n            // approach the nyquist frequency, so I've devised this curved conversion\r\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\r\n            const extraOctaves: number = 3.5;\r\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\r\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\r\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\r\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, finalRadians);\r\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\r\n\r\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\r\n            // Bias slightly toward 2^(-extraOctaves):\r\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\r\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\r\n            if (envDecays) logGain = Math.min(logGain, -1.0);\r\n            const convertedGain: number = Math.pow(2.0, logGain);\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        } else {\r\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\r\n            const invertedGain: number = 0.5 / intendedGain;\r\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\r\n            const freqRatio: number = legacyRadians / maxRadians;\r\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\r\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\r\n            let curvedHz: number;\r\n            if (envDecays) {\r\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\r\n            } else {\r\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\r\n            }\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n\r\n            let legacyFilterGain: number;\r\n            if (envDecays) {\r\n                legacyFilterGain = intendedGain;\r\n            } else {\r\n                const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\r\n                const response: FrequencyResponse = new FrequencyResponse();\r\n                response.analyze(legacyFilter, curvedRadians);\r\n                legacyFilterGain = response.magnitude();\r\n            }\r\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        }\r\n\r\n        // Added for JummBox - making a 0 point filter does not truncate control points!\r\n        this.controlPoints.length = this.controlPointCount;\r\n    }\r\n\r\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\r\n    public convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder: boolean = false): void {\r\n        this.reset();\r\n\r\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\r\n        const legacyFilterMax: number = 0.95;\r\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\r\n        const legacyFilterMaxResonance: number = 0.95;\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const legacyFilterResonanceRange: number = 8;\r\n\r\n        const firstOrder: boolean = (legacyResonanceSetting == 0 && allowFirstOrder);\r\n        const standardSampleRate: number = 48000;\r\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\r\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\r\n\r\n        if (firstOrder) {\r\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\r\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\r\n            // However, BeepBox's original lowpass filters behaved oddly as they\r\n            // approach the nyquist frequency, so I've devised this curved conversion\r\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\r\n            const extraOctaves: number = 3.5;\r\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\r\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\r\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\r\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, finalRadians);\r\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\r\n\r\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\r\n            // Bias slightly toward 2^(-extraOctaves):\r\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\r\n            const convertedGain: number = Math.pow(2.0, logGain);\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        } else {\r\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\r\n            const invertedGain: number = 0.5 / intendedGain;\r\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\r\n            const freqRatio: number = legacyRadians / maxRadians;\r\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\r\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\r\n            let curvedHz: number;\r\n\r\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\r\n            const freqSetting: number = FilterControlPoint.getSettingValueFromHz(curvedHz);\r\n\r\n            let legacyFilterGain: number;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, curvedRadians);\r\n            legacyFilterGain = response.magnitude();\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport class EnvelopeSettings {\r\n    public target: number = 0;\r\n    public index: number = 0;\r\n    public envelope: number = 0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset(): void {\r\n        this.target = 0;\r\n        this.index = 0;\r\n        this.envelope = 0;\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const envelopeObject: any = {\r\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\r\n            \"envelope\": Config.envelopes[this.envelope].name,\r\n        };\r\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\r\n            envelopeObject[\"index\"] = this.index;\r\n        }\r\n        return envelopeObject;\r\n    }\r\n\r\n    public fromJsonObject(envelopeObject: any): void {\r\n        this.reset();\r\n\r\n        let target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\r\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\r\n        this.target = target.index;\r\n\r\n        let envelope: Envelope = Config.envelopes.dictionary[envelopeObject[\"envelope\"]];\r\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\r\n        this.envelope = envelope.index;\r\n\r\n        if (envelopeObject[\"index\"] != undefined) {\r\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\r\n        } else {\r\n            this.index = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// Settings that were available to old versions of BeepBox but are no longer available in the\r\n// current version that need to be reinterpreted as a group to determine the best way to\r\n// represent them in the current version.\r\ninterface LegacySettings {\r\n    filterCutoff?: number;\r\n    filterResonance?: number;\r\n    filterEnvelope?: Envelope;\r\n    pulseEnvelope?: Envelope;\r\n    operatorEnvelopes?: Envelope[];\r\n    feedbackEnvelope?: Envelope;\r\n}\r\n\r\ninterface HeldMod {\r\n    volume: number;\r\n    channelIndex: number;\r\n    instrumentIndex: number;\r\n    setting: number;\r\n    holdFor: number;\r\n}\r\n\r\nexport class Instrument {\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public preset: number = 0;\r\n    public chipWave: number = 2;\r\n\t// advloop addition\r\n\tpublic isUsingAdvancedLoopControls: boolean = false;\r\n\tpublic chipWaveLoopStart: number = 0;\r\n\tpublic chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\r\n\tpublic chipWaveLoopMode: number = 0; // 0: loop, 1: ping-pong, 2: once, 3: play loop once\r\n\tpublic chipWavePlayBackwards: boolean = false;\r\n        public chipWaveStartOffset: number = 0;\r\n        // advloop addition\r\n    public chipNoise: number = 1;\r\n    public eqFilter: FilterSettings = new FilterSettings();\r\n    public eqFilterType: boolean = false;\r\n    public eqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\r\n    public eqFilterSimplePeak: number = 0;\r\n    public noteFilter: FilterSettings = new FilterSettings();\r\n    public noteFilterType: boolean = false;\r\n    public noteFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\r\n    public noteFilterSimplePeak: number = 0;\r\n    public eqSubFilters: (FilterSettings | null)[] = [];\r\n    public noteSubFilters: (FilterSettings | null)[] = [];\r\n    public tmpEqFilterStart: FilterSettings | null;\r\n    public tmpEqFilterEnd: FilterSettings | null;\r\n    public tmpNoteFilterStart: FilterSettings | null;\r\n    public tmpNoteFilterEnd: FilterSettings | null;\r\n    public envelopes: EnvelopeSettings[] = [];\r\n    public fadeIn: number = 0;\r\n    public fadeOut: number = Config.fadeOutNeutral;\r\n    public envelopeCount: number = 0;\r\n    public transition: number = Config.transitions.dictionary[\"normal\"].index;\r\n    public pitchShift: number = 0;\r\n    public detune: number = 0;\r\n    public vibrato: number = 0;\r\n    public interval: number = 0;\r\n    public vibratoDepth: number = 0;\r\n    public vibratoSpeed: number = 10;\r\n    public vibratoDelay: number = 0;\r\n    public vibratoType: number = 0;\r\n    public envelopeSpeed: number = 12;\r\n    public discreteEnvelope: boolean = false;\r\n    public unison: number = 0;\r\n    public unisonVoices: number = 1;\r\n    public unisonSpread: number = 0.0;\r\n    public unisonOffset: number = 0.0;\r\n    public unisonExpression: number = 1.4;\r\n    public unisonSign: number = 1.0;\r\n    public effects: number = 0;\r\n    public chord: number = 1;\r\n    public volume: number = 0;\r\n    public pan: number = Config.panCenter;\r\n    public panDelay: number = 10;\r\n    public arpeggioSpeed: number = 12;\r\n    public fastTwoNoteArp: boolean = false;\r\n    public legacyTieOver: boolean = false;\r\n    public clicklessTransition: boolean = false;\r\n    public aliases: boolean = false;\r\n    public pulseWidth: number = Config.pulseWidthRange;\r\n    public decimalOffset: number = 0;\r\n    public supersawDynamism: number = Config.supersawDynamismMax;\r\n\tpublic supersawSpread: number = Math.ceil(Config.supersawSpreadMax / 2.0);\r\n\tpublic supersawShape: number = 0;\r\n\tpublic stringSustain: number = 10;\r\n\tpublic stringSustainType: SustainType = SustainType.acoustic;\r\n    public distortion: number = 0;\r\n    public bitcrusherFreq: number = 0;\r\n    public bitcrusherQuantization: number = 0;\r\n    public chorus: number = 0;\r\n    public reverb: number = 0;\r\n    public echoSustain: number = 0;\r\n    public echoDelay: number = 0;\r\n    public algorithm: number = 0;\r\n    public feedbackType: number = 0;\r\n    public algorithm6Op: number = 1;\r\n    public feedbackType6Op: number = 1;//default to not custom\r\n    public customAlgorithm: CustomAlgorithm = new CustomAlgorithm(); //{ name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] };\r\n    public customFeedbackType: CustomFeedBack = new CustomFeedBack(); //{ name: \"1↔4 2↔5 3↔6\", indices: [[3], [5], [6], [1], [2], [3]] };\r\n    public feedbackAmplitude: number = 0;\r\n    public customChipWave: Float32Array = new Float32Array(64);\r\n    public customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\r\n    public readonly operators: Operator[] = [];\r\n    public readonly spectrumWave: SpectrumWave;\r\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n    public readonly drumsetEnvelopes: number[] = [];\r\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n    public modChannels: number[] = [];\r\n    public modInstruments: number[] = [];\r\n    public modulators: number[] = [];\r\n    public modFilterTypes: number[] = [];\r\n    public invalidModulators: boolean[] = [];\r\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n        // @jummbus - My screed on how modulator arrays for instruments work, for the benefit of myself in the future, or whoever else.\r\n        //\r\n        // modulators[mod] is the index in Config.modulators to use, with \"none\" being the first entry.\r\n        //\r\n        // modChannels[mod] gives the index of a channel set for this mod. Two special values:\r\n        //   -2 \"none\"\r\n        //   -1 \"song\"\r\n        //   0+ actual channel index\r\n        //\r\n        // modInstruments[mod] gives the index of an instrument within the channel set for this mod. Again, two special values:\r\n        //   [0 ~ channel.instruments.length-1]     channel's instrument index\r\n        //   channel.instruments.length             \"all\"\r\n        //   channel.instruments.length+1           \"active\"\r\n        //\r\n        // modFilterTypes[mod] gives some info about the filter type: 0 is morph, 1+ is index in the dot selection array (dot 1 x, dot 1 y, dot 2 x...)\r\n        //   0  filter morph\r\n        //   1+ filter dot target, starting from dot 1 x and then dot 1 y, then repeating x, y for all dots in order. Note: odd values are always \"x\" targets, even are \"y\".\r\n\r\n        if (isModChannel) {\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.modChannels.push(-2);\r\n                this.modInstruments.push(0);\r\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\r\n            }\r\n        }\r\n\r\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n        for (let i: number = 0; i < Config.operatorCount+2; i++) {//hopefully won't break everything\r\n            this.operators[i] = new Operator(i);\r\n        }\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n        }\r\n\r\n        for (let i = 0; i < 64; i++) {\r\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n        }\r\n\r\n        let sum: number = 0.0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            sum += this.customChipWave[i];\r\n        }\r\n        const average: number = sum / this.customChipWave.length;\r\n\r\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n        let cumulative: number = 0;\r\n        let wavePrev: number = 0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            cumulative += wavePrev;\r\n            wavePrev = this.customChipWave[i] - average;\r\n            this.customChipWaveIntegral[i] = cumulative;\r\n        }\r\n\r\n        // 65th, last sample is for anti-aliasing\r\n        this.customChipWaveIntegral[64] = 0.0;\r\n\r\n    }\r\n\r\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        // Mod channels are forced to one type.\r\n        if (isModChannel) type = InstrumentType.mod;\r\n        this.type = type;\r\n        this.preset = type;\r\n        this.volume = 0;\r\n        this.effects = (1 << EffectType.panning); // Panning enabled by default in JB.\r\n        this.chorus = Config.chorusRange - 1;\r\n        this.reverb = 0;\r\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\r\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\r\n        this.eqFilter.reset();\r\n        this.eqFilterType = false;\r\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\r\n        this.eqFilterSimplePeak = 0;\r\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n            this.eqSubFilters[i] = null;\r\n            this.noteSubFilters[i] = null;\r\n        }\r\n        this.noteFilter.reset();\r\n        this.noteFilterType = false;\r\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\r\n        this.noteFilterSimplePeak = 0;\r\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\r\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5)\r\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\r\n        this.pan = Config.panCenter;\r\n        this.panDelay = 10;\r\n        this.pitchShift = Config.pitchShiftCenter;\r\n        this.detune = Config.detuneCenter;\r\n        this.vibrato = 0;\r\n        this.unison = 0;\r\n        this.stringSustain = 10;\r\n        this.stringSustainType = Config.enableAcousticSustain ? SustainType.acoustic : SustainType.bright;\r\n        this.clicklessTransition = false;\r\n        this.arpeggioSpeed = 12;\r\n        this.envelopeSpeed = 12;\r\n        this.discreteEnvelope = false;\r\n        this.legacyTieOver = false;\r\n        this.aliases = false;\r\n        this.fadeIn = 0;\r\n        this.fadeOut = Config.fadeOutNeutral;\r\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\r\n        this.envelopeCount = 0;\r\n        switch (type) {\r\n            case InstrumentType.chip:\r\n                this.chipWave = 2;\r\n                // TODO: enable the chord effect?\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n\t\t\t\t\t\t\t\t // advloop addition\r\n                    this.isUsingAdvancedLoopControls = false;\r\n                    this.chipWaveLoopStart = 0;\r\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\r\n                    this.chipWaveLoopMode = 0;\r\n                    this.chipWavePlayBackwards = false;\r\n                    this.chipWaveStartOffset = 0;\r\n                    // advloop addition\r\n                break;\r\n            case InstrumentType.customChipWave:\r\n                this.chipWave = 2;\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n                break;\r\n            case InstrumentType.fm:\r\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.feedbackAmplitude = 0;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.fm6op:\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.effects = 1;\r\n                this.chord = 3;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.algorithm6Op = 1;\r\n                this.feedbackType6Op = 1;\r\n                this.customAlgorithm.fromPreset(1);\r\n                this.feedbackAmplitude = 0;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.noise:\r\n                this.chipNoise = 1;\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                break;\r\n            case InstrumentType.spectrum:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                this.spectrumWave.reset(isNoiseChannel);\r\n                break;\r\n            case InstrumentType.drumset:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                for (let i: number = 0; i < Config.drumCount; i++) {\r\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\r\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n                    }\r\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n                }\r\n                break;\r\n            case InstrumentType.harmonics:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.pwm:\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n                this.decimalOffset = 0;\r\n                break;\r\n            case InstrumentType.pickedString:\r\n                this.chord = Config.chords.dictionary[\"strum\"].index;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.mod:\r\n                this.transition = 0;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 0;\r\n                this.chord = 0;\r\n                this.modChannels = [];\r\n                this.modInstruments = [];\r\n                this.modulators = [];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels.push(-2);\r\n                    this.modInstruments.push(0);\r\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\r\n                    this.invalidModulators[mod] = false;\r\n                    this.modFilterTypes[mod] = 0;\r\n                }\r\n                break;\r\n            case InstrumentType.supersaw:\r\n\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n\t\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\r\n\t\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\r\n\t\t\t\tthis.supersawShape = 0;\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange - 1;\r\n                this.decimalOffset = 0;\r\n\t\t\t\tbreak;\r\n            default:\r\n                throw new Error(\"Unrecognized instrument type: \" + type);\r\n        }\r\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\r\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\r\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\r\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n            // Enable chord if it was used.\r\n            this.effects = (this.effects | (1 << EffectType.chord));\r\n        }\r\n    }\r\n\r\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\r\n    public convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\r\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\r\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\r\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\r\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\r\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\r\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\r\n\r\n        // legacy defaults:\r\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\r\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\r\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\r\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\r\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\r\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\r\n\r\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\r\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\r\n\r\n        const carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\r\n        let noCarriersControlledByNoteSize: boolean = true;\r\n        let allCarriersControlledByNoteSize: boolean = true;\r\n        let noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\r\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\r\n            for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\r\n                if (i < carrierCount) {\r\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\r\n                        allCarriersControlledByNoteSize = false;\r\n                    } else {\r\n                        noCarriersControlledByNoteSize = false;\r\n                    }\r\n                } else {\r\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.envelopeCount = 0;\r\n\r\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\r\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\r\n            }\r\n        }\r\n\r\n        if (legacyFilterEnv.type == EnvelopeType.none) {\r\n            this.noteFilter.reset();\r\n            this.noteFilterType = false;\r\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\r\n            this.effects &= ~(1 << EffectType.noteFilter);\r\n            if (forceSimpleFilter || this.eqFilterType) {\r\n                this.eqFilterType = true;\r\n                this.eqFilterSimpleCut = legacyCutoffSetting;\r\n                this.eqFilterSimplePeak = legacyResonanceSetting;\r\n            }\r\n        } else {\r\n            this.eqFilter.reset();\r\n\r\n            this.eqFilterType = false;\r\n            this.noteFilterType = false;\r\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\r\n            this.effects |= 1 << EffectType.noteFilter;\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index);\r\n            if (forceSimpleFilter || this.noteFilterType) {\r\n                this.noteFilterType = true;\r\n                this.noteFilterSimpleCut = legacyCutoffSetting;\r\n                this.noteFilterSimplePeak = legacyResonanceSetting;\r\n            }\r\n        }\r\n\r\n        if (legacyPulseEnv.type != EnvelopeType.none) {\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index);\r\n        }\r\n\r\n        for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\r\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\r\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index);\r\n            }\r\n        }\r\n\r\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index);\r\n        }\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const instrumentObject: any = {\r\n            \"type\": Config.instrumentTypeNames[this.type],\r\n            \"volume\": this.volume,\r\n            \"eqFilter\": this.eqFilter.toJsonObject(),\r\n            \"eqFilterType\": this.eqFilterType,\r\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\r\n            \"eqSimplePeak\": this.eqFilterSimplePeak,\r\n            \"envelopeSpeed\": this.envelopeSpeed,\r\n            \"discreteEnvelope\": this.discreteEnvelope\r\n        };\r\n\r\n        if (this.preset != this.type) {\r\n            instrumentObject[\"preset\"] = this.preset;\r\n        }\r\n\r\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n            if (this.eqSubFilters[i] != null)\r\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i]!.toJsonObject();\r\n        }\r\n\r\n        const effects: string[] = [];\r\n        for (const effect of Config.effectOrder) {\r\n            if (this.effects & (1 << effect)) {\r\n                effects.push(Config.effectNames[effect]);\r\n            }\r\n        }\r\n        instrumentObject[\"effects\"] = effects;\r\n\r\n\r\n        if (effectsIncludeTransition(this.effects)) {\r\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\r\n        }\r\n        if (effectsIncludeChord(this.effects)) {\r\n            instrumentObject[\"chord\"] = this.getChord().name;\r\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\r\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\r\n        }\r\n        if (effectsIncludePitchShift(this.effects)) {\r\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\r\n        }\r\n        if (effectsIncludeDetune(this.effects)) {\r\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\r\n        }\r\n        if (effectsIncludeVibrato(this.effects)) {\r\n            if (this.vibrato == -1) {\r\n                this.vibrato = 5;\r\n            }\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\r\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\r\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\r\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\r\n        }\r\n        if (effectsIncludeNoteFilter(this.effects)) {\r\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\r\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\r\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\r\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\r\n\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (this.noteSubFilters[i] != null)\r\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\r\n            }\r\n        }\r\n        if (effectsIncludeDistortion(this.effects)) {\r\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\r\n            instrumentObject[\"aliases\"] = this.aliases;\r\n        }\r\n        if (effectsIncludeBitcrusher(this.effects)) {\r\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\r\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\r\n        }\r\n        if (effectsIncludePanning(this.effects)) {\r\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\r\n            instrumentObject[\"panDelay\"] = this.panDelay;\r\n        }\r\n        if (effectsIncludeChorus(this.effects)) {\r\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\r\n        }\r\n        if (effectsIncludeEcho(this.effects)) {\r\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\r\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\r\n        }\r\n        if (effectsIncludeReverb(this.effects)) {\r\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\r\n        }\r\n\r\n        if (this.type != InstrumentType.drumset) {\r\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\r\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\r\n        }\r\n\r\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\r\n            instrumentObject[\"harmonics\"] = [];\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n            }\r\n        }\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            instrumentObject[\"spectrum\"] = [];\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n            }\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            instrumentObject[\"drums\"] = [];\r\n            for (let j: number = 0; j < Config.drumCount; j++) {\r\n                const spectrum: number[] = [];\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n                }\r\n                instrumentObject[\"drums\"][j] = {\r\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n                    \"spectrum\": spectrum,\r\n                };\r\n            }\r\n        } else if (this.type == InstrumentType.chip) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            // should this unison pushing code be turned into a function..?\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;   \r\n            // these don't need to be pushed if custom unisons aren't being used\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n\r\n\t\t\t\t\t\t// advloop addition\r\n                instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\r\n                instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\r\n                instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\r\n                instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\r\n                instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\r\n                instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\r\n                // advloop addition\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\r\n        } else if (this.type == InstrumentType.supersaw) {\r\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\r\n\t\t\tinstrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\r\n\t\t\tinstrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\r\n\t\t\tinstrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\r\n\t\t} else if (this.type == InstrumentType.pickedString) {\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\r\n            if (Config.enableAcousticSustain) {\r\n\t\t\t\tinstrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\r\n\t\t\t}\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n        } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            const operatorArray: Object[] = [];\r\n            for (const operator of this.operators) {\r\n                operatorArray.push({\r\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n                    \"amplitude\": operator.amplitude,\r\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\r\n                    \"pulseWidth\": operator.pulseWidth,\r\n                });\r\n            }\r\n            if(this.type == InstrumentType.fm){\r\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n                instrumentObject[\"operators\"] = operatorArray;\r\n            } else {\r\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\r\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\r\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n                if(this.algorithm6Op == 0){\r\n                    const customAlgorithm: any = {};\r\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\r\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\r\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\r\n                }\r\n                if(this.feedbackType6Op == 0){\r\n                    const customFeedback: any = {};\r\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\r\n                    instrumentObject[\"customFeedback\"] = customFeedback;\r\n                }\r\n\r\n                instrumentObject[\"operators\"] = operatorArray;\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n            }\r\n        } else if (this.type == InstrumentType.mod) {\r\n            instrumentObject[\"modChannels\"] = [];\r\n            instrumentObject[\"modInstruments\"] = [];\r\n            instrumentObject[\"modSettings\"] = [];\r\n            instrumentObject[\"modFilterTypes\"] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\r\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type\");\r\n        }\r\n\r\n        const envelopes: any[] = [];\r\n        for (let i = 0; i < this.envelopeCount; i++) {\r\n            envelopes.push(this.envelopes[i].toJsonObject());\r\n        }\r\n        instrumentObject[\"envelopes\"] = envelopes;\r\n\r\n        return instrumentObject;\r\n    }\r\n\r\n\r\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb: number = 0, jsonFormat: string = Config.jsonFormat): void {\r\n        if (instrumentObject == undefined) instrumentObject = {};\r\n\r\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n        // SynthBox support\r\n        if ((jsonFormat == \"SynthBox\") && (instrumentObject[\"type\"] == \"FM\")) type = Config.instrumentTypeNames.indexOf(\"FM6op\");\r\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n        this.effects &= ~(1 << EffectType.panning);\r\n\r\n        if (instrumentObject[\"preset\"] != undefined) {\r\n            this.preset = instrumentObject[\"preset\"] >>> 0;\r\n        }\r\n\r\n        if (instrumentObject[\"volume\"] != undefined) {\r\n            if (jsonFormat == \"JummBox\" || jsonFormat == \"SynthBox\" || jsonFormat == \"UltraBox\") {\r\n                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\r\n            } else {\r\n                this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20)) * 25.0 / 7.0);\r\n            }\r\n        } else {\r\n            this.volume = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"envelopeSpeed\"] != undefined) {\r\n            this.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0);\r\n        } else {\r\n            this.envelopeSpeed = 12;\r\n        }\r\n\r\n        if (instrumentObject[\"discreteEnvelope\"] != undefined) {\r\n            this.discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\r\n        }\r\n        else {\r\n            this.discreteEnvelope = false;\r\n        }\r\n\r\n        if (Array.isArray(instrumentObject[\"effects\"])) {\r\n            let effects: number = 0;\r\n            for (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\r\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\r\n            }\r\n            this.effects = (effects & ((1 << EffectType.length) - 1));\r\n        } else {\r\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\r\n            const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\r\n            if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n        }\r\n\r\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\r\n        const transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\r\n        if (transitionProperty != undefined) {\r\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\r\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\r\n                const legacySettings = (<any>{\r\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\r\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\r\n                    // of the fade in/out fields.\r\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\r\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\r\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\r\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\r\n                })[transitionProperty];\r\n                if (legacySettings != undefined) {\r\n                    transition = Config.transitions.dictionary[legacySettings.transition];\r\n                    // These may be overridden below.\r\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\r\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\r\n                }\r\n            }\r\n            if (transition != undefined) this.transition = transition.index;\r\n\r\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                // Enable transition if it was used.\r\n                this.effects = (this.effects | (1 << EffectType.transition));\r\n            }\r\n        }\r\n\r\n        // Overrides legacy settings in transition above.\r\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\r\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\r\n        }\r\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\r\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\r\n        }\r\n\r\n        {\r\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\r\n            const chordProperty: any = instrumentObject[\"chord\"];\r\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\r\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\r\n            if (chord != undefined) {\r\n                this.chord = chord.index;\r\n            } else {\r\n                // Different instruments have different default chord types based on historical behaviour.\r\n                if (this.type == InstrumentType.noise) {\r\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                } else if (this.type == InstrumentType.pickedString) {\r\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\r\n                } else if (this.type == InstrumentType.chip) {\r\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                } else if (this.type == InstrumentType.fm||this.type == InstrumentType.fm6op) {\r\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n                } else {\r\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\r\n        const unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\r\n        if (unisonProperty != undefined) {\r\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\", \"error\": \"voiced\" };\r\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\r\n            if (unison != undefined) this.unison = unison.index;\r\n            if (unisonProperty == \"custom\") this.unison = Config.unisons.length;\r\n        }\r\n        //clamp these???\r\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\r\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\r\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\r\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\r\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\r\n\r\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\r\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n        }\r\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\r\n            // Enable chord if it was used.\r\n            this.effects = (this.effects | (1 << EffectType.chord));\r\n        }\r\n\r\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\r\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\r\n        }\r\n        // modbox pitch shift, known in that mod as \"octave offset\"\r\n        if (instrumentObject[\"octoff\"] != undefined) {\r\n            let potentialPitchShift: string = instrumentObject[\"octoff\"];\r\n            this.effects = (this.effects | (1 << EffectType.pitchShift));\r\n            \r\n            if ((potentialPitchShift == \"+1 (octave)\") || (potentialPitchShift == \"+2 (2 octaves)\")) {\r\n                this.pitchShift = 24;\r\n            } else if ((potentialPitchShift == \"+1/2 (fifth)\") || (potentialPitchShift == \"+1 1/2 (octave and fifth)\")) {\r\n                this.pitchShift = 18;\r\n            } else if ((potentialPitchShift == \"-1 (octave)\") || (potentialPitchShift == \"-2 (2 octaves)\")) {\r\n                this.pitchShift = 0;\r\n            } else if ((potentialPitchShift == \"-1/2 (fifth)\") || (potentialPitchShift == \"-1 1/2 (octave and fifth)\")) {\r\n                this.pitchShift = 6;\r\n            } else {\r\n                this.pitchShift = 12;\r\n            }\r\n        }\r\n        if (instrumentObject[\"detuneCents\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\r\n        }\r\n\r\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\r\n        const vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\r\n        if (vibratoProperty != undefined) {\r\n\r\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\r\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\r\n            if (vibrato != undefined)\r\n                this.vibrato = vibrato.index;\r\n            else if (vibratoProperty == \"custom\")\r\n                this.vibrato = Config.vibratos.length; // custom\r\n\r\n            if (this.vibrato == Config.vibratos.length) {\r\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                this.vibratoType = instrumentObject[\"vibratoType\"];\r\n            }\r\n            else { // Set defaults for the vibrato profile\r\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\r\n                this.vibratoSpeed = 10; // default;\r\n                this.vibratoType = Config.vibratos[this.vibrato].type;\r\n            }\r\n\r\n            // Old songs may have a vibrato effect without explicitly enabling it.\r\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\r\n                this.effects = (this.effects | (1 << EffectType.vibrato));\r\n            }\r\n        }\r\n\r\n        if (instrumentObject[\"pan\"] != undefined) {\r\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n\r\n            // Old songs may have a panning effect without explicitly enabling it.\r\n            if (this.pan != Config.panCenter) {\r\n                this.effects = (this.effects | (1 << EffectType.panning));\r\n            }\r\n        } else {\r\n            this.pan = Config.panCenter;\r\n        }\r\n\r\n        if (instrumentObject[\"panDelay\"] != undefined) {\r\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n        } else {\r\n            this.panDelay = 10;\r\n        }\r\n\r\n        if (instrumentObject[\"detune\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n        }\r\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\r\n            this.detune = Config.detuneCenter;\r\n        }\r\n\r\n        if (instrumentObject[\"distortion\"] != undefined) {\r\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\r\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\r\n        }\r\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\r\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"echoSustain\"] != undefined) {\r\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\r\n        }\r\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\r\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\r\n        }\r\n\r\n        if (!isNaN(instrumentObject[\"chorus\"])) {\r\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"reverb\"] != undefined) {\r\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\r\n        } else {\r\n            this.reverb = legacyGlobalReverb;\r\n        }\r\n\r\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\r\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n        } else {\r\n            this.pulseWidth = Config.pulseWidthRange;\r\n        }\r\n\r\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\r\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\r\n        } else {\r\n            this.decimalOffset = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"dynamism\"] != undefined) {\r\n\t\t\tthis.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\r\n\t\t}\r\n\t\tif (instrumentObject[\"spread\"] != undefined) {\r\n\t\t\tthis.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\r\n\t\t}\r\n\t\tif (instrumentObject[\"shape\"] != undefined) {\r\n\t\t\tthis.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.supersawShape = 0;\r\n\t\t}\r\n        \r\n        if (instrumentObject[\"harmonics\"] != undefined) {\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n            }\r\n            this.harmonicsWave.markCustomWaveDirty();\r\n        } else {\r\n            this.harmonicsWave.reset();\r\n        }\r\n\r\n        if (instrumentObject[\"spectrum\"] != undefined) {\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n                this.spectrumWave.markCustomWaveDirty();\r\n            }\r\n        } else {\r\n            this.spectrumWave.reset(isNoiseChannel);\r\n        }\r\n\r\n        if (instrumentObject[\"stringSustain\"] != undefined) {\r\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\r\n        } else {\r\n            this.stringSustain = 10;\r\n        }\r\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : SustainType.bright;\r\n\t\tif (<any>this.stringSustainType == -1) this.stringSustainType = SustainType.bright;\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (instrumentObject[\"wave\"] == \"pink noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\r\n            if (instrumentObject[\"wave\"] == \"brownian noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\r\n            if (this.chipNoise == -1) this.chipNoise = 1;\r\n        }\r\n\r\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\r\n        const getEnvelope = (name: any): Envelope | undefined => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];\r\n\r\n        if (this.type == InstrumentType.drumset) {\r\n            if (instrumentObject[\"drums\"] != undefined) {\r\n                for (let j: number = 0; j < Config.drumCount; j++) {\r\n                    const drum: any = instrumentObject[\"drums\"][j];\r\n                    if (drum == undefined) continue;\r\n\r\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\r\n                    if (drum[\"filterEnvelope\"] != undefined) {\r\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\r\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\r\n                    }\r\n                    if (drum[\"spectrum\"] != undefined) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.type == InstrumentType.chip) {\r\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n           \t\t\t\t const modboxWaveNames: Dictionary<number> = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\r\n             \t const sandboxWaveNames: Dictionary<number> = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\r\n\t\t\t const zefboxWaveNames: Dictionary<number> = {\"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71,\"deep pulse\": 72 };\r\n\t\t\t const miscWaveNames: Dictionary<number> = {\"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\r\n\t\t\t const paandorasboxWaveNames: Dictionary<number> = {\"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119};\r\n\t\t\t// const paandorasbetaWaveNames = {\"contrabass\": 55, \"double bass\": 56 };\r\n\t\t//this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            this.chipWave = -1;\r\n            const rawName: string = instrumentObject[\"wave\"];\r\n            for (const table of [\r\n                legacyWaveNames,\r\n                modboxWaveNames,\r\n                sandboxWaveNames,\r\n                zefboxWaveNames,\r\n                miscWaveNames,\r\n                paandorasboxWaveNames\r\n            ]) {\r\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\r\n                    this.chipWave = table[rawName];\r\n                    break;\r\n                }\r\n            }\r\n            if (this.chipWave == -1) {\r\n                const potentialChipWaveIndex: number = Config.chipWaves.findIndex(wave => wave.name == rawName);\r\n                if (potentialChipWaveIndex != -1) this.chipWave = potentialChipWaveIndex;\r\n            }\r\n            // this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : modboxWaveNames[instrumentObject[\"wave\"]] != undefined ? modboxWaveNames[instrumentObject[\"wave\"]] : sandboxWaveNames[instrumentObject[\"wave\"]] != undefined ? sandboxWaveNames[instrumentObject[\"wave\"]] : zefboxWaveNames[instrumentObject[\"wave\"]] != undefined ? zefboxWaveNames[instrumentObject[\"wave\"]] : miscWaveNames[instrumentObject[\"wave\"]] != undefined ? miscWaveNames[instrumentObject[\"wave\"]] : paandorasboxWaveNames[instrumentObject[\"wave\"]] != undefined ? paandorasboxWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]); \r\n\t\tif (this.chipWave == -1) this.chipWave = 1;\r\n        }\r\n\r\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            if(this.type == InstrumentType.fm) {\r\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n                if (this.algorithm == -1) this.algorithm = 0;\r\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n                if (this.feedbackType == -1) this.feedbackType = 0;\r\n            } else {\r\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\r\n                if (this.algorithm6Op == -1) this.algorithm6Op = 1;\r\n                if(this.algorithm6Op == 0){ \r\n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\r\n                } else{\r\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\r\n                }\r\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\r\n                // SynthBox feedback support\r\n                if ((this.feedbackType6Op == -1) && (jsonFormat == \"SynthBox\")) {\r\n                    this.feedbackType6Op = Config.algorithms6Op.findIndex(feedbackType6Op => feedbackType6Op.name == \"Custom\");\r\n                    \r\n                    // These are all of the SynthBox feedback presets that aren't present in Gold/UltraBox\r\n                    let synthboxLegacyFeedbacks: DictionaryArray<any> = toNameMap([\r\n                        { name: \"2⟲ 3⟲\", indices: [[], [2], [3], [], [], []] },\r\n                        { name: \"4⟲ 5⟲\", indices: [[], [], [], [4], [5], []] },\r\n                        { name: \"5⟲ 6⟲\", indices: [[], [], [], [], [5], [6]] },\r\n                        { name: \"1⟲ 6⟲\", indices: [[1], [], [], [], [], [6]] },\r\n                        { name: \"1⟲ 3⟲\", indices: [[1], [], [3], [], [], []] },\r\n                        { name: \"1⟲ 4⟲\", indices: [[1], [], [], [4], [], []] },\r\n                        { name: \"1⟲ 5⟲\", indices: [[1], [], [], [], [5], []] },\r\n                        { name: \"4⟲ 6⟲\", indices: [[], [], [], [4], [], [6]] },\r\n                        { name: \"2⟲ 6⟲\", indices: [[], [2], [], [], [], [6]] },\r\n                        { name: \"3⟲ 6⟲\", indices: [[], [], [3], [], [], [6]] },\r\n                        { name: \"4⟲ 5⟲ 6⟲\", indices: [[], [], [], [4], [5], [6]] },\r\n                        { name: \"1⟲ 3⟲ 6⟲\", indices: [[1], [], [3], [], [], [6]] },\r\n                        { name: \"2→5\", indices: [[], [], [], [], [2], []] },\r\n                        { name: \"2→6\", indices: [[], [], [], [], [], [2]] },\r\n                        { name: \"3→5\", indices: [[], [], [], [], [3], []] },\r\n                        { name: \"3→6\", indices: [[], [], [], [], [], [3]] },\r\n                        { name: \"4→6\", indices: [[], [], [], [], [], [4]] },\r\n                        { name: \"5→6\", indices: [[], [], [], [], [], [5]] },\r\n                        { name: \"1→3→4\", indices: [[], [], [1], [], [3], []] },\r\n                        { name: \"2→5→6\", indices: [[], [], [], [], [2], [5]] },\r\n                        { name: \"2→4→6\", indices: [[], [], [], [2], [], [4]] },\r\n                        { name: \"4→5→6\", indices: [[], [], [], [], [4], [5]] },\r\n                        { name: \"3→4→5→6\", indices: [[], [], [], [3], [4], [5]] },\r\n                        { name: \"2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\r\n                        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\r\n                    ]);\r\n\r\n                    let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"])].indices;\r\n                    \r\n                    this.customFeedbackType.set(synthboxFeedbackType);\r\n                } else {\r\n                    if (this.feedbackType6Op == -1) this.feedbackType6Op = 1;\r\n                    if (this.feedbackType6Op == 0) {\r\n                        this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\r\n                    } else {\r\n                        this.customFeedbackType.fromPreset(this.feedbackType6Op)\r\n                    }\r\n                }\r\n            }\r\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n            } else {\r\n                this.feedbackAmplitude = 0;\r\n            }\r\n\r\n            for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op?2:0); j++) {\r\n                const operator: Operator = this.operators[j];\r\n                let operatorObject: any = undefined;\r\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\r\n                if (operatorObject == undefined) operatorObject = {};\r\n\r\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n                if (operator.frequency == -1) operator.frequency = 0;\r\n                if (operatorObject[\"amplitude\"] != undefined) {\r\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n                } else {\r\n                    operator.amplitude = 0;\r\n                }\r\n                if (operatorObject[\"waveform\"] != undefined) {\r\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\r\n                    if (operator.waveform == -1) {\r\n                        // GoldBox compatibility\r\n                        if (operatorObject[\"waveform\"] == \"square\") {\r\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\r\n                            operator.pulseWidth = 5;\r\n                        } else {\r\n                            operator.waveform = 0;\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    operator.waveform = 0;\r\n                }\r\n                if (operatorObject[\"pulseWidth\"] != undefined) {\r\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\r\n                } else {\r\n                    operator.pulseWidth = 5;\r\n                }\r\n            }\r\n        }\r\n        else if (this.type == InstrumentType.customChipWave) {\r\n            if (instrumentObject[\"customChipWave\"]) {\r\n\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n                }\r\n\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n            }\r\n        } else if (this.type == InstrumentType.mod) {\r\n            if (instrumentObject[\"modChannels\"] != undefined) {\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\r\n                    // Due to an oversight, this isn't included in JSONs prior to JB 2.6.\r\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\r\n                    this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.type != InstrumentType.mod) {\r\n            // Arpeggio speed\r\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n            }\r\n            else {\r\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n            }\r\n\r\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n            }\r\n            else {\r\n                this.fastTwoNoteArp = useFastTwoNoteArp;\r\n            }\r\n\r\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n            }\r\n            else {\r\n                this.clicklessTransition = false;\r\n            }\r\n\r\n            if (instrumentObject[\"aliases\"] != undefined) {\r\n                this.aliases = instrumentObject[\"aliases\"];\r\n            }\r\n            else {\r\n                // modbox had no anti-aliasing, so enable it for everything if that mode is selected\r\n                if (jsonFormat == \"ModBox\") {\r\n                    this.effects = (this.effects | (1 << EffectType.distortion));\r\n                    this.aliases = true;\r\n                    this.distortion = 0;\r\n                } else {\r\n                    this.aliases = false;\r\n                }\r\n            }\r\n\r\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\r\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\r\n            }\r\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\r\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\r\n            }\r\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\r\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\r\n            }\r\n            if (instrumentObject[\"noteFilter\"] != undefined) {\r\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\r\n            } else {\r\n                this.noteFilter.reset();\r\n            }\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\r\n                    this.noteSubFilters[i] = new FilterSettings();\r\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\r\n                }\r\n            }\r\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\r\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\r\n            }\r\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\r\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\r\n            }\r\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\r\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\r\n            }\r\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\r\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\r\n            } else {\r\n                this.eqFilter.reset();\r\n\r\n                const legacySettings: LegacySettings = {};\r\n\r\n                // Try converting from legacy filter settings.\r\n                const filterCutoffMaxHz: number = 8000;\r\n                const filterCutoffRange: number = 11;\r\n                const filterResonanceRange: number = 8;\r\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\r\n                } else {\r\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n                }\r\n                if (instrumentObject[\"filterResonance\"] != undefined) {\r\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n                } else {\r\n                    legacySettings.filterResonance = 0;\r\n                }\r\n\r\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\r\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\r\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\r\n                if (Array.isArray(instrumentObject[\"operators\"])) {\r\n                    legacySettings.operatorEnvelopes = [];\r\n                    for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op?2:0); j++) {\r\n                        let envelope: Envelope | undefined;\r\n                        if (instrumentObject[\"operators\"][j] != undefined) {\r\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\r\n                        }\r\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\r\n                    }\r\n                }\r\n\r\n                // Try converting from even older legacy filter settings.\r\n                if (instrumentObject[\"filter\"] != undefined) {\r\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\r\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n                    let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n                    if (legacyFilter == -1) legacyFilter = 0;\r\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\r\n                    legacySettings.filterResonance = 0;\r\n                }\r\n\r\n                this.convertLegacySettings(legacySettings, true);\r\n            }\r\n\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\r\n                    this.eqSubFilters[i] = new FilterSettings();\r\n                    this.eqSubFilters[i]!.fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\r\n                }\r\n            }\r\n\r\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\r\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\r\n                for (let i = 0; i < envelopeArray.length; i++) {\r\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\r\n                    const tempEnvelope: EnvelopeSettings = new EnvelopeSettings();\r\n                    tempEnvelope.fromJsonObject(envelopeArray[i]);\r\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);\r\n                }\r\n            }\r\n        }\r\n   \t\t // advloop addition\r\n            if (type === 0) {\r\n                if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\r\n                    this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\r\n                    this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\r\n                    this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\r\n                    this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\r\n                    this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\r\n                    this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\r\n                } else {\r\n                    this.isUsingAdvancedLoopControls = false;\r\n                    this.chipWaveLoopStart = 0;\r\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\r\n                    this.chipWaveLoopMode = 0;\r\n                    this.chipWavePlayBackwards = false;\r\n                    this.chipWaveStartOffset = 0;\r\n                }\r\n            }\r\n\t}\t\r\n           // advloop addition\r\n\r\n        public getLargestControlPointCount(forNoteFilter: boolean) {\r\n        let largest: number;\r\n        if (forNoteFilter) {\r\n            largest = this.noteFilter.controlPointCount;\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i]!.controlPointCount > largest)\r\n                    largest = this.noteSubFilters[i]!.controlPointCount;\r\n            }\r\n        }\r\n        else {\r\n            largest = this.eqFilter.controlPointCount;\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (this.eqSubFilters[i] != null && this.eqSubFilters[i]!.controlPointCount > largest)\r\n                    largest = this.eqSubFilters[i]!.controlPointCount;\r\n            }\r\n        }\r\n        return largest;\r\n    }\r\n\r\n    public static frequencyFromPitch(pitch: number): number {\r\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n    }\r\n\r\n    public addEnvelope(target: number, index: number, envelope: number): void {\r\n        let makeEmpty: boolean = false;\r\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\r\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\r\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings();\r\n        const envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\r\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\r\n        envelopeSettings.index = makeEmpty ? 0 : index;\r\n        envelopeSettings.envelope = envelope;\r\n        this.envelopeCount++;\r\n    }\r\n\r\n    public supportsEnvelopeTarget(target: number, index: number): boolean {\r\n        const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\r\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n        if (index >= automationTarget.maxCount) {\r\n            return false;\r\n        }\r\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\r\n            return false;\r\n        }\r\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\r\n            return false;\r\n        }\r\n        if (automationTarget.isFilter) {\r\n            //if (automationTarget.perNote) {\r\n            let useControlPointCount: number = this.noteFilter.controlPointCount;\r\n            if (this.noteFilterType)\r\n                useControlPointCount = 1;\r\n            if (index >= useControlPointCount) return false;\r\n            //} else {\r\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\r\n            //}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public clearInvalidEnvelopeTargets(): void {\r\n        for (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\r\n            const target: number = this.envelopes[envelopeIndex].target;\r\n            const index: number = this.envelopes[envelopeIndex].index;\r\n            if (!this.supportsEnvelopeTarget(target, index)) {\r\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\r\n                this.envelopes[envelopeIndex].index = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTransition(): Transition {\r\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\r\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\r\n    }\r\n\r\n    public getFadeInSeconds(): number {\r\n        return (this.type == InstrumentType.drumset) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\r\n    }\r\n\r\n    public getFadeOutTicks(): number {\r\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut)\r\n    }\r\n\r\n    public getChord(): Chord {\r\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\r\n    }\r\n\r\n    public getDrumsetEnvelope(pitch: number): Envelope {\r\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n    }\r\n}\r\n\r\nexport class Channel {\r\n    public octave: number = 0;\r\n    public readonly instruments: Instrument[] = [];\r\n    public readonly patterns: Pattern[] = [];\r\n    public readonly bars: number[] = [];\r\n    public muted: boolean = false;\r\n    public name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n    private static readonly _format: string = Config.jsonFormat;\r\n    private static readonly _oldestBeepboxVersion: number = 2;\r\n    private static readonly _latestBeepboxVersion: number = 9;\r\n    private static readonly _oldestJummBoxVersion: number = 1;\r\n    private static readonly _latestJummBoxVersion: number = 6;\r\n    private static readonly _oldestGoldBoxVersion: number = 1;\r\n    private static readonly _latestGoldBoxVersion: number = 4;\r\n    private static readonly _oldestUltraBoxVersion: number = 1;\r\n    private static readonly _latestUltraBoxVersion: number = 5;\r\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox, Or Goldbox. \"j\" and \"g\" respectively\r\n\t//also \"u\" is ultrabox lol\r\n    private static readonly _variant = 0x75; //\"u\" ~ ultrabox\r\n\r\n    public title: string;\r\n    public scale: number;\r\n    public scaleCustom: boolean[] = [];\r\n    public key: number;\r\n    public octave: number;\r\n    public tempo: number;\r\n    public reverb: number;\r\n    public beatsPerBar: number;\r\n    public barCount: number;\r\n    public patternsPerChannel: number;\r\n    public rhythm: number;\r\n    public layeredInstruments: boolean;\r\n    public patternInstruments: boolean;\r\n    public loopStart: number;\r\n    public loopLength: number;\r\n    public pitchChannelCount: number;\r\n    public noiseChannelCount: number;\r\n    public modChannelCount: number;\r\n    public readonly channels: Channel[] = [];\r\n    public limitDecay: number = 4.0;\r\n    public limitRise: number = 4000.0;\r\n    public compressionThreshold: number = 1.0;\r\n    public limitThreshold: number = 1.0;\r\n    public compressionRatio: number = 1.0;\r\n    public limitRatio: number = 1.0;\r\n    public masterGain: number = 1.0;\r\n    public inVolumeCap: number = 0.0;\r\n    public outVolumeCap: number = 0.0;\r\n\r\n    constructor(string?: string) {\r\n        if (string != undefined) {\r\n            this.fromBase64String(string);\r\n        } else {\r\n            this.initToDefault(true);\r\n        }\r\n    }\r\n\r\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let vol: number | undefined = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;\r\n\r\n            // For tempo, actually use user defined tempo\r\n            let tempoIndex: number = Config.modulators.dictionary[\"tempo\"].index;\r\n            if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {\r\n                vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\r\n            }\r\n\r\n            if (vol != undefined)\r\n                return vol;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n\r\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\r\n            let modulator = Config.modulators[instrument.modulators[modCount]];\r\n            let cap: number | undefined = modulator.maxRawVol;\r\n\r\n            if (cap != undefined) {\r\n                // For filters, cap is dependent on which filter setting is targeted\r\n                if (modulator.name == \"eq filter\" || modulator.name == \"note filter\") {\r\n                    // type 0: number of filter morphs\r\n                    // type 1/odd: number of filter x positions\r\n                    // type 2/even: number of filter y positions\r\n                    cap = Config.filterMorphCount - 1;\r\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\r\n                        cap = Config.filterFreqRange;\r\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\r\n                        cap = Config.filterGainRange;\r\n                    }\r\n                }\r\n                return cap;\r\n            }\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\r\n        if (!isMod)\r\n            return Config.noteSizeMax;\r\n        else {\r\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\r\n            if (cap != undefined) {\r\n\r\n                // For filters, cap is dependent on which filter setting is targeted\r\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\")) {\r\n                    // type 0: number of filter morphs\r\n                    // type 1/odd: number of filter x positions\r\n                    // type 2/even: number of filter y positions\r\n                    cap = Config.filterMorphCount - 1;\r\n                    if (filterType > 0 && filterType % 2) {\r\n                        cap = Config.filterFreqRange;\r\n                    } else if (filterType > 0) {\r\n                        cap = Config.filterGainRange;\r\n                    }\r\n                }\r\n\r\n                return cap;\r\n            }\r\n            else\r\n                return Config.noteSizeMax;\r\n        }\r\n    }\r\n\r\n    public getChannelCount(): number {\r\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n    }\r\n\r\n    public getMaxInstrumentsPerChannel(): number {\r\n        return Math.max(\r\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\r\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\r\n    }\r\n\r\n    public getMaxInstrumentsPerPattern(channelIndex: number): number {\r\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\r\n    }\r\n\r\n    public getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\r\n        return this.layeredInstruments\r\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\r\n            : 1;\r\n    }\r\n\r\n    public getChannelIsNoise(channelIndex: number): boolean {\r\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public getChannelIsMod(channelIndex: number): boolean {\r\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public initToDefault(andResetChannels: boolean = true): void {\r\n        this.scale = 0;\r\n        //this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\r\n\tthis.scaleCustom = [true, false, false, false, false, false, false, false, false, false, false, false];\r\n        this.key = 0;\r\n        this.octave = 0;\r\n        this.loopStart = 0;\r\n        this.loopLength = 4;\r\n        this.tempo = 120;\r\n        this.reverb = 0;\r\n        this.beatsPerBar = 8;\r\n        this.barCount = 16;\r\n        this.patternsPerChannel = 8;\r\n        this.rhythm = 3;\r\n        this.layeredInstruments = false;\r\n        this.patternInstruments = false;\r\n\r\n        this.title = \"Untitled\";\r\n        document.title = EditorConfig.versionDisplayName;\r\n\r\n        if (andResetChannels) {\r\n            this.pitchChannelCount = 3;\r\n            this.noiseChannelCount = 1;\r\n            this.modChannelCount = 0;\r\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n                if (this.channels.length <= channelIndex) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                const channel: Channel = this.channels[channelIndex];\r\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\r\n\r\n                for (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\r\n                    if (channel.patterns.length <= pattern) {\r\n                        channel.patterns[pattern] = new Pattern();\r\n                    } else {\r\n                        channel.patterns[pattern].reset();\r\n                    }\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\r\n                    if (channel.instruments.length <= instrument) {\r\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = Config.instrumentCountMin;\r\n\r\n                for (let bar: number = 0; bar < this.barCount; bar++) {\r\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n            this.channels.length = this.getChannelCount();\r\n        }\r\n    }\r\n\r\n    public toBase64String(): string {\r\n        let bits: BitFieldWriter;\r\n        let buffer: number[] = [];\r\n\r\n        buffer.push(Song._variant);\r\n                 //   buffer.push(base64IntToCharCode[Song._latestGoldBoxVersion]);\r\n\t\t buffer.push(base64IntToCharCode[Song._latestUltraBoxVersion]);\r\n\r\n        // Length of the song name string\r\n        buffer.push(SongTagCode.songTitle);\r\n        var encodedSongTitle: string = encodeURIComponent(this.title);\r\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n        // Actual encoded string follows\r\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n            buffer.push(encodedSongTitle.charCodeAt(i));\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\r\n                buffer.push(base64IntToCharCode[this.scaleCustom[i]?1:0]) // ineffiecent? yes, all we're going to do for now? hell yes\r\n            }\r\n        }\r\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\r\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n        // Push limiter settings, but only if they aren't the default!\r\n        buffer.push(SongTagCode.limiterSettings);\r\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n        }\r\n        else {\r\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelNames);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            // Length of the channel name string\r\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n            // Actual encoded string follows\r\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\r\n                buffer.push(encodedChannelName.charCodeAt(i));\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\r\n        if (this.layeredInstruments || this.patternInstruments) {\r\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelOctave);\r\n        for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\r\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\r\n        }\r\n\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n\r\n                buffer.push(SongTagCode.eqFilter);\r\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\r\n                if (instrument.eqFilterType) {\r\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\r\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\r\n                }\r\n                else {\r\n                    if (instrument.eqFilter == null) {\r\n                        // Push null filter settings\r\n                        buffer.push(base64IntToCharCode[0]);\r\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\r\n                    } else {\r\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\r\n                        for (let j: number = 0; j < instrument.eqFilter.controlPointCount; j++) {\r\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[j];\r\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                        }\r\n                    }\r\n\r\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                    let usingSubFilterBitfield: number = 0;\r\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\r\n                    }\r\n                    // Put subfilter usage into 2 chars (12 bits)\r\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\r\n                    // Put subfilter info in for all used subfilters\r\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                        if (usingSubFilterBitfield & (1 << j)) {\r\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1]!.controlPointCount]);\r\n                            for (let k: number = 0; k < instrument.eqSubFilters[j + 1]!.controlPointCount; k++) {\r\n                                const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[k];\r\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // The list of enabled effects is represented as a 12-bit bitfield using two six-bit characters.\r\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);\r\n                if (effectsIncludeNoteFilter(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\r\n                    if (instrument.noteFilterType) {\r\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\r\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\r\n                    }\r\n                    else {\r\n                        if (instrument.noteFilter == null) {\r\n                            // Push null filter settings\r\n                            buffer.push(base64IntToCharCode[0]);\r\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\r\n                        }\r\n                        else {\r\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\r\n                            for (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\r\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\r\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                            }\r\n                        }\r\n\r\n                        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                        let usingSubFilterBitfield: number = 0;\r\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\r\n                        }\r\n                        // Put subfilter usage into 2 chars (12 bits)\r\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\r\n                        // Put subfilter info in for all used subfilters\r\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                            if (usingSubFilterBitfield & (1 << j)) {\r\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\r\n                                for (let k: number = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\r\n                                    const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[k];\r\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (effectsIncludeTransition(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.transition]);\r\n                }\r\n                if (effectsIncludeChord(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.chord]);\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\r\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                }\r\n                if (effectsIncludePitchShift(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\r\n                }\r\n                if (effectsIncludeDetune(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\r\n                }\r\n                if (effectsIncludeVibrato(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                }\r\n                if (effectsIncludeDistortion(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\r\n                    // Aliasing is tied into distortion for now\r\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\r\n                }\r\n                if (effectsIncludeBitcrusher(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\r\n                }\r\n                if (effectsIncludePanning(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\r\n                }\r\n                if (effectsIncludeChorus(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\r\n                }\r\n                if (effectsIncludeEcho(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\r\n                }\r\n                if (effectsIncludeReverb(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\r\n                }\r\n\r\n                if (instrument.type != InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\r\n                    // Transition info follows transition song tag\r\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\r\n                    buffer.push(SongTagCode.harmonics);\r\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n                    }\r\n                    harmonicsBits.encodeBase64(buffer);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.chip) {\r\n                   \t\t\t\t\t\tif (instrument.chipWave > 186) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\r\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n\r\n\t\t\t\t\t\t// Repurposed for chip wave loop controls.\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.filterResonance);\r\n\t\t\t\t\t\t// The encoding here is as follows:\r\n\t\t\t\t\t\t// 0b11111_1\r\n\t\t\t\t\t\t//         ^-- isUsingAdvancedLoopControls\r\n\t\t\t\t\t\t//   ^^^^^---- chipWaveLoopMode\r\n\t\t\t\t\t\t// This essentially allocates 32 different loop modes,\r\n\t\t\t\t\t\t// which should be plenty.\r\n\t\t\t\t\t\tconst encodedLoopMode: number = (\r\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\r\n\t\t\t\t\t\t\t| (instrument.isUsingAdvancedLoopControls ? 1 : 0)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedLoopMode]);\r\n\t\t\t\t\t\t// The same encoding above is used here, but with the release mode\r\n\t\t\t\t\t\t// (which isn't implemented currently), and the backwards toggle.\r\n\t\t\t\t\t\tconst encodedReleaseMode: number = (\r\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, 0) << 1)\r\n\t\t\t\t\t\t\t| (instrument.chipWavePlayBackwards ? 1 : 0)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedReleaseMode]);\r\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopStart);\r\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopEnd);\r\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveStartOffset);\r\n\r\n                } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\r\n                    if (instrument.type == InstrumentType.fm) {\r\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n                    } else {\r\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm6Op]);\r\n                        if (instrument.algorithm6Op == 0) {\r\n                            buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\r\n                            buffer.push(SongTagCode.effects);\r\n                            for (let o: number = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\r\n                                for (let j: number = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\r\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\r\n                                }\r\n                                buffer.push(SongTagCode.operatorWaves);\r\n                            }\r\n                            buffer.push(SongTagCode.effects);\r\n                        }\r\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType6Op]);\r\n                        if (instrument.feedbackType6Op == 0) {\r\n                            buffer.push(SongTagCode.effects);\r\n                            for (let o: number = 0; o < instrument.customFeedbackType.indices.length; o++) {\r\n                                for (let j: number = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\r\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\r\n                                }\r\n                                buffer.push(SongTagCode.operatorWaves);\r\n                            }\r\n                            buffer.push(SongTagCode.effects);\r\n                        }\r\n                    }\r\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\r\n                    buffer.push(SongTagCode.operatorFrequencies);\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op?6:Config.operatorCount); o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorAmplitudes);\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorWaves);\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\r\n                        // Push pulse width if that type is used\r\n                        if (instrument.operators[o].waveform == 2) {\r\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\r\n                        }\r\n                    }\r\n                } else if (instrument.type == InstrumentType.customChipWave) {\r\n                    if (instrument.chipWave > 186) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\r\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                    buffer.push(SongTagCode.customChipWave);\r\n                    // Push custom wave values\r\n                    for (let j: number = 0; j < 64; j++) {\r\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.noise) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n                } else if (instrument.type == InstrumentType.spectrum) {\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.drumsetEnvelopes);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n                    }\r\n\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n                        }\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.harmonics) {\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                } else if (instrument.type == InstrumentType.pwm) {\r\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\r\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]); \r\n                } else if (instrument.type == InstrumentType.supersaw) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.supersaw, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\r\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.pickedString) {\r\n                    if (Config.stringSustainRange > 0x20 || SustainType.length > 2) {\r\n\t\t\t\t\t\tthrow new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\r\n\t\t\t\t\t}\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\r\n                } else if (instrument.type == InstrumentType.mod) {\r\n                    // Handled down below. Could be moved, but meh.\r\n                } else {\r\n                    throw new Error(\"Unknown instrument type.\");\r\n                }\r\n\r\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\r\n                // Added in JB v6: Options for envelopes come next.\r\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\r\n                buffer.push(base64IntToCharCode[+instrument.discreteEnvelope]);\r\n                for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\r\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\r\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\r\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\r\n                    }\r\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\r\n                }\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.bars);\r\n        bits = new BitFieldWriter();\r\n        let neededBits: number = 0;\r\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\r\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\r\n        }\r\n        bits.encodeBase64(buffer);\r\n\r\n        buffer.push(SongTagCode.patterns);\r\n        bits = new BitFieldWriter();\r\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\r\n        const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            const channel: Channel = this.channels[channelIndex];\r\n            const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n            const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\r\n            const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\r\n\r\n            // Some info about modulator settings immediately follows in mod channels.\r\n            if (isModChannel) {\r\n                const neededModInstrumentIndexBits: number = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\r\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n\r\n                    let instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        const modChannel: number = instrument.modChannels[mod];\r\n                        const modInstrument: number = instrument.modInstruments[mod];\r\n                        const modSetting: number = instrument.modulators[mod];\r\n                        const modFilter: number = instrument.modFilterTypes[mod];\r\n\r\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\r\n                        // 0 - For pitch/noise\r\n                        // 1 - (used to be For noise, not needed)\r\n                        // 2 - For song\r\n                        // 3 - None\r\n\r\n                        let status: number = Config.modulators[modSetting].forSong ? 2 : 0;\r\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\r\n                            status = 3;\r\n\r\n                        bits.write(2, status);\r\n\r\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                        if (status == 0 || status == 1) {\r\n                            bits.write(8, modChannel);\r\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\r\n                        }\r\n\r\n                        // Only used if setting isn't \"none\".\r\n                        if (status != 3) {\r\n                            bits.write(6, modSetting);\r\n                        }\r\n\r\n                        // Write mod filter info, only if this is a filter mod\r\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\") {\r\n                            bits.write(6, modFilter);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\r\n            let lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\r\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\r\n            const recentShapes: string[] = [];\r\n            for (let i: number = 0; i < recentPitches.length; i++) {\r\n                recentPitches[i] += octaveOffset;\r\n            }\r\n            for (const pattern of channel.patterns) {\r\n                if (this.patternInstruments) {\r\n                    const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\r\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\r\n                    for (let i: number = 0; i < instrumentCount; i++) {\r\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\r\n                    }\r\n                }\r\n\r\n                if (pattern.notes.length > 0) {\r\n                    bits.write(1, 1);\r\n\r\n                    let curPart: number = 0;\r\n                    for (const note of pattern.notes) {\r\n\r\n                        // For mod channels, a negative offset may be necessary.\r\n                        if (note.start < curPart && isModChannel) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            bits.write(1, 1); // negative offset\r\n                            bits.writePartDuration(curPart - note.start);\r\n                        }\r\n\r\n                        if (note.start > curPart) {\r\n                            bits.write(2, 0); // rest\r\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n                            bits.writePartDuration(note.start - curPart);\r\n                        }\r\n\r\n                        shapeBits.clear();\r\n\r\n                        // Old format was:\r\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n                        // New format is:\r\n                        //      0: 1 pitch\r\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                        if (note.pitches.length == 1) {\r\n                            shapeBits.write(1, 0);\r\n                        } else {\r\n                            shapeBits.write(1, 1);\r\n                            shapeBits.write(3, note.pitches.length - 2);\r\n                        }\r\n\r\n                        shapeBits.writePinCount(note.pins.length - 1);\r\n\r\n                        if (!isModChannel) {\r\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\r\n                        }\r\n                        else {\r\n                            shapeBits.write(9, note.pins[0].size); // Modulator value. 9 bits for now = 512 max mod value?\r\n                        }\r\n\r\n                        let shapePart: number = 0;\r\n                        let startPitch: number = note.pitches[0];\r\n                        let currentPitch: number = startPitch;\r\n                        const pitchBends: number[] = [];\r\n                        for (let i: number = 1; i < note.pins.length; i++) {\r\n                            const pin: NotePin = note.pins[i];\r\n                            const nextPitch: number = startPitch + pin.interval;\r\n                            if (currentPitch != nextPitch) {\r\n                                shapeBits.write(1, 1);\r\n                                pitchBends.push(nextPitch);\r\n                                currentPitch = nextPitch;\r\n                            } else {\r\n                                shapeBits.write(1, 0);\r\n                            }\r\n                            shapeBits.writePartDuration(pin.time - shapePart);\r\n                            shapePart = pin.time;\r\n                            if (!isModChannel) {\r\n                                shapeBits.write(bitsPerNoteSize, pin.size);\r\n                            } else {\r\n                                shapeBits.write(9, pin.size);\r\n                            }\r\n                        }\r\n\r\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\r\n                        if (shapeIndex == -1) {\r\n                            bits.write(2, 1); // new shape\r\n                            bits.concat(shapeBits);\r\n                        } else {\r\n                            bits.write(1, 1); // old shape\r\n                            bits.writeLongTail(0, 0, shapeIndex);\r\n                            recentShapes.splice(shapeIndex, 1);\r\n                        }\r\n                        recentShapes.unshift(shapeString);\r\n                        if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\r\n                        for (let i: number = 0; i < allPitches.length; i++) {\r\n                            const pitch: number = allPitches[i];\r\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\r\n                            if (pitchIndex == -1) {\r\n                                let interval: number = 0;\r\n                                let pitchIter: number = lastPitch;\r\n                                if (pitchIter < pitch) {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter++;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n                                    }\r\n                                } else {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter--;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n                                    }\r\n                                }\r\n                                bits.write(1, 0);\r\n                                bits.writePitchInterval(interval);\r\n                            } else {\r\n                                bits.write(1, 1);\r\n                                bits.write(4, pitchIndex);\r\n                                recentPitches.splice(pitchIndex, 1);\r\n                            }\r\n                            recentPitches.unshift(pitch);\r\n                            if (recentPitches.length > 16) recentPitches.pop();\r\n\r\n                            if (i == note.pitches.length - 1) {\r\n                                lastPitch = note.pitches[0];\r\n                            } else {\r\n                                lastPitch = pitch;\r\n                            }\r\n                        }\r\n\r\n                        if (note.start == 0) {\r\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\r\n                        }\r\n\r\n                        curPart = note.end;\r\n                    }\r\n\r\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n                        bits.write(2, 0); // rest\r\n                        if (isModChannel) bits.write(1, 0); // positive offset\r\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n                    }\r\n                } else {\r\n                    bits.write(1, 0);\r\n                }\r\n            }\r\n        }\r\n        let stringLength: number = bits.lengthBase64();\r\n        let digits: number[] = [];\r\n        while (stringLength > 0) {\r\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n            stringLength = stringLength >> 6;\r\n        }\r\n        buffer.push(base64IntToCharCode[digits.length]);\r\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n        bits.encodeBase64(buffer);\r\n\t    \r\n        const maxApplyArgs: number = 64000;\r\n\t    \t\t\t            let customSamplesStr = \"\";\r\n            if(EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0){\r\n              customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\")\r\n              \r\n          }\r\n\t\t  //samplemark\r\n        if (buffer.length < maxApplyArgs) {\r\n            // Note: Function.apply may break for long argument lists. \r\n                            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\r\n\t\t\t\t//samplemark\r\n        } else {\r\n            let result: string = \"\";\r\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n            }\r\n                          return result + customSamplesStr;\r\n\t\t\t   //samplemark\r\n        }\r\n    }\r\n\r\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\r\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\r\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\r\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\r\n    }\r\n\r\n    public fromBase64String(compressed: string, jsonFormat: string = \"auto\"): void {\r\n        if (compressed == null || compressed == \"\") {\r\n            Song._clearSamples();\r\n\r\n            this.initToDefault(true);\r\n            return;\r\n        }\r\n        let charIndex: number = 0;\r\n        // skip whitespace.\r\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n        // skip hash mark.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n        // if it starts with curly brace, treat it as JSON.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);\r\n            return;\r\n        }\r\n\r\n        const variantTest: number = compressed.charCodeAt(charIndex);\r\n        let fromBeepBox: boolean;\r\n        let fromJummBox: boolean;\r\n        let fromGoldBox: boolean;\r\n\t    let fromUltraBox: boolean;\r\n        // let fromMidbox: boolean;\r\n        // let fromDogebox2: boolean;\r\n        // let fromAbyssBox: boolean;\r\n\r\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n        if (variantTest == 0x6A) { //\"j\"\r\n            fromBeepBox = false;\r\n            fromJummBox = true;\r\n            fromGoldBox = false;\r\n\t        fromUltraBox = false;\r\n            charIndex++;\r\n        } else if (variantTest == 0x67) { //\"g\"\r\n            fromBeepBox = false;\r\n            fromJummBox = false;\r\n            fromGoldBox = true;\r\n\t        fromUltraBox = false;\r\n            charIndex++;\r\n        } else if (variantTest == 0x75) { //\"u\"\r\n                fromBeepBox = false;\r\n                fromJummBox = false;\r\n                fromGoldBox = false;\r\n\t\t        fromUltraBox = true;\r\n                charIndex++;\r\n        } else if (variantTest == 0x64) { //\"d\" \r\n                fromBeepBox = false;\r\n                fromJummBox = true;\r\n                fromGoldBox = false;\r\n\t\t        fromUltraBox = false;\r\n                // to-do: add explicit dogebox2 support\r\n                //fromDogeBox2 = true;\r\n                charIndex++;\r\n            } else {\r\n            fromBeepBox = true;\r\n            fromJummBox = false;\r\n            fromGoldBox = false;\r\n\t        fromUltraBox = false;\r\n        }\r\n\r\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion)) return;\r\n\t    if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion)) return;\r\n        const beforeTwo: boolean = version < 2;\r\n        const beforeThree: boolean = version < 3;\r\n        const beforeFour: boolean = version < 4;\r\n        const beforeFive: boolean = version < 5;\r\n        const beforeSix: boolean = version < 6;\r\n        const beforeSeven: boolean = version < 7;\r\n        const beforeEight: boolean = version < 8;\r\n        const beforeNine: boolean = version < 9;\r\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\r\n        const forceSimpleFilter: boolean = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\r\n\r\n        let willLoadLegacySamplesForOldSongs: boolean = false;\r\n\r\n        if (fromUltraBox || fromGoldBox) {\r\n            compressed = compressed.replaceAll(\"%7C\", \"|\")\r\n                var compressed_array = compressed.split(\"|\");\r\n                compressed = compressed_array.shift()!;\r\n                if(EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\r\n\r\n                    Song._restoreChipWaveListToDefault();\r\n\r\n                    let willLoadLegacySamples = false;\r\n                    let willLoadNintariboxSamples = false;\r\n                    let willLoadMarioPaintboxSamples = false;\r\n                    const customSampleUrls = [];\r\n                    const customSamplePresets: Preset[] = [];\r\n                    sampleLoadingState.statusTable = {};\r\n                    sampleLoadingState.urlTable = {};\r\n                    sampleLoadingState.totalSamples = 0;\r\n                    sampleLoadingState.samplesLoaded = 0;\r\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n                        sampleLoadingState.totalSamples,\r\n                        sampleLoadingState.samplesLoaded\r\n                    ));\r\n                    for (const url of compressed_array) {\r\n                        if (url.toLowerCase() === \"legacysamples\") {\r\n                            if (!willLoadLegacySamples) {\r\n                                willLoadLegacySamples = true;\r\n                                customSampleUrls.push(url);\r\n                                loadBuiltInSamples(0);\r\n                            }\r\n                        } \r\n                        else if (url.toLowerCase() === \"nintariboxsamples\") {\r\n                            if (!willLoadNintariboxSamples) {\r\n                                willLoadNintariboxSamples = true;\r\n                                customSampleUrls.push(url);\r\n                                loadBuiltInSamples(1);\r\n                            }\r\n                        }\r\n                        else if (url.toLowerCase() === \"mariopaintboxsamples\") {\r\n                            if (!willLoadMarioPaintboxSamples) {\r\n                                willLoadMarioPaintboxSamples = true;\r\n                                customSampleUrls.push(url);\r\n                                loadBuiltInSamples(2);\r\n                            }\r\n                        }\r\n                        \r\n                        else {\r\n                            // UB version 2 URLs and below will be using the old syntax, so we do need to parse it in that case.\r\n                            // UB version 3 URLs should only have the new syntax, though, unless the user has edited the URL manually.\r\n                            const parseOldSyntax: boolean = beforeThree;\r\n                            const ok: boolean = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\r\n                            if (!ok) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (customSampleUrls.length > 0) {\r\n                        EditorConfig.customSamples = customSampleUrls;\r\n                    }\r\n                    if (customSamplePresets.length > 0) {\r\n                        const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\r\n                        EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\r\n                            name: \"Custom Sample Presets\",\r\n                            presets: customSamplePresetsMap,\r\n                            index: EditorConfig.presetCategories.length,\r\n                        };\r\n                        // EditorConfig.presetCategories.splice(1, 0, {\r\n                             // name: \"Custom Sample Presets\",\r\n                             // presets: customSamplePresets,\r\n                             // index: EditorConfig.presetCategories.length,\r\n                        // });\r\n                    }\r\n\r\n               \r\n                }\r\n                //samplemark\r\n        }\r\n\r\n        if (beforeThree && fromBeepBox) {\r\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\r\n            for (const channel of this.channels) {\r\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\r\n                channel.instruments[0].effects |= 1 << EffectType.transition;\r\n            }\r\n            this.channels[3].instruments[0].chipNoise = 0;\r\n        }\r\n\r\n        let legacySettingsCache: LegacySettings[][] | null = null;\r\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\r\n            // filter-and-envelope-related parameters in the URL, and none of them directly\r\n            // correspond to the new way of saving these parameters. We can approximate the old\r\n            // settings by collecting all the old settings for an instrument and passing them to\r\n            // convertLegacySettings(), so I use this data structure to collect the settings\r\n            // for each instrument if necessary.\r\n            legacySettingsCache = [];\r\n            for (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\r\n                legacySettingsCache[i] = [];\r\n                for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\r\n            }\r\n        }\r\n\r\n        let legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\r\n\r\n        let instrumentChannelIterator: number = 0;\r\n        let instrumentIndexIterator: number = -1;\r\n        let command: number;\r\n        let useSlowerArpSpeed: boolean = false;\r\n        let useFastTwoNoteArp: boolean = false;\r\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n            case SongTagCode.songTitle: {\r\n                // Length of song name string\r\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n                charIndex += songNameLength;\r\n            } break;\r\n            case SongTagCode.channelCount: {\r\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                if (fromBeepBox || beforeTwo) {\r\n                    // No mod channel support before jummbox v2\r\n                    this.modChannelCount = 0;\r\n                } else {\r\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                this.channels.length = this.getChannelCount();\r\n                if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    for (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\r\n                        legacySettingsCache![i] = [];\r\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.scale: {\r\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // All the scales were jumbled around by Jummbox. Just convert to free.\r\n                if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n                    for (var i = 1; i < Config.pitchesPerOctave; i++) {\r\n                        this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1; // ineffiecent? yes, all we're going to do for now? hell yes\r\n                    }\r\n                }\r\n                if (fromBeepBox) this.scale = 0;\r\n            } break;\r\n            case SongTagCode.key: {\r\n                if (beforeSeven && fromBeepBox) {\r\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.octave = 0;\r\n                } else if (fromBeepBox || fromJummBox) {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.octave = 0;\r\n                } else if (fromGoldBox || (beforeThree && fromUltraBox)) {\r\n                    // GoldBox (so far) didn't introduce any new keys, but old\r\n                    // songs made with early versions of UltraBox share the\r\n                    // same URL format, and those can have more keys. This\r\n                    // shouldn't really result in anything other than 0-11 for\r\n                    // the key and 0 for the octave for GoldBox songs.\r\n                    const rawKeyIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const [key, octave]: [number, number] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\r\n                    this.key = key;\r\n                    this.octave = octave;\r\n                } else {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\r\n                }\r\n            } break;\r\n            case SongTagCode.loopStart: {\r\n                if (beforeFive && fromBeepBox) {\r\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n            } break;\r\n            case SongTagCode.loopEnd: {\r\n                if (beforeFive && fromBeepBox) {\r\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n            } break;\r\n            case SongTagCode.tempo: {\r\n                if (beforeFour && fromBeepBox) {\r\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n            } break;\r\n            case SongTagCode.reverb: {\r\n                if (beforeNine && fromBeepBox) {\r\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\r\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\r\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\r\n                } else {\r\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\r\n                }\r\n            } break;\r\n            case SongTagCode.beatCount: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n            } break;\r\n            case SongTagCode.barCount: {\r\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n                for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\r\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\r\n                    }\r\n                    this.channels[channelIndex].bars.length = this.barCount;\r\n                }\r\n            } break;\r\n            case SongTagCode.patternCount: {\r\n                let patternsPerChannel: number;\r\n                if (beforeEight && fromBeepBox) {\r\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                } else {\r\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\r\n                const channelCount: number = this.getChannelCount();\r\n                for (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\r\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\r\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n                        patterns[pattern] = new Pattern();\r\n                    }\r\n                    patterns.length = this.patternsPerChannel;\r\n                }\r\n            } break;\r\n            case SongTagCode.instrumentCount: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    const instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\r\n                    this.layeredInstruments = false;\r\n                    this.patternInstruments = (instrumentsPerChannel > 1);\r\n\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                        const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n\r\n                        for (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\r\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n                        }\r\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\r\n                        if (beforeSix && fromBeepBox) {\r\n                            for (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\r\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n                            }\r\n                        }\r\n\r\n                        for (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\r\n                            legacySettingsCache![channelIndex][j] = {};\r\n                        }\r\n                    }\r\n                } else {\r\n                    const instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\r\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        let instrumentCount: number = 1;\r\n                        if (this.layeredInstruments || this.patternInstruments) {\r\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\r\n                        }\r\n                        const channel: Channel = this.channels[channelIndex];\r\n                        const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n                        const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n                        for (let i: number = channel.instruments.length; i < instrumentCount; i++) {\r\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n                        }\r\n                        channel.instruments.length = instrumentCount;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.rhythm: {\r\n                if (!fromUltraBox) {\r\n\t\t\tlet newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\t\r\n\t\t\tthis.rhythm = clamp(0, Config.rhythms.length, newRhythm + 2);\r\n\t\t\tif (fromJummBox && beforeThree || fromBeepBox) {\r\n\t\t\t\tif (this.rhythm == 2 || this.rhythm == 3) {\r\n\t\t\t\t\tuseSlowerArpSpeed = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rhythm >= 2) {\r\n\t\t\t\t\tuseFastTwoNoteArp = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t}\r\n\t\t//rhythm fixes\r\n            } break;\r\n            case SongTagCode.channelOctave: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\r\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\r\n                    }\r\n                } else {\r\n                    for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\r\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    for (let channelIndex: number = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        this.channels[channelIndex].octave = 0;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.startInstrument: {\r\n                instrumentIndexIterator++;\r\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\r\n                    instrumentChannelIterator++;\r\n                    instrumentIndexIterator = 0;\r\n                }\r\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // JB before v5 had custom chip and mod before pickedString and supersaw were added. Index +2.\r\n                let instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    if (instrumentType == InstrumentType.pickedString || instrumentType == InstrumentType.supersaw) {\r\n                        instrumentType += 2;\r\n                    }\r\n                }\r\n                // Similar story here, JB before v5 had custom chip and mod before supersaw was added. Index +1.\r\n                else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive) ) {\r\n                    if (instrumentType == InstrumentType.supersaw || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.mod) {\r\n                        instrumentType += 1;\r\n                    }\r\n                }\r\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n\r\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\r\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\r\n                    instrument.aliases = true;\r\n                    instrument.distortion = 0;\r\n                    instrument.effects |= 1 << EffectType.distortion;\r\n                }\r\n                if (useSlowerArpSpeed) {\r\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n                }\r\n                if (useFastTwoNoteArp) {\r\n                    instrument.fastTwoNoteArp = true;\r\n                }\r\n\r\n                if (beforeSeven && fromBeepBox) {\r\n                    instrument.effects = 0;\r\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\r\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\r\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n                        // Enable chord if it was used.\r\n                        instrument.effects |= 1 << EffectType.chord;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.preset: {\r\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\r\n                    }\r\n                }\r\n                // Similar story, supersaw is also before custom chip (and mod, but mods can't have presets).\r\n                else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.supersaw ) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\r\n                    }\r\n                    // ultra code for 6-op fm maybe\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.mod ) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.fm6op;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.fm6op;\r\n                    }\r\n                }\r\n                // BeepBox directly tweaked \"grand piano\", but JB kept it the same. The most up to date version is now \"grand piano 3\"\r\n                if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\") ) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\")!;\r\n                }\r\n            } break;\r\n            case SongTagCode.wave: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\r\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\r\n                    // just waves, so initialize them here I guess.\r\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\r\n\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            if (channelIndex >= this.pitchChannelCount) {\r\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            } else {\r\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                    }\r\n                } else {\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == InstrumentType.noise) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\t\r\n\t\t\t\tif (fromUltraBox) {\r\n\t\t\t\t\tconst chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\r\n\t\t\t\t\tif (chipWaveCounter == 3) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else if (chipWaveCounter == 2) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else if (chipWaveCounter == 1) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t }\r\n        \t}\r\n            } break;\r\n            case SongTagCode.eqFilter: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    if (beforeSeven && fromBeepBox) {\r\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                        //const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\r\n\r\n                        if (beforeThree && fromBeepBox) {\r\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\r\n                            const legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                            legacySettings.filterResonance = 0;\r\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                        } else if (beforeSix && fromBeepBox) {\r\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\r\n                                    const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                                    if (channelIndex < this.pitchChannelCount) {\r\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                                        legacySettings.filterResonance = 0;\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                                    } else {\r\n                                        legacySettings.filterCutoff = 10;\r\n                                        legacySettings.filterResonance = 0;\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\r\n                                    }\r\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                            legacySettings.filterResonance = 0;\r\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                        }\r\n                    } else {\r\n                        const filterCutoffRange: number = 11;\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    if (fromBeepBox || typeCheck == 0) {\r\n                        instrument.eqFilterType = false;\r\n                        if (fromJummBox || fromGoldBox || fromUltraBox)\r\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\r\n                        const originalControlPointCount: number = typeCheck;\r\n                        instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\r\n                        for (let i: number = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\r\n                            instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\r\n                        }\r\n                        for (let i: number = 0; i < instrument.eqFilter.controlPointCount; i++) {\r\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[i];\r\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        for (let i: number = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\r\n                            charIndex += 3;\r\n                        }\r\n\r\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                        instrument.eqSubFilters[0] = instrument.eqFilter;\r\n                        if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox) {\r\n                            let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                                if (usingSubFilterBitfield & (1 << j)) {\r\n                                    // Number of control points\r\n                                    const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                                    if (instrument.eqSubFilters[j + 1] == null)\r\n                                        instrument.eqSubFilters[j + 1] = new FilterSettings();\r\n                                    instrument.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\r\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPoints.length; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                        instrument.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\r\n                                    }\r\n                                    for (let i: number = 0; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                        const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[i];\r\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                    }\r\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\r\n                                        charIndex += 3;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        instrument.eqFilterType = true;\r\n                        instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.filterResonance: {\r\n                if (fromUltraBox) {\r\n                    if (beforeThree) {\r\n                        // Still have to support the old and bad loop control data format written as a test, sigh.\r\n                        const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\r\n                        charIndex += sampleLoopInfoEncodedLength;\r\n                        interface SampleLoopInfo {\r\n                            isUsingAdvancedLoopControls: boolean;\r\n                            chipWaveLoopStart: number;\r\n                            chipWaveLoopEnd: number;\r\n                            chipWaveLoopMode: number;\r\n                            chipWavePlayBackwards: boolean;\r\n                            chipWaveStartOffset: number;\r\n                        }\r\n                        interface SampleLoopInfoEntry {\r\n                            channel: number;\r\n                            instrument: number;\r\n                            info: SampleLoopInfo;\r\n                        }\r\n                        const sampleLoopInfo: SampleLoopInfoEntry[] = JSON.parse(atob(sampleLoopInfoEncoded));\r\n                        for (const entry of sampleLoopInfo) {\r\n                            const channelIndex: number = entry[\"channel\"];\r\n                            const instrumentIndex: number = entry[\"instrument\"];\r\n                            const info: SampleLoopInfo = entry[\"info\"];\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n                            instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\r\n                            instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\r\n                            instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\r\n                            instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\r\n                            instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\r\n                            instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\r\n                            // @TODO: Whenever chipWaveReleaseMode is implemented, it should be set here to the default.\r\n                        }\r\n                    } else {\r\n                        // Read the new loop control data format.\r\n                        // See Song.toBase64String for details on the encodings used here.\r\n                        const encodedLoopMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const isUsingAdvancedLoopControls: boolean = Boolean(encodedLoopMode & 1);\r\n                        const chipWaveLoopMode: number = encodedLoopMode >> 1;\r\n                        const encodedReleaseMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const chipWavePlayBackwards: boolean = Boolean(encodedReleaseMode & 1);\r\n                        // const chipWaveReleaseMode: number = encodedReleaseMode >> 1;\r\n                        const chipWaveLoopStart: number = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const chipWaveLoopEnd: number = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const chipWaveStartOffset: number = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\r\n                        instrument.chipWaveLoopStart = chipWaveLoopStart;\r\n                        instrument.chipWaveLoopEnd = chipWaveLoopEnd;\r\n                        instrument.chipWaveLoopMode = chipWaveLoopMode;\r\n                        instrument.chipWavePlayBackwards = chipWavePlayBackwards;\r\n                        instrument.chipWaveStartOffset = chipWaveStartOffset;\r\n                        // instrument.chipWaveReleaseMode = chipWaveReleaseMode;\r\n                    }\r\n                }\r\n                else if (fromGoldBox && !beforeFour && beforeSix) {\r\n                    if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\r\n                            if (!willLoadLegacySamplesForOldSongs) {\r\n                                willLoadLegacySamplesForOldSongs = true;\r\n                                Config.willReloadForCustomSamples = true;\r\n                                EditorConfig.customSamples = [\"legacySamples\"];\r\n                                loadBuiltInSamples(0);\r\n                            }\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\t\t\t\t\t\t\r\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    const filterResonanceRange: number = 8;\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.drumsetEnvelopes: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)){\r\n\r\n                    }\r\n                    if (instrument.type == InstrumentType.drumset) {\r\n                        for (let i: number = 0; i < Config.drumCount; i++) {\r\n                            let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\r\n                        }\r\n                    } else {\r\n                        // This used to be used for general filter envelopes.\r\n                        // The presence of an envelope affects how convertLegacySettings\r\n                        // decides the closest possible approximation, so update it.\r\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\r\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                    }\r\n                } else {\r\n                    // This tag is now only used for drumset filter envelopes.\r\n                    for (let i: number = 0; i < Config.drumCount; i++) {\r\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.pulseWidth: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                if (fromBeepBox) {\r\n                    // BeepBox formula\r\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\r\n\r\n                }\r\n\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                }\r\n\r\n                if (fromUltraBox && !beforeFour) {\r\n                    instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.stringSustain: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const sustainValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tinstrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\r\n\t\t\t\tinstrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, SustainType.length, sustainValue >> 5) : SustainType.bright;\r\n            } break;\r\n            case SongTagCode.fadeInOut: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    // this tag was used for a combination of transition and fade in/out.\r\n                    const legacySettings = [\r\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\r\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    ];\r\n                    if (beforeThree && fromBeepBox) {\r\n                        const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    } else if (beforeSix && fromBeepBox) {\r\n                        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                            for (const instrument of this.channels[channelIndex].instruments) {\r\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                                    // Enable transition if it was used.\r\n                                    instrument.effects |= 1 << EffectType.transition;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if ((beforeFour && !fromGoldBox && !fromUltraBox) || fromBeepBox) {\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    } else {\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n\r\n                        // Read tie-note \r\n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\r\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\r\n                            instrument.legacyTieOver = true;\r\n\r\n                        }\r\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    if (fromJummBox||fromGoldBox||fromUltraBox)\r\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                }\r\n            } break;\r\n            case SongTagCode.vibrato: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    if (beforeSeven && fromBeepBox) {\r\n                        if (beforeThree && fromBeepBox) {\r\n                            const legacyEffects: number[] = [0, 3, 2, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\r\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                // Imitate the legacy tremolo with a filter envelope.\r\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                            }\r\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                // Enable vibrato if it was used.\r\n                                instrument.effects |= 1 << EffectType.vibrato;\r\n                            }\r\n                        } else if (beforeSix && fromBeepBox) {\r\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\r\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\r\n                                    instrument.vibrato = legacyEffects[effect];\r\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                        // Imitate the legacy tremolo with a filter envelope.\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                                    }\r\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                        // Enable vibrato if it was used.\r\n                                        instrument.effects |= 1 << EffectType.vibrato;\r\n                                    }\r\n                                    if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\r\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\r\n                                        instrument.effects |= 1 << EffectType.reverb;\r\n                                        instrument.reverb = legacyGlobalReverb;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                // Imitate the legacy tremolo with a filter envelope.\r\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                            }\r\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                // Enable vibrato if it was used.\r\n                                instrument.effects |= 1 << EffectType.vibrato;\r\n                            }\r\n                            if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\r\n                                instrument.effects |= 1 << EffectType.reverb;\r\n                                instrument.reverb = legacyGlobalReverb;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibrato = vibrato;\r\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                            // Enable vibrato if it was used.\r\n                            instrument.effects |= 1 << EffectType.vibrato;\r\n                        }\r\n                        // Custom vibrato\r\n                        if (vibrato == Config.vibratos.length) {\r\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\r\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\r\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.effects |= 1 << EffectType.vibrato;\r\n                        }\r\n                        // Enforce standard vibrato settings\r\n                        else {\r\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                            instrument.vibratoSpeed = 10; // Normal speed\r\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\r\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.arpeggioSpeed: {\r\n                // Deprecated, but supported for legacy purposes\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n                }\r\n                else {\r\n                    // Do nothing, deprecated for now\r\n                }\r\n            } break;\r\n            case SongTagCode.unison: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            let unison: number = clamp(0, Config.unisons.length, originalValue);\r\n                            if (originalValue == 8) {\r\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                                unison = 2;\r\n                                instrument.chord = 3;\r\n                            }\r\n                            instrument.unison = unison;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    let unison: number = clamp(0, Config.unisons.length, originalValue);\r\n                    if (originalValue == 8) {\r\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                        unison = 2;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;\r\n                } else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                \r\n                if ((fromUltraBox && !beforeFive) && (instrument.unison == Config.unisons.length))  {\r\n                // if (instrument.unison == Config.unisons.length) {\r\n                    instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const unisonSpread: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\r\n\r\n                    const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const unisonOffset: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\r\n\r\n                    const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const unisonExpression: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\r\n                    \r\n                    const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const unisonSign: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\r\n\r\n\r\n                    instrument.unisonSpread = unisonSpread / 1000;\r\n                    if (unisonSpreadNegative == 0) instrument.unisonSpread *= -1;\r\n\r\n                    instrument.unisonOffset = unisonOffset / 1000;\r\n                    if (unisonOffsetNegative == 0) instrument.unisonOffset *= -1;\r\n\r\n                    instrument.unisonExpression = unisonExpression / 1000;\r\n                    if (unisonExpressionNegative == 0) instrument.unisonExpression *= -1;\r\n\r\n                    instrument.unisonSign = unisonSign / 1000;\r\n                    if (unisonSignNegative == 0) instrument.unisonSign *= -1;\r\n                } else {\r\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\r\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\r\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\r\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\r\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\r\n                }\r\n            \r\n            } break;\r\n            case SongTagCode.chord: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n                        // Enable chord if it was used.\r\n                        instrument.effects |= 1 << EffectType.chord;\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.effects: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\r\n                    if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                        // Disable reverb if legacy song reverb was zero.\r\n                        instrument.effects &= ~(1 << EffectType.reverb);\r\n                    } else if (effectsIncludeReverb(instrument.effects)) {\r\n                        instrument.reverb = legacyGlobalReverb;\r\n                    }\r\n                    // @jummbus - Enabling pan effect on song import no matter what to make it a default.\r\n                    //if (instrument.pan != Config.panCenter) {\r\n                    instrument.effects |= 1 << EffectType.panning;\r\n                    //}\r\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                        // Enable vibrato if it was used.\r\n                        instrument.effects |= 1 << EffectType.vibrato;\r\n                    }\r\n                    if (instrument.detune != Config.detuneCenter) {\r\n                        // Enable detune if it was used.\r\n                        instrument.effects |= 1 << EffectType.detune;\r\n                    }\r\n                    if (instrument.aliases)\r\n                        instrument.effects |= 1 << EffectType.distortion;\r\n                    else\r\n                        instrument.effects &= ~(1 << EffectType.distortion);\r\n\r\n                    // convertLegacySettings may need to force-enable note filter, call\r\n                    // it again here to make sure that this override takes precedence.\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    // BeepBox currently uses two base64 characters at 6 bits each for a bitfield representing all the enabled effects.\r\n                    if (EffectType.length > 12) throw new Error();\r\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                    if (effectsIncludeNoteFilter(instrument.effects)) {\r\n                        let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if (fromBeepBox || typeCheck == 0) {\r\n                            instrument.noteFilterType = false;\r\n                            if (fromJummBox || fromGoldBox || fromUltraBox)\r\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next index in jummbox to get actual count\r\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\r\n                            for (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\r\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\r\n                            }\r\n                            for (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\r\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\r\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            }\r\n                            for (let i: number = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\r\n                                charIndex += 3;\r\n                            }\r\n\r\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\r\n                            if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox)) {\r\n                                let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                                    if (usingSubFilterBitfield & (1 << j)) {\r\n                                        // Number of control points\r\n                                        const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                                        if (instrument.noteSubFilters[j + 1] == null)\r\n                                            instrument.noteSubFilters[j + 1] = new FilterSettings();\r\n                                        instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\r\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                            instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\r\n                                        }\r\n                                        for (let i: number = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                            const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[i];\r\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        }\r\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\r\n                                            charIndex += 3;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            instrument.noteFilterType = true;\r\n                            instrument.noteFilter.reset();\r\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                        }\r\n                    }\r\n                    if (effectsIncludeTransition(instrument.effects)) {\r\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeChord(instrument.effects)) {\r\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\r\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox||fromGoldBox||fromUltraBox)) {\r\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                        }\r\n                    }\r\n                    if (effectsIncludePitchShift(instrument.effects)) {\r\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeDetune(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // Convert from BeepBox's formula\r\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\r\n                        } else {\r\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                    if (effectsIncludeVibrato(instrument.effects)) {\r\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                        // Custom vibrato\r\n                        if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox)) {\r\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        // Enforce standard vibrato settings\r\n                        else {\r\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                            instrument.vibratoSpeed = 10; // Normal speed\r\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\r\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                        }\r\n                    }\r\n                    if (effectsIncludeDistortion(instrument.effects)) {\r\n                        instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox)\r\n                            instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                    }\r\n                    if (effectsIncludeBitcrusher(instrument.effects)) {\r\n                        instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludePanning(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                            instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n                        }\r\n                        else {\r\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n\r\n                        // Now, pan delay follows on new versions of jummbox.\r\n                        if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox)\r\n                            instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    }\r\n                    if (effectsIncludeChorus(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // BeepBox has 4 chorus values vs. JB's 8\r\n                            instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\r\n                        }\r\n                        else {\r\n                            instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                    if (effectsIncludeEcho(instrument.effects)) {\r\n                        instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeReverb(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\r\n                        } else {\r\n                            instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                }\r\n                // Clamp the range.\r\n                instrument.effects &= (1 << EffectType.length) - 1;\r\n            } break;\r\n            case SongTagCode.volume: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (fromBeepBox) {\r\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n                }\r\n            } break;\r\n            case SongTagCode.pan: {\r\n                if (beforeNine && fromBeepBox) {\r\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\r\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    // Pan delay follows on v3 + v4\r\n                    if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox) {\r\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.detune: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\r\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\r\n                    instrument.effects |= 1 << EffectType.detune;\r\n                } else {\r\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\r\n                }\r\n            } break;\r\n            case SongTagCode.customChipWave: {\r\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // Pop custom wave values\r\n                for (let j: number = 0; j < 64; j++) {\r\n                    instrument.customChipWave[j]\r\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    sum += instrument.customChipWave[i];\r\n                }\r\n                const average: number = sum / instrument.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = instrument.customChipWave[i] - average;\r\n                    instrument.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                instrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n            } break;\r\n            case SongTagCode.limiterSettings: {\r\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                // Check if limiter settings are used... if not, restore to default\r\n                if (nextValue == 0x3f) {\r\n                    this.restoreLimiterDefaults();\r\n                }\r\n                else {\r\n                    // Limiter is used, grab values\r\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n                }\r\n            } break;\r\n            case SongTagCode.channelNames: {\r\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n                    var channelNameLength;\r\n                    if (beforeFour && !fromGoldBox && !fromUltraBox)\r\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n                    else\r\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n                    charIndex += channelNameLength;\r\n                }\r\n            } break;\r\n            case SongTagCode.algorithm: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.fm) {\r\n                    instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\r\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.chord) {\r\n                        let carrierCountTemp = clamp(1, Config.operatorCount + 2+1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\r\n                        charIndex++\r\n                        let tempModArray: number[][] = [];\r\n                        if (compressed.charCodeAt(charIndex+1) == SongTagCode.effects) {\r\n                            charIndex++\r\n                            let j: number = 0;\r\n                            charIndex++\r\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\r\n                                tempModArray[j] = [];\r\n                                let o: number = 0;\r\n                                while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\r\n                                    tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\r\n                                    o++\r\n                                    charIndex++\r\n                                }\r\n                                j++;\r\n                                charIndex++\r\n                            }\r\n                            instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\r\n                            charIndex++; //????\r\n                        }\r\n                    }\r\n                }\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                }\r\n            } break;\r\n            case SongTagCode.supersaw: {\r\n                if (fromGoldBox && !beforeFour && beforeSix) {\r\n                    //is it more useful to save base64 characters or url length?\r\n                    const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    if ((chipWaveForCompat + 62) > 85) {\r\n                        if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\r\n                            if (!willLoadLegacySamplesForOldSongs) {\r\n                                willLoadLegacySamplesForOldSongs = true;\r\n                                Config.willReloadForCustomSamples = true;\r\n                                EditorConfig.customSamples = [\"legacySamples\"];\r\n                                loadBuiltInSamples(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    if ((chipWaveForCompat + 62) > 78) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\t\r\n                    }\r\n                    else if ((chipWaveForCompat + 62) > 67) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\t\r\n                    }\r\n                    else if ((chipWaveForCompat + 62) == 67) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\t\r\n                    }\r\n                    else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\t\t\t\r\n                    }\t\t\t\t\t\t\t\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n\t\t\t} break;\r\n            case SongTagCode.feedbackType: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.fm) {\r\n                    instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\r\n                    let tempModArray: number[][] = [];\r\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.effects) {\r\n                        let j: number = 0;\r\n                        charIndex++\r\n                        while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\r\n                            tempModArray[j] = [];\r\n                            let o: number = 0;\r\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\r\n                                tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\r\n                                o++\r\n                                charIndex++\r\n                            }\r\n                            j++;\r\n                            charIndex++\r\n                        }\r\n                        instrument.customFeedbackType.set(tempModArray);\r\n                        charIndex++; //???? weirdly needs to skip the end character or it'll use that next loop instead of like just moving to the next one itself\r\n                    }\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.feedbackAmplitude: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackEnvelope: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    \r\n                    let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorFrequencies: {\r\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            if (beforeThree && fromGoldBox) {\r\n\t\t\t\t\t\t\t\tconst freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\r\n                               \r\n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                                    instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\telse if (!fromGoldBox && !fromUltraBox) {\r\n\t\t\t\t\t\t\t\tconst freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                                    instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                                }\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n                            else {\r\n                                for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                                    instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                }\r\n                            }\r\n            } break;\r\n            case SongTagCode.operatorAmplitudes: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                    instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.envelopes: {\r\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                const jummToUltraEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.operatorEnvelopes = [];\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa];\r\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\r\n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\r\n                    }\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    const envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    // JB v6 adds some envelope options here in the sequence.\r\n                    if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive)) {\r\n                        instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.discreteEnvelope = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                    }\r\n                    for (let i: number = 0; i < envelopeCount; i++) {\r\n                        const target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        let index: number = 0;\r\n                        const maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\r\n                        if (maxCount > 1) {\r\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa]; \r\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\r\n                        const envelope: number = clamp(0, Config.envelopes.length, aa);\r\n                        instrument.addEnvelope(target, index, envelope);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorWaves: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if (beforeThree && fromGoldBox) {\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\r\n                        const old: number = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        if (old == 3) {\r\n                            instrument.operators[o].pulseWidth = 5;\r\n                        } else if (old == 4) {\r\n                            instrument.operators[o].pulseWidth = 4;\r\n                        } else if (old == 5) {\r\n                            instrument.operators[o].pulseWidth = 6;\r\n                        }\r\n                        instrument.operators[o].waveform = pre3To3g[old];\r\n                    }\r\n                } else {\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        if (fromJummBox) {\r\n                            const jummToG = [0, 1, 3, 2, 4, 5];\r\n                            instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        } else {\r\n                            instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        // Pulse width follows, if it is a pulse width operator wave\r\n                        if (instrument.operators[o].waveform == 2) {\r\n                            instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.spectrum: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.spectrum) {\r\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                    }\r\n                    instrument.spectrumWave.markCustomWaveDirty();\r\n                    charIndex += byteCount;\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                        }\r\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n                    }\r\n                    charIndex += byteCount;\r\n                } else {\r\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n                }\r\n            } break;\r\n            case SongTagCode.harmonics: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n                }\r\n                instrument.harmonicsWave.markCustomWaveDirty();\r\n                charIndex += byteCount;\r\n            } break;\r\n            case SongTagCode.aliases: {\r\n                if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                    if (instrument.aliases) {\r\n                        instrument.distortion = 0;\r\n                        instrument.effects |= 1 << EffectType.distortion;\r\n                    }\r\n                } else {\r\n                    if (fromUltraBox) {\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];  \r\n                        instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            }\r\n                break;\r\n            case SongTagCode.bars: {\r\n                let subStringLength: number;\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    subStringLength = Math.ceil(barCount * 0.5);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let i: number = 0; i < barCount; i++) {\r\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\r\n                    }\r\n                } else if (beforeFive && fromBeepBox) {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\r\n                        }\r\n                    }\r\n                }\r\n                charIndex += subStringLength;\r\n            } break;\r\n            case SongTagCode.patterns: {\r\n                let bitStringLength: number = 0;\r\n                let channelIndex: number;\r\n                let largerChords: boolean = !((beforeFour && fromJummBox) || fromBeepBox);\r\n                let recentPitchBitLength: number = (largerChords ? 4 : 3);\r\n                let recentPitchLength: number = (largerChords ? 16 : 8);\r\n                if (beforeThree && fromBeepBox) {\r\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \r\n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    bitStringLength = bitStringLength << 6;\r\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    channelIndex = 0;\r\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    while (bitStringLengthLength > 0) {\r\n                        bitStringLength = bitStringLength << 6;\r\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        bitStringLengthLength--;\r\n                    }\r\n                }\r\n\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n                charIndex += bitStringLength;\r\n\r\n                const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\r\n                let songReverbChannel: number = -1;\r\n                let songReverbInstrument: number = -1;\r\n                let songReverbIndex: number = -1;\r\n\r\n                while (true) {\r\n                    const channel: Channel = this.channels[channelIndex];\r\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n                    const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n\r\n                    const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\r\n                    const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\r\n\r\n                    const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\r\n\r\n                    // Some info about modulator settings immediately follows in mod channels.\r\n                    if (isModChannel) {\r\n                        let jumfive: boolean = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)\r\n\r\n                        // 2 more indices for 'all' and 'active'\r\n                        const neededModInstrumentIndexBits: number = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\r\n\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n\r\n                            let instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\r\n                                // 0 - For pitch/noise\r\n                                // 1 - (used to be For noise, not needed)\r\n                                // 2 - For song\r\n                                // 3 - None\r\n                                let status: number = bits.read(2);\r\n\r\n                                switch (status) {\r\n                                    case 0: // Pitch\r\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\r\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\r\n                                        break;\r\n                                    case 1: // Noise\r\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\r\n                                        instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\r\n                                        break;\r\n                                    case 2: // For song\r\n                                        instrument.modChannels[mod] = -1;\r\n                                        break;\r\n                                    case 3: // None\r\n                                        instrument.modChannels[mod] = -2;\r\n                                        break;\r\n                                }\r\n\r\n                                // Mod setting is only used if the status isn't \"none\".\r\n                                if (status != 3) {\r\n                                    instrument.modulators[mod] = bits.read(6);\r\n                                }\r\n\r\n                                if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\")) {\r\n                                    instrument.modFilterTypes[mod] = bits.read(6);\r\n                                }\r\n\r\n                                if (jumfive && instrument.modChannels[mod] >= 0) {\r\n                                    let forNoteFilter: boolean = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\r\n\r\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\r\n                                    if (instrument.modulators[mod] == 7) {\r\n                                        // Legacy filter cut index\r\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\r\n\r\n                                        if (forNoteFilter) {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\r\n                                        }\r\n                                        else {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\r\n                                        }\r\n\r\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\r\n\r\n                                    }\r\n                                    else if (instrument.modulators[mod] == 8) {\r\n                                        // Legacy filter peak index\r\n                                        if (forNoteFilter) {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\r\n                                        }\r\n                                        else {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\r\n                                        }\r\n\r\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\r\n                                    }\r\n                                }\r\n                                else if (jumfive) {\r\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\r\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\r\n                                        songReverbChannel = channelIndex;\r\n                                        songReverbInstrument = instrumentIndex;\r\n                                        songReverbIndex = mod;\r\n                                    }\r\n                                }\r\n\r\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\r\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\r\n                                // keeping the mod invalid is better since it preserves the state.\r\n                                if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\r\n                                    this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\r\n                    const detuneScaleNotes: number[][] = [];\r\n                    for (let j: number = 0; j < channel.instruments.length; j++) {\r\n                        detuneScaleNotes[j] = [];\r\n                        for (let i: number = 0; i < Config.modCount; i++) {\r\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour&&fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\r\n                        }\r\n                    }\r\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\r\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\r\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\r\n                    const recentShapes: any[] = [];\r\n                    for (let i: number = 0; i < recentPitches.length; i++) {\r\n                        recentPitches[i] += octaveOffset;\r\n                    }\r\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                        const newPattern: Pattern = channel.patterns[i];\r\n\r\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\r\n                            newPattern.instruments.length = 1;\r\n                        } else {\r\n                            if (this.patternInstruments) {\r\n                                const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\r\n                                for (let j: number = 0; j < instrumentCount; j++) {\r\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\r\n                                }\r\n                                newPattern.instruments.length = instrumentCount;\r\n                            } else {\r\n                                newPattern.instruments[0] = 0;\r\n                                newPattern.instruments.length = Config.instrumentCountMin;\r\n                            }\r\n                        }\r\n\r\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\r\n                            newPattern.notes.length = 0;\r\n                            continue;\r\n                        }\r\n\r\n                        let curPart: number = 0;\r\n                        const newNotes: Note[] = newPattern.notes;\r\n                        let noteCount: number = 0;\r\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n                            const useOldShape: boolean = bits.read(1) == 1;\r\n                            let newNote: boolean = false;\r\n                            let shapeIndex: number = 0;\r\n                            if (useOldShape) {\r\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n                            } else {\r\n                                newNote = bits.read(1) == 1;\r\n                            }\r\n\r\n                            if (!useOldShape && !newNote) {\r\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n                                if (isModChannel) {\r\n                                    const isBackwards: boolean = bits.read(1) == 1;\r\n                                    const restLength: number = bits.readPartDuration();\r\n                                    if (isBackwards) {\r\n                                        curPart -= restLength;\r\n                                    }\r\n                                    else {\r\n                                        curPart += restLength;\r\n                                    }\r\n                                } else {\r\n                                    const restLength: number = (beforeSeven && fromBeepBox)\r\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                        : bits.readPartDuration();\r\n                                    curPart += restLength;\r\n\r\n                                }\r\n                            } else {\r\n                                let shape: any;\r\n                                if (useOldShape) {\r\n                                    shape = recentShapes[shapeIndex];\r\n                                    recentShapes.splice(shapeIndex, 1);\r\n                                } else {\r\n                                    shape = {};\r\n\r\n                                    if (!largerChords) {\r\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n                                        shape.pitchCount = 1;\r\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n                                    }\r\n                                    else {\r\n                                        // New format is:\r\n                                        //      0: 1 pitch\r\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                                        if (bits.read(1) == 1) {\r\n                                            shape.pitchCount = bits.read(3) + 2;\r\n                                        }\r\n                                        else {\r\n                                            shape.pitchCount = 1;\r\n                                        }\r\n                                    }\r\n\r\n                                    shape.pinCount = bits.readPinCount();\r\n                                    if (fromBeepBox) {\r\n                                        shape.initialSize = bits.read(2) * 2;\r\n                                    } else if (!isModChannel) {\r\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\r\n                                    } else {\r\n                                        shape.initialSize = bits.read(9);\r\n                                    }\r\n\r\n                                    shape.pins = [];\r\n                                    shape.length = 0;\r\n                                    shape.bendCount = 0;\r\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\r\n                                        let pinObj: any = {};\r\n                                        pinObj.pitchBend = bits.read(1) == 1;\r\n                                        if (pinObj.pitchBend) shape.bendCount++;\r\n                                        shape.length += (beforeSeven && fromBeepBox)\r\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                            : bits.readPartDuration();\r\n                                        pinObj.time = shape.length;\r\n                                        if (fromBeepBox) {\r\n                                            pinObj.size = bits.read(2) * 2;\r\n                                        } else if (!isModChannel) {\r\n                                            pinObj.size = bits.read(bitsPerNoteSize);\r\n                                        }\r\n                                        else {\r\n                                            pinObj.size = bits.read(9);\r\n                                        }\r\n                                        shape.pins.push(pinObj);\r\n                                    }\r\n                                }\r\n                                recentShapes.unshift(shape);\r\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\r\n\r\n                                let note: Note;\r\n                                if (newNotes.length <= noteCount) {\r\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\r\n                                    newNotes[noteCount++] = note;\r\n                                } else {\r\n                                    note = newNotes[noteCount++];\r\n                                    note.start = curPart;\r\n                                    note.end = curPart + shape.length;\r\n                                    note.pins[0].size = shape.initialSize;\r\n                                }\r\n\r\n                                let pitch: number;\r\n                                let pitchCount: number = 0;\r\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\r\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n                                    const useOldPitch: boolean = bits.read(1) == 1;\r\n                                    if (!useOldPitch) {\r\n                                        const interval: number = bits.readPitchInterval();\r\n                                        pitch = lastPitch;\r\n                                        let intervalIter: number = interval;\r\n                                        while (intervalIter > 0) {\r\n                                            pitch++;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\r\n                                            intervalIter--;\r\n                                        }\r\n                                        while (intervalIter < 0) {\r\n                                            pitch--;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\r\n                                            intervalIter++;\r\n                                        }\r\n                                    } else {\r\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n                                        pitch = recentPitches[pitchIndex];\r\n                                        recentPitches.splice(pitchIndex, 1);\r\n                                    }\r\n\r\n                                    recentPitches.unshift(pitch);\r\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n                                    if (j < shape.pitchCount) {\r\n                                        note.pitches[pitchCount++] = pitch;\r\n                                    } else {\r\n                                        pitchBends.push(pitch);\r\n                                    }\r\n\r\n                                    if (j == shape.pitchCount - 1) {\r\n                                        lastPitch = note.pitches[0];\r\n                                    } else {\r\n                                        lastPitch = pitch;\r\n                                    }\r\n                                }\r\n                                note.pitches.length = pitchCount;\r\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\r\n                                if (isModChannel) {\r\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\r\n                                }\r\n                                let pinCount: number = 1;\r\n                                for (const pinObj of shape.pins) {\r\n                                    if (pinObj.pitchBend) pitchBends.shift();\r\n\r\n                                    const interval: number = pitchBends[0] - note.pitches[0];\r\n                                    if (note.pins.length <= pinCount) {\r\n                                        if (isModChannel) {\r\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]]);\r\n                                        } else {\r\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\r\n                                        }\r\n                                    } else {\r\n                                        const pin: NotePin = note.pins[pinCount++];\r\n                                        pin.interval = interval;\r\n                                        pin.time = pinObj.time;\r\n                                        if (isModChannel) {\r\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\r\n                                        } else {\r\n                                            pin.size = pinObj.size;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                note.pins.length = pinCount;\r\n\r\n                                if (note.start == 0) {\r\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)||(beforeFour&&fromGoldBox))) {\r\n                                        note.continuesLastPattern = (bits.read(1) == 1);\r\n                                    } else {\r\n                                        if ((beforeFour && !fromUltraBox) || fromBeepBox) {\r\n                                            note.continuesLastPattern = false;\r\n                                        } else {\r\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n                            }\r\n                        }\r\n                        newNotes.length = noteCount;\r\n                    }\r\n\r\n                    if (beforeThree && fromBeepBox) {\r\n                        break;\r\n                    } else {\r\n                        channelIndex++;\r\n                        if (channelIndex >= this.getChannelCount()) break;\r\n                    }\r\n                } // while (true)\r\n\r\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\r\n                if (((fromJummBox && beforeFive)||(beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.channels.length; channelIndex++) {\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n                            if (effectsIncludeReverb(instrument.effects)) {\r\n                                instrument.reverb = Config.reverbRange - 1;\r\n                            }\r\n                            // Set song reverb via mod to the old setting at song start.\r\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\r\n                                const patternIndex: number = this.channels[channelIndex].bars[0];\r\n                                if (patternIndex > 0) {\r\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\r\n                                    // Add note to start of pattern\r\n                                    const pattern: Pattern = this.channels[channelIndex].patterns[patternIndex - 1];\r\n                                    let lowestPart: number = 6;\r\n                                    for (const note of pattern.notes) {\r\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\r\n                                            lowestPart = Math.min(lowestPart, note.start);\r\n                                        }\r\n                                    }\r\n\r\n                                    if (lowestPart > 0) {\r\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // Add pattern\r\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\r\n                                        const pattern: Pattern = new Pattern();\r\n                                        this.channels[channelIndex].patterns.push(pattern);\r\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\r\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\r\n                                            for (let chn: number = 0; chn < this.channels.length; chn++) {\r\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\r\n                                                    this.channels[chn].patterns.push(new Pattern());\r\n                                                }\r\n                                            }\r\n                                            this.patternsPerChannel++;\r\n                                        }\r\n                                        pattern.instruments.length = 1;\r\n                                        pattern.instruments[0] = songReverbInstrument;\r\n                                        pattern.notes.length = 0;\r\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } break;\r\n            default: {\r\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(/*charIndex - 2*/0, charIndex));\r\n            } break;\r\n        }\r\n\r\n        if (Config.willReloadForCustomSamples) {\r\n            window.location.hash = this.toBase64String();\r\n            setTimeout(() => { location.reload(); }, 50);\r\n        }\r\n    }\r\n\r\n    private static _isProperUrl(string: string): boolean {\r\n        try { \r\n            if (OFFLINE) {\r\n                return Boolean(string); \r\n            } else {\r\n                return Boolean(new URL(string)); \r\n            }\r\n        }\r\n        catch(x){ \r\n            return false; \r\n        }\r\n    }\r\n\r\n    // @TODO: Share more of this code with AddSamplesPrompt.\r\n    private static _parseAndConfigureCustomSample(url: string, customSampleUrls: string[], customSamplePresets: Preset[], sampleLoadingState: SampleLoadingState, parseOldSyntax: boolean): boolean {\r\n        const defaultIndex: number = 0;\r\n        const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\r\n        const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\r\n\r\n        const customSampleUrlIndex: number = customSampleUrls.length;\r\n        customSampleUrls.push(url);\r\n        // This depends on `Config.chipWaves` being the same\r\n        // length as `Config.rawRawChipWaves`.\r\n        const chipWaveIndex: number = Config.chipWaves.length;\r\n\r\n        let urlSliced: string = url;\r\n\r\n        let customSampleRate: number = 44100;\r\n        let isCustomPercussive: boolean = false;\r\n        let customRootKey: number = 60;\r\n        let presetIsUsingAdvancedLoopControls: boolean = false;\r\n        let presetChipWaveLoopStart: number | null = null;\r\n        let presetChipWaveLoopEnd: number | null = null;\r\n        let presetChipWaveStartOffset: number | null = null;\r\n        let presetChipWaveLoopMode: number | null = null;\r\n        let presetChipWavePlayBackwards: boolean = false;\r\n\r\n        let parsedSampleOptions: boolean = false;\r\n        let optionsStartIndex: number = url.indexOf(\"!\");\r\n        let optionsEndIndex: number = -1;\r\n        if (optionsStartIndex === 0) {\r\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\r\n            if (optionsEndIndex !== -1) {\r\n                const rawOptions: string[] = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\r\n                for (const rawOption of rawOptions) {\r\n                    const optionCode: string = rawOption.charAt(0);\r\n                    const optionData: string = rawOption.slice(1, rawOption.length);\r\n                    if (optionCode === \"s\") {\r\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\r\n                    } else if (optionCode === \"r\") {\r\n                        customRootKey = parseFloatWithDefault(optionData, 60);\r\n                    } else if (optionCode === \"p\") {\r\n                        isCustomPercussive = true;\r\n                    } else if (optionCode === \"a\") {\r\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveLoopStart != null) {\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"b\") {\r\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveLoopEnd != null) {\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"c\") {\r\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveStartOffset != null) {\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"d\") {\r\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveLoopMode != null) {\r\n                            // @TODO: Error-prone. This should be automatically\r\n                            // derived from the list of available loop modes.\r\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"e\") {\r\n                        presetChipWavePlayBackwards = true;\r\n                        presetIsUsingAdvancedLoopControls = true;\r\n                    }\r\n                }\r\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\r\n                parsedSampleOptions = true;\r\n            }\r\n        }\r\n\r\n        let parsedUrl: URL | string | null = null;\r\n        if (Song._isProperUrl(urlSliced)) {\r\n            if (OFFLINE) {\r\n                parsedUrl = urlSliced;\r\n            } else {\r\n                parsedUrl = new URL(urlSliced);\r\n            }\r\n        }\r\n        else {\r\n            alert(url + \" is not a valid url\");\r\n            return false;\r\n        }\r\n\r\n        if (parseOldSyntax) {\r\n            if (!parsedSampleOptions && parsedUrl != null) {\r\n                if (url.indexOf(\"@\") != -1) {\r\n                    //urlSliced = url.slice(url.indexOf(\"@\"), url.indexOf(\"@\"));\r\n                    urlSliced = url.replaceAll(\"@\", \"\")\r\n                    if (OFFLINE) {\r\n                        parsedUrl = urlSliced;\r\n                    } else {\r\n                        parsedUrl = new URL(urlSliced);\r\n                    }\r\n                    isCustomPercussive = true;\t\r\n                }\t\r\n\r\n                function sliceForSampleRate() {\r\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\r\n                    if (OFFLINE) {\r\n                        parsedUrl = urlSliced;\r\n                    } else {\r\n                        parsedUrl = new URL(urlSliced);\r\n                    }\r\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\r\n                    //should this be parseFloat or parseInt?\r\n                    //ig floats let you do decimals and such, but idk where that would be useful\r\n                }\r\n\r\n                function sliceForRootKey() {\r\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\r\n                    if (OFFLINE) {\r\n                        parsedUrl = urlSliced;\r\n                    } else {\r\n                        parsedUrl = new URL(urlSliced);\r\n                    }\r\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\r\n                }\r\n\r\n\r\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\r\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\r\n                        sliceForRootKey();\r\n                        sliceForSampleRate();\r\n                    }\r\n                    else {\r\n                        sliceForSampleRate();\r\n                        sliceForRootKey();\r\n                    }\t\r\n                }\r\n                else {\r\n                    if (url.indexOf(\",\") != -1) {\r\n                        sliceForSampleRate();\r\n                    }\t\r\n                    if (url.indexOf(\"!\") != -1) {\r\n                        sliceForRootKey();\r\n                    }\t\r\n                }\r\n            }\r\n        }\r\n\r\n        if (parsedUrl != null) {\r\n            // Store in the new format.\r\n            let urlWithNamedOptions = urlSliced;\r\n            const namedOptions: string[] = [];\r\n            if (customSampleRate !== 44100) namedOptions.push(\"s\" + customSampleRate);\r\n            if (customRootKey !== 60) namedOptions.push(\"r\" + customRootKey);\r\n            if (isCustomPercussive) namedOptions.push(\"p\");\r\n            if (presetIsUsingAdvancedLoopControls) {\r\n                if (presetChipWaveLoopStart != null) namedOptions.push(\"a\" + presetChipWaveLoopStart);\r\n                if (presetChipWaveLoopEnd != null) namedOptions.push(\"b\" + presetChipWaveLoopEnd);\r\n                if (presetChipWaveStartOffset != null) namedOptions.push(\"c\" + presetChipWaveStartOffset);\r\n                if (presetChipWaveLoopMode != null) namedOptions.push(\"d\" + presetChipWaveLoopMode);\r\n                if (presetChipWavePlayBackwards) namedOptions.push(\"e\");\r\n            }\r\n            if (namedOptions.length > 0) {\r\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\r\n            }\r\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\r\n\r\n            // @TODO: Could also remove known extensions, but it\r\n            // would probably be much better to be able to specify\r\n            // a custom name.\r\n            // @TODO: If for whatever inexplicable reason someone\r\n            // uses an url like `https://example.com`, this will\r\n            // result in an empty name here.\r\n            let name: string;\r\n            if (OFFLINE) {\r\n                //@ts-ignore\r\n                name = decodeURIComponent(parsedUrl.replace(/^([^\\/]*\\/)+/, \"\"));\r\n            } else {\r\n                //@ts-ignore\r\n                name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\r\n            }\r\n            // @TODO: What to do about samples with the same name?\r\n            // The problem with using the url is that the name is\r\n            // user-facing and long names break assumptions of the\r\n            // UI.\r\n            const expression: number = 1.0;\r\n            Config.chipWaves[chipWaveIndex] = {\r\n                name: name,\r\n                expression: expression,\r\n                isCustomSampled: true,\r\n                isPercussion: isCustomPercussive,\r\n                rootKey: customRootKey,\r\n                sampleRate: customSampleRate,\r\n                samples: defaultIntegratedSamples,\r\n                index: chipWaveIndex,\r\n            };\r\n            Config.rawChipWaves[chipWaveIndex] = {\r\n                name: name,\r\n                expression: expression,\r\n                isCustomSampled: true,\r\n                isPercussion: isCustomPercussive,\r\n                rootKey: customRootKey,\r\n                sampleRate: customSampleRate,\r\n                samples: defaultSamples,\r\n                index: chipWaveIndex,\r\n            };\r\n            Config.rawRawChipWaves[chipWaveIndex] = {\r\n                name: name,\r\n                expression: expression,\r\n                isCustomSampled: true,\r\n                isPercussion: isCustomPercussive,\r\n                rootKey: customRootKey,\r\n                sampleRate: customSampleRate,\r\n                samples: defaultSamples,\r\n                index: chipWaveIndex,\r\n            };\r\n            const customSamplePresetSettings: Dictionary<any> = {\r\n                \"type\": \"chip\",\r\n                \"eqFilter\": [],\r\n                \"effects\": [],\r\n                \"transition\": \"normal\",\r\n                \"fadeInSeconds\": 0,\r\n                \"fadeOutTicks\": -3,\r\n                \"chord\": \"harmony\",\r\n                \"wave\": name,\r\n                \"unison\": \"none\",\r\n                \"envelopes\": [],\r\n            };\r\n            if (presetIsUsingAdvancedLoopControls) {\r\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\r\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\r\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\r\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\r\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\r\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\r\n            }\r\n            const customSamplePreset: Preset = {\r\n                index: 0, // This should be overwritten by toNameMap, in our caller.\r\n                name: name,\r\n                midiProgram: 80,\r\n                settings: customSamplePresetSettings,\r\n            };\r\n            customSamplePresets.push(customSamplePreset);\r\n            if (!Config.willReloadForCustomSamples) {\r\n                const rawLoopOptions: any = {\r\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\r\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\r\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\r\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\r\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\r\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\r\n                };\r\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\r\n            }\r\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\r\n            sampleLoadingState.totalSamples++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private static _restoreChipWaveListToDefault(): void {\r\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\r\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\r\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\r\n    }\r\n\r\n    private static _clearSamples(): void {\r\n        EditorConfig.customSamples = null;\r\n\r\n        Song._restoreChipWaveListToDefault();\r\n\r\n        sampleLoadingState.statusTable = {};\r\n        sampleLoadingState.urlTable = {};\r\n        sampleLoadingState.totalSamples = 0;\r\n        sampleLoadingState.samplesLoaded = 0;\r\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n            sampleLoadingState.totalSamples,\r\n            sampleLoadingState.samplesLoaded\r\n        ));\r\n    }\r\n\r\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n        const channelArray: Object[] = [];\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            const channel: Channel = this.channels[channelIndex];\r\n            const instrumentArray: Object[] = [];\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n            for (const instrument of channel.instruments) {\r\n                instrumentArray.push(instrument.toJsonObject());\r\n            }\r\n\r\n            const patternArray: Object[] = [];\r\n            for (const pattern of channel.patterns) {\r\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\r\n            }\r\n\r\n            const sequenceArray: number[] = [];\r\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n\r\n            const channelObject: any = {\r\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n                \"name\": channel.name,\r\n                \"instruments\": instrumentArray,\r\n                \"patterns\": patternArray,\r\n                \"sequence\": sequenceArray,\r\n            };\r\n            if (!isNoiseChannel) {\r\n                // For compatibility with old versions the octave is offset by one.\r\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\r\n            }\r\n            channelArray.push(channelObject);\r\n        }\r\n\r\n        const result: any = {\r\n            \"name\": this.title,\r\n            \"format\": Song._format,\r\n            \"version\": Song._latestUltraBoxVersion,\r\n            \"scale\": Config.scales[this.scale].name,\r\n            \"customScale\": this.scaleCustom,\r\n            \"key\": Config.keys[this.key].name,\r\n            \"keyOctave\": this.octave,\r\n            \"introBars\": this.loopStart,\r\n            \"loopBars\": this.loopLength,\r\n            \"beatsPerBar\": this.beatsPerBar,\r\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n            \"beatsPerMinute\": this.tempo,\r\n            \"reverb\": this.reverb,\r\n            \"masterGain\": this.masterGain,\r\n            \"compressionThreshold\": this.compressionThreshold,\r\n            \"limitThreshold\": this.limitThreshold,\r\n            \"limitDecay\": this.limitDecay,\r\n            \"limitRise\": this.limitRise,\r\n            \"limitRatio\": this.limitRatio,\r\n            \"compressionRatio\": this.compressionRatio,\r\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n            \"layeredInstruments\": this.layeredInstruments,\r\n            \"patternInstruments\": this.patternInstruments,\r\n            \"channels\": channelArray,\r\n        };\r\n\r\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\r\n            result[\"customSamples\"] = EditorConfig.customSamples;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public fromJsonObject(jsonObject: any, jsonFormat: string = \"auto\"): void {\r\n        this.initToDefault(true);\r\n        if (!jsonObject) return;\r\n\r\n        //const version: number = jsonObject[\"version\"] | 0;\r\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n        const format: string = jsonFormat == \"auto\" ? jsonObject[\"format\"] : jsonFormat;\r\n\r\n        if (jsonObject[\"name\"] != undefined) {\r\n            this.title = jsonObject[\"name\"];\r\n        }\r\n\r\n        if (jsonObject[\"customSamples\"] != undefined) {\r\n            const customSamples: string[] = jsonObject[\"customSamples\"];\r\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\r\n                // Have to duplicate the work done in Song.fromBase64String\r\n                // early here, because Instrument.fromJsonObject depends on the\r\n                // chip wave list having the correct items already in memory.\r\n\r\n                Config.willReloadForCustomSamples = true;\r\n\r\n                Song._restoreChipWaveListToDefault();\r\n\r\n                let willLoadLegacySamples: boolean = false;\r\n                let willLoadNintariboxSamples: boolean = false;\r\n                let willLoadMarioPaintboxSamples: boolean = false;\r\n                const customSampleUrls: string[] = [];\r\n                const customSamplePresets: Preset[] = [];\r\n                for (const url of customSamples) {\r\n                    if (url.toLowerCase() === \"legacysamples\") {\r\n                        if (!willLoadLegacySamples) {\r\n                            willLoadLegacySamples = true;\r\n                            customSampleUrls.push(url);\r\n                            loadBuiltInSamples(0);\r\n                        }\r\n                    } \r\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\r\n                        if (!willLoadNintariboxSamples) {\r\n                            willLoadNintariboxSamples = true;\r\n                            customSampleUrls.push(url);\r\n                            loadBuiltInSamples(1);\r\n                        }\r\n                    }\r\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\r\n                        if (!willLoadMarioPaintboxSamples) {\r\n                            willLoadMarioPaintboxSamples = true;\r\n                            customSampleUrls.push(url);\r\n                            loadBuiltInSamples(2);\r\n                        }\r\n                    }\r\n                    \r\n                    else {\r\n                        // When EditorConfig.customSamples is saved in the json\r\n                        // export, it should be using the new syntax, unless\r\n                        // the user has manually modified the URL, so we don't\r\n                        // really need to parse the old syntax here.\r\n                        const parseOldSyntax: boolean = false;\r\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\r\n                    }\r\n                }\r\n                if (customSampleUrls.length > 0) {\r\n                    EditorConfig.customSamples = customSampleUrls;\r\n                }\r\n                if (customSamplePresets.length > 0) {\r\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\r\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\r\n                        name: \"Custom Sample Presets\",\r\n                        presets: customSamplePresetsMap,\r\n                        index: EditorConfig.presetCategories.length,\r\n                    };\r\n                }\r\n            }\r\n        } else {\r\n            // No custom samples, so the only possibility at this point is that\r\n            // we need to load the legacy samples. Let's check whether that's\r\n            // necessary.\r\n            let shouldLoadLegacySamples: boolean = false;\r\n            if (jsonObject[\"channels\"] != undefined) {\r\n                for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                    const channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n                    if (channelObject[\"type\"] !== \"pitch\") {\r\n                        // Legacy samples can only exist in pitch channels.\r\n                        continue;\r\n                    }\r\n                    if (Array.isArray(channelObject[\"instruments\"])) {\r\n                        const instrumentObjects: any[] = channelObject[\"instruments\"];\r\n                        for (let i: number = 0; i < instrumentObjects.length; i++) {\r\n                            const instrumentObject: any = instrumentObjects[i];\r\n                            if (instrumentObject[\"type\"] !== \"chip\") {\r\n                                // Legacy samples can only exist in chip wave\r\n                                // instruments.\r\n                                continue;\r\n                            }\r\n                            if (instrumentObject[\"wave\"] == null) {\r\n                                // This should exist if things got saved\r\n                                // correctly, but if they didn't, skip this.\r\n                                continue;\r\n                            }\r\n                            const waveName: string = instrumentObject[\"wave\"];\r\n                            // @TODO: Avoid this duplication.\r\n                            const names: string[] = [\r\n                                \"paandorasbox kick\",\r\n                                \"paandorasbox snare\",\r\n                                \"paandorasbox piano1\",\r\n                                \"paandorasbox WOW\",\r\n                                \"paandorasbox overdrive\",\r\n                                \"paandorasbox trumpet\",\r\n                                \"paandorasbox saxophone\",\r\n                                \"paandorasbox orchestrahit\",\r\n                                \"paandorasbox detatched violin\",\r\n                                \"paandorasbox synth\",\r\n                                \"paandorasbox sonic3snare\",\r\n                                \"paandorasbox come on\",\r\n                                \"paandorasbox choir\",\r\n                                \"paandorasbox overdriveguitar\",\r\n                                \"paandorasbox flute\",\r\n                                \"paandorasbox legato violin\",\r\n                                \"paandorasbox tremolo violin\",\r\n                                \"paandorasbox amen break\",\r\n                                \"paandorasbox pizzicato violin\",\r\n                                \"paandorasbox tim allen grunt\",\r\n                                \"paandorasbox tuba\",\r\n                                \"paandorasbox loopingcymbal\",\r\n                                \"paandorasbox standardkick\",\r\n                                \"paandorasbox standardsnare\",\r\n                                \"paandorasbox closedhihat\",\r\n                                \"paandorasbox foothihat\",\r\n                                \"paandorasbox openhihat\",\r\n                                \"paandorasbox crashcymbal\",\r\n                                \"paandorasbox pianoC4\",\r\n                                \"paandorasbox liver pad\",\r\n                                \"paandorasbox marimba\",\r\n                                \"paandorasbox susdotwav\",\r\n                                \"paandorasbox wackyboxtts\",\r\n                                \"paandorasbox peppersteak_1\",\r\n                                \"paandorasbox peppersteak_2\",\r\n                                \"paandorasbox vinyl_noise\",\r\n                                \"paandorasbeta slap bass\",\r\n                                \"paandorasbeta HD EB overdrive guitar\",\r\n                                \"paandorasbeta sunsoft bass\",\r\n                                \"paandorasbeta masculine choir\",\r\n                                \"paandorasbeta feminine choir\",\r\n                                \"paandorasbeta tololoche\",\r\n                                \"paandorasbeta harp\",\r\n                                \"paandorasbeta pan flute\",\r\n                                \"paandorasbeta krumhorn\",\r\n                                \"paandorasbeta timpani\",\r\n                                \"paandorasbeta crowd hey\",\r\n                                \"paandorasbeta wario land 4 brass\",\r\n                                \"paandorasbeta wario land 4 rock organ\",\r\n                                \"paandorasbeta wario land 4 DAOW\",\r\n                                \"paandorasbeta wario land 4 hour chime\",\r\n                                \"paandorasbeta wario land 4 tick\",\r\n                                \"paandorasbeta kirby kick\",\r\n                                \"paandorasbeta kirby snare\",\r\n                                \"paandorasbeta kirby bongo\",\r\n                                \"paandorasbeta kirby click\",\r\n                                \"paandorasbeta sonor kick\",\r\n                                \"paandorasbeta sonor snare\",\r\n                                \"paandorasbeta sonor snare (left hand)\",\r\n                                \"paandorasbeta sonor snare (right hand)\",\r\n                                \"paandorasbeta sonor high tom\",\r\n                                \"paandorasbeta sonor low tom\",\r\n                                \"paandorasbeta sonor hihat (closed)\",\r\n                                \"paandorasbeta sonor hihat (half opened)\",\r\n                                \"paandorasbeta sonor hihat (open)\",\r\n                                \"paandorasbeta sonor hihat (open tip)\",\r\n                                \"paandorasbeta sonor hihat (pedal)\",\r\n                                \"paandorasbeta sonor crash\",\r\n                                \"paandorasbeta sonor crash (tip)\",\r\n                                \"paandorasbeta sonor ride\"\r\n                            ];\r\n                            // The difference for these is in the doubled a.\r\n                            const oldNames: string[] = [\r\n                                \"pandoraasbox kick\",\r\n                                \"pandoraasbox snare\",\r\n                                \"pandoraasbox piano1\",\r\n                                \"pandoraasbox WOW\",\r\n                                \"pandoraasbox overdrive\",\r\n                                \"pandoraasbox trumpet\",\r\n                                \"pandoraasbox saxophone\",\r\n                                \"pandoraasbox orchestrahit\",\r\n                                \"pandoraasbox detatched violin\",\r\n                                \"pandoraasbox synth\",\r\n                                \"pandoraasbox sonic3snare\",\r\n                                \"pandoraasbox come on\",\r\n                                \"pandoraasbox choir\",\r\n                                \"pandoraasbox overdriveguitar\",\r\n                                \"pandoraasbox flute\",\r\n                                \"pandoraasbox legato violin\",\r\n                                \"pandoraasbox tremolo violin\",\r\n                                \"pandoraasbox amen break\",\r\n                                \"pandoraasbox pizzicato violin\",\r\n                                \"pandoraasbox tim allen grunt\",\r\n                                \"pandoraasbox tuba\",\r\n                                \"pandoraasbox loopingcymbal\",\r\n                                \"pandoraasbox standardkick\",\r\n                                \"pandoraasbox standardsnare\",\r\n                                \"pandoraasbox closedhihat\",\r\n                                \"pandoraasbox foothihat\",\r\n                                \"pandoraasbox openhihat\",\r\n                                \"pandoraasbox crashcymbal\",\r\n                                \"pandoraasbox pianoC4\",\r\n                                \"pandoraasbox liver pad\",\r\n                                \"pandoraasbox marimba\",\r\n                                \"pandoraasbox susdotwav\",\r\n                                \"pandoraasbox wackyboxtts\",\r\n                                \"pandoraasbox peppersteak_1\",\r\n                                \"pandoraasbox peppersteak_2\",\r\n                                \"pandoraasbox vinyl_noise\",\r\n                                \"pandoraasbeta slap bass\",\r\n                                \"pandoraasbeta HD EB overdrive guitar\",\r\n                                \"pandoraasbeta sunsoft bass\",\r\n                                \"pandoraasbeta masculine choir\",\r\n                                \"pandoraasbeta feminine choir\",\r\n                                \"pandoraasbeta tololoche\",\r\n                                \"pandoraasbeta harp\",\r\n                                \"pandoraasbeta pan flute\",\r\n                                \"pandoraasbeta krumhorn\",\r\n                                \"pandoraasbeta timpani\",\r\n                                \"pandoraasbeta crowd hey\",\r\n                                \"pandoraasbeta wario land 4 brass\",\r\n                                \"pandoraasbeta wario land 4 rock organ\",\r\n                                \"pandoraasbeta wario land 4 DAOW\",\r\n                                \"pandoraasbeta wario land 4 hour chime\",\r\n                                \"pandoraasbeta wario land 4 tick\",\r\n                                \"pandoraasbeta kirby kick\",\r\n                                \"pandoraasbeta kirby snare\",\r\n                                \"pandoraasbeta kirby bongo\",\r\n                                \"pandoraasbeta kirby click\",\r\n                                \"pandoraasbeta sonor kick\",\r\n                                \"pandoraasbeta sonor snare\",\r\n                                \"pandoraasbeta sonor snare (left hand)\",\r\n                                \"pandoraasbeta sonor snare (right hand)\",\r\n                                \"pandoraasbeta sonor high tom\",\r\n                                \"pandoraasbeta sonor low tom\",\r\n                                \"pandoraasbeta sonor hihat (closed)\",\r\n                                \"pandoraasbeta sonor hihat (half opened)\",\r\n                                \"pandoraasbeta sonor hihat (open)\",\r\n                                \"pandoraasbeta sonor hihat (open tip)\",\r\n                                \"pandoraasbeta sonor hihat (pedal)\",\r\n                                \"pandoraasbeta sonor crash\",\r\n                                \"pandoraasbeta sonor crash (tip)\",\r\n                                \"pandoraasbeta sonor ride\"\r\n                            ];\r\n                            // This mirrors paandorasboxWaveNames, which is unprefixed.\r\n                            const veryOldNames: string[] = [\r\n                                \"kick\",\r\n                                \"snare\",\r\n                                \"piano1\",\r\n                                \"WOW\",\r\n                                \"overdrive\",\r\n                                \"trumpet\",\r\n                                \"saxophone\",\r\n                                \"orchestrahit\",\r\n                                \"detatched violin\",\r\n                                \"synth\",\r\n                                \"sonic3snare\",\r\n                                \"come on\",\r\n                                \"choir\",\r\n                                \"overdriveguitar\",\r\n                                \"flute\",\r\n                                \"legato violin\",\r\n                                \"tremolo violin\",\r\n                                \"amen break\",\r\n                                \"pizzicato violin\",\r\n                                \"tim allen grunt\",\r\n                                \"tuba\",\r\n                                \"loopingcymbal\",\r\n                                \"standardkick\",\r\n                                \"standardsnare\",\r\n                                \"closedhihat\",\r\n                                \"foothihat\",\r\n                                \"openhihat\",\r\n                                \"crashcymbal\",\r\n                                \"pianoC4\",\r\n                                \"liver pad\",\r\n                                \"marimba\",\r\n                                \"susdotwav\",\r\n                                \"wackyboxtts\"\r\n                            ];\r\n                            if (names.includes(waveName)) {\r\n                                shouldLoadLegacySamples = true;\r\n                            } else if (oldNames.includes(waveName)) {\r\n                                shouldLoadLegacySamples = true;\r\n                                // If we see one of these old names, update it\r\n                                // to the corresponding new name.\r\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\r\n                            } else if (veryOldNames.includes(waveName)) {\r\n                                if (waveName === \"trumpet\" || waveName === \"flute\") {\r\n                                    // @TODO: This isn't exactly correct, but for now, if we see one of these two,\r\n                                    // leave them with the JummBox chip waves. The actual solution here will probably\r\n                                    // involve disambiguation via user input.\r\n                                } else {\r\n                                    // There's no other chip waves with ambiguous names like that, so it should\r\n                                    // be okay to assume we'll need to load the legacy samples now.\r\n                                    shouldLoadLegacySamples = true;\r\n                                    // If we see one of these old names, update it\r\n                                    // to the corresponding new name.\r\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (shouldLoadLegacySamples) {\r\n                Config.willReloadForCustomSamples = true;\r\n\r\n                Song._restoreChipWaveListToDefault();\r\n\r\n                loadBuiltInSamples(0);\r\n                EditorConfig.customSamples = [\"legacySamples\"];\r\n            } else {\r\n                // We don't need to load the legacy samples, but we may have\r\n                // leftover samples in memory. If we do, clear them.\r\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\r\n                    // We need to reload anyway in this case, because (for now)\r\n                    // the chip wave lists won't be correctly updated.\r\n                    Config.willReloadForCustomSamples = true;\r\n                    Song._clearSamples();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.scale = 0; // default to free.\r\n        if (jsonObject[\"scale\"] != undefined) {\r\n            const oldScaleNames: Dictionary<string> = {\r\n                \"romani :)\": \"double harmonic :)\",\r\n\t\t\t\t\"romani :(\": \"double harmonic :(\",\r\n\t\t\t\t\"dbl harmonic :)\": \"double harmonic :)\",\r\n\t\t\t\t\"dbl harmonic :(\": \"double harmonic :(\",\r\n                \"enigma\": \"strange\",\r\n            };\r\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n            if (scale != -1) this.scale = scale;\r\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n                if (jsonObject[\"customScale\"] != undefined) {\r\n                    for (var i of jsonObject[\"customScale\"].keys()) {\r\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"key\"] != undefined) {\r\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\r\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n                const key: string = jsonObject[\"key\"];\r\n                // This conversion code depends on C through B being\r\n                // available as keys, of course.\r\n                if (key === \"C+\") {\r\n                    this.key = 0;\r\n                    this.octave = 1;\r\n                } else if (key === \"G- (actually F#-)\") {\r\n                    this.key = 6;\r\n                    this.octave = -1;\r\n                } else if (key === \"C-\") {\r\n                    this.key = 0;\r\n                    this.octave = -1;\r\n                } else if (key === \"oh no (F-)\") {\r\n                    this.key = 5;\r\n                    this.octave = -1;\r\n                } else {\r\n                    const letter: string = key.charAt(0).toUpperCase();\r\n                    const symbol: string = key.charAt(1).toLowerCase();\r\n                    const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n                    const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n                    let index: number | undefined = letterMap[letter];\r\n                    const offset: number | undefined = accidentalMap[symbol];\r\n                    if (index != undefined) {\r\n                        if (offset != undefined) index += offset;\r\n                        if (index < 0) index += 12;\r\n                        index = index % 12;\r\n                        this.key = index;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"keyOctave\"] != undefined) {\r\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\r\n        }\r\n\r\n        let legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\r\n        if (jsonObject[\"reverb\"] != undefined) {\r\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\r\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n        }\r\n\r\n        let importedPartsPerBeat: number = 4;\r\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n            if (this.rhythm == -1) {\r\n                this.rhythm = 1;\r\n            }\r\n        }\r\n\r\n        // Read limiter settings. Ranges and defaults are based on slider settings\r\n\r\n        if (jsonObject[\"masterGain\"] != undefined) {\r\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\r\n        } else {\r\n            this.masterGain = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitThreshold\"] != undefined) {\r\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\r\n        }\r\n        else {\r\n            this.limitThreshold = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\r\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\r\n        }\r\n        else {\r\n            this.compressionThreshold = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitRise\"] != undefined) {\r\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\r\n        }\r\n        else {\r\n            this.limitRise = 4000.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitDecay\"] != undefined) {\r\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\r\n        }\r\n        else {\r\n            this.limitDecay = 4.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitRatio\"] != undefined) {\r\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\r\n        }\r\n        else {\r\n            this.limitRatio = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"compressionRatio\"] != undefined) {\r\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\r\n        }\r\n        else {\r\n            this.compressionRatio = 1.0;\r\n        }\r\n\r\n        let maxInstruments: number = 1;\r\n        let maxPatterns: number = 1;\r\n        let maxBars: number = 1;\r\n        if (jsonObject[\"channels\"] != undefined) {\r\n            for (const channelObject of jsonObject[\"channels\"]) {\r\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\r\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\r\n        } else {\r\n            this.layeredInstruments = false;\r\n        }\r\n        if (jsonObject[\"patternInstruments\"] != undefined) {\r\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\r\n        } else {\r\n            this.patternInstruments = (maxInstruments > 1);\r\n        }\r\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n        this.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n        if (jsonObject[\"introBars\"] != undefined) {\r\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n        }\r\n        if (jsonObject[\"loopBars\"] != undefined) {\r\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n        }\r\n\r\n        const newPitchChannels: Channel[] = [];\r\n        const newNoiseChannels: Channel[] = [];\r\n        const newModChannels: Channel[] = [];\r\n        if (jsonObject[\"channels\"] != undefined) {\r\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n                const channel: Channel = new Channel();\r\n\r\n                let isNoiseChannel: boolean = false;\r\n                let isModChannel: boolean = false;\r\n                if (channelObject[\"type\"] != undefined) {\r\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\r\n                } else {\r\n                    // for older files, assume drums are channel 3.\r\n                    isNoiseChannel = (channelIndex >= 3);\r\n                }\r\n                if (isNoiseChannel) {\r\n                    newNoiseChannels.push(channel);\r\n                } else if (isModChannel) {\r\n                    newModChannels.push(channel);\r\n                }\r\n                else {\r\n                    newPitchChannels.push(channel);\r\n                }\r\n\r\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\r\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\r\n                    if (isNoiseChannel) channel.octave = 0;\r\n                }\r\n\r\n                if (channelObject[\"name\"] != undefined) {\r\n                    channel.name = channelObject[\"name\"];\r\n                }\r\n                else {\r\n                    channel.name = \"\";\r\n                }\r\n\r\n                if (Array.isArray(channelObject[\"instruments\"])) {\r\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\r\n                    for (let i: number = 0; i < instrumentObjects.length; i++) {\r\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\r\n                        const instrument: Instrument = new Instrument(isNoiseChannel, isModChannel);\r\n                        channel.instruments[i] = instrument;\r\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);\r\n                    }\r\n\r\n                }\r\n\r\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                    const pattern: Pattern = new Pattern();\r\n                    channel.patterns[i] = pattern;\r\n\r\n                    let patternObject: any = undefined;\r\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n                    if (patternObject == undefined) continue;\r\n\r\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel);\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n        }\r\n\r\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n        this.pitchChannelCount = newPitchChannels.length;\r\n        this.noiseChannelCount = newNoiseChannels.length;\r\n        this.modChannelCount = newModChannels.length;\r\n        this.channels.length = 0;\r\n        Array.prototype.push.apply(this.channels, newPitchChannels);\r\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\r\n        Array.prototype.push.apply(this.channels, newModChannels);\r\n\r\n        if (Config.willReloadForCustomSamples) {\r\n            window.location.hash = this.toBase64String();\r\n            // The prompt seems to get stuck if reloading is done too quickly.\r\n            setTimeout(() => { location.reload(); }, 50);\r\n        }\r\n    }\r\n\r\n    public getPattern(channelIndex: number, bar: number): Pattern | null {\r\n        if (bar < 0 || bar >= this.barCount) return null;\r\n        const patternIndex: number = this.channels[channelIndex].bars[bar];\r\n        if (patternIndex == 0) return null;\r\n        return this.channels[channelIndex].patterns[patternIndex - 1];\r\n    }\r\n\r\n    public getBeatsPerMinute(): number {\r\n        return this.tempo;\r\n    }\r\n\r\n    public static getNeededBits(maxValue: number): number {\r\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\r\n    }\r\n\r\n    public restoreLimiterDefaults(): void {\r\n        this.compressionRatio = 1.0;\r\n        this.limitRatio = 1.0;\r\n        this.limitRise = 4000.0;\r\n        this.limitDecay = 4.0;\r\n        this.limitThreshold = 1.0;\r\n        this.compressionThreshold = 1.0;\r\n        this.masterGain = 1.0;\r\n    }\r\n}\r\n\r\nclass PickedString {\r\n    public delayLine: Float32Array | null = null;\r\n    public delayIndex: number;\r\n    public allPassSample: number;\r\n    public allPassPrevInput: number;\r\n    public sustainFilterSample: number;\r\n\tpublic sustainFilterPrevOutput2: number;\r\n\tpublic sustainFilterPrevInput1: number;\r\n\tpublic sustainFilterPrevInput2: number;\r\n    public fractionalDelaySample: number;\r\n    public prevDelayLength: number;\r\n    public delayLengthDelta: number;\r\n    public delayResetOffset: number;\r\n\r\n    public allPassG: number = 0.0;\r\n    public allPassGDelta: number = 0.0;\r\n    public sustainFilterA1: number = 0.0;\r\n\tpublic sustainFilterA1Delta: number = 0.0;\r\n\tpublic sustainFilterA2: number = 0.0;\r\n\tpublic sustainFilterA2Delta: number = 0.0;\r\n\tpublic sustainFilterB0: number = 0.0;\r\n\tpublic sustainFilterB0Delta: number = 0.0;\r\n\tpublic sustainFilterB1: number = 0.0;\r\n\tpublic sustainFilterB1Delta: number = 0.0;\r\n\tpublic sustainFilterB2: number = 0.0;\r\n\tpublic sustainFilterB2Delta: number = 0.0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.delayIndex = -1;\r\n        this.allPassSample = 0.0;\r\n        this.allPassPrevInput = 0.0;\r\n        this.sustainFilterSample = 0.0;\r\n\t\tthis.sustainFilterPrevOutput2 = 0.0;\r\n\t\tthis.sustainFilterPrevInput1 = 0.0;\r\n\t\tthis.sustainFilterPrevInput2 = 0.0;\r\n        this.fractionalDelaySample = 0.0;\r\n        this.prevDelayLength = -1.0;\r\n        this.delayResetOffset = 0;\r\n    }\r\n\r\n    public update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number, sustainType: SustainType): void {\r\n        const allPassCenter: number = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\r\n\r\n        const prevDelayLength: number = this.prevDelayLength;\r\n\r\n        const phaseDeltaStart: number = tone.phaseDeltas[stringIndex];\r\n        const phaseDeltaScale: number = tone.phaseDeltaScales[stringIndex];\r\n        const phaseDeltaEnd: number = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\r\n\r\n        const radiansPerSampleStart: number = Math.PI * 2.0 * phaseDeltaStart;\r\n        const radiansPerSampleEnd: number = Math.PI * 2.0 * phaseDeltaEnd;\r\n\r\n        const centerHarmonicStart: number = radiansPerSampleStart * 2.0;\r\n        const centerHarmonicEnd: number = radiansPerSampleEnd * 2.0;\r\n\r\n        const allPassRadiansStart: number = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\r\n        const allPassRadiansEnd: number = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\r\n        const shelfRadians: number = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\r\n\t\tconst decayCurveStart: number = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\r\n\t\tconst decayCurveEnd: number   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\r\n\t\tconst register: number = sustainType == SustainType.acoustic ? 0.25 : 0.0;\r\n\t\tconst registerShelfCenter: number = 15.6;\r\n\t\tconst registerLowpassCenter: number = 3.0 * synth.samplesPerSecond / 48000;\r\n\t\t//const decayRateStart: number = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\r\n\t\t//const decayRateEnd: number   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd);\r\n\t\tconst decayRateStart: number = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\r\n\t\tconst decayRateEnd:   number = Math.pow(0.5, decayCurveEnd   * Math.pow(shelfRadians / (radiansPerSampleEnd   * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\r\n        \r\n        const expressionDecayStart: number = Math.pow(decayRateStart, 0.002);\r\n        const expressionDecayEnd: number = Math.pow(decayRateEnd, 0.002);\r\n\r\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\r\n        const allPassGStart: number = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\r\n        const allPassPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\r\n\r\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\r\n        const allPassGEnd: number = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\r\n        const allPassPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\r\n\r\n        // 1st order shelf filters and 2nd order lowpass filters have differently shaped frequency\r\n\t\t// responses, as well as adjustable shapes. I originally picked a 1st order shelf filter,\r\n\t\t// but I kinda prefer 2nd order lowpass filters now and I designed a couple settings:\r\n\t\tconst enum PickedStringBrightnessType {\r\n\t\t\tbright, // 1st order shelf\r\n\t\t\tnormal, // 2nd order lowpass, rounded corner\r\n\t\t\tresonant, // 3rd order lowpass, harder corner\r\n\t\t}\r\n\t\tconst brightnessType: PickedStringBrightnessType = <any> sustainType == SustainType.bright ? PickedStringBrightnessType.bright : PickedStringBrightnessType.normal;\r\n\t\tif (brightnessType == PickedStringBrightnessType.bright) {\r\n\t\t\tconst shelfGainStart: number = Math.pow(decayRateStart, Config.stringDecayRate);\r\n\t\t\tconst shelfGainEnd: number   = Math.pow(decayRateEnd,   Config.stringDecayRate);\r\n\t\t\tSynth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\r\n\t\t\tSynth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\r\n\t\t} else {\r\n\t\t\tconst cornerHardness: number = Math.pow(brightnessType == PickedStringBrightnessType.normal ? 0.0 : 1.0, 0.25);\r\n\t\t\tconst lowpass1stOrderCutoffRadiansStart: number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\r\n\t\t\tconst lowpass1stOrderCutoffRadiansEnd:   number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd   * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd,   .5);\r\n\t\t\tconst lowpass2ndOrderCutoffRadiansStart: number = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\r\n\t\t\tconst lowpass2ndOrderCutoffRadiansEnd:   number = lowpass1stOrderCutoffRadiansEnd   * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\r\n\t\t\tconst lowpass2ndOrderGainStart: number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\r\n\t\t\tconst lowpass2ndOrderGainEnd:   number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\r\n\t\t\tSynth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\r\n\t\t\tSynth.tempFilterEndCoefficients  .lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd),   lowpass2ndOrderGainEnd);\r\n\t\t}\r\n\r\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\r\n\t\tconst sustainFilterA1Start: number = Synth.tempFilterStartCoefficients.a[1];\r\n\t\tconst sustainFilterA2Start: number = Synth.tempFilterStartCoefficients.a[2];\r\n\t\tconst sustainFilterB0Start: number = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\r\n\t\tconst sustainFilterB1Start: number = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\r\n\t\tconst sustainFilterB2Start: number = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\r\n\t\tconst sustainFilterPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\r\n\r\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\r\n\t\tconst sustainFilterA1End: number = Synth.tempFilterEndCoefficients.a[1];\r\n\t\tconst sustainFilterA2End: number = Synth.tempFilterEndCoefficients.a[2];\r\n\t\tconst sustainFilterB0End: number = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\r\n\t\tconst sustainFilterB1End: number = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\r\n\t\tconst sustainFilterB2End: number = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\r\n\t\tconst sustainFilterPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\r\n\r\n\t\tconst periodLengthStart: number = 1.0 / phaseDeltaStart;\r\n\t\tconst periodLengthEnd: number = 1.0 / phaseDeltaEnd;\r\n\t\tconst minBufferLength: number = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\r\n\t\tconst delayLength: number = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\r\n\t\tconst delayLengthEnd: number = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\r\n\r\n\t\tthis.prevDelayLength = delayLength;\r\n\t\tthis.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\r\n\t\tthis.allPassG = allPassGStart;\r\n\t\tthis.sustainFilterA1 = sustainFilterA1Start;\r\n\t\tthis.sustainFilterA2 = sustainFilterA2Start;\r\n\t\tthis.sustainFilterB0 = sustainFilterB0Start;\r\n\t\tthis.sustainFilterB1 = sustainFilterB1Start;\r\n\t\tthis.sustainFilterB2 = sustainFilterB2Start;\r\n\t\tthis.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\r\n\r\n        const pitchChanged: boolean = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\r\n\r\n        const reinitializeImpulse: boolean = (this.delayIndex == -1 || pitchChanged);\r\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\r\n            // The delay line buffer will get reused for other tones so might as well\r\n            // start off with a buffer size that is big enough for most notes.\r\n            const likelyMaximumLength: number = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\r\n            const newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\r\n            if (!reinitializeImpulse && this.delayLine != null) {\r\n                // If the tone has already started but the buffer needs to be reallocated,\r\n                // transfer the old data to the new buffer.\r\n                const oldDelayBufferMask: number = (this.delayLine.length - 1) >> 0;\r\n                const startCopyingFromIndex: number = this.delayIndex + this.delayResetOffset;\r\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\r\n                for (let i: number = 0; i < this.delayLine.length; i++) {\r\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\r\n                }\r\n            }\r\n            this.delayLine = newDelayLine;\r\n        }\r\n        const delayLine: Float32Array = this.delayLine;\r\n        const delayBufferMask: number = (delayLine.length - 1) >> 0;\r\n\r\n        if (reinitializeImpulse) {\r\n            // -1 delay index means the tone was reset.\r\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\r\n\r\n            this.delayIndex = 0;\r\n            this.allPassSample = 0.0;\r\n            this.allPassPrevInput = 0.0;\r\n            this.sustainFilterSample = 0.0;\r\n\t\t\tthis.sustainFilterPrevOutput2 = 0.0;\r\n\t\t\tthis.sustainFilterPrevInput1 = 0.0;\r\n\t\t\tthis.sustainFilterPrevInput2 = 0.0;\r\n            this.fractionalDelaySample = 0.0;\r\n\r\n            // Clear away a region of the delay buffer for the new impulse.\r\n            const startImpulseFrom: number = -delayLength;\r\n            const startZerosFrom: number = Math.floor(startImpulseFrom - periodLengthStart / 2);\r\n            const stopZerosAt: number = Math.ceil(startZerosFrom + periodLengthStart * 2);\r\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\r\n            for (let i: number = startZerosFrom; i <= stopZerosAt; i++) {\r\n                delayLine[i & delayBufferMask] = 0.0;\r\n            }\r\n\r\n            const impulseWave: Float32Array = instrumentState.wave!;\r\n            const impulseWaveLength: number = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n            const impulsePhaseDelta: number = impulseWaveLength / periodLengthStart;\r\n\r\n            const fadeDuration: number = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\r\n            const startImpulseFromSample: number = Math.ceil(startImpulseFrom);\r\n            const stopImpulseAt: number = startImpulseFrom + periodLengthStart + fadeDuration;\r\n            const stopImpulseAtSample: number = stopImpulseAt;\r\n            let impulsePhase: number = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\r\n            let prevWaveIntegral: number = 0.0;\r\n            for (let i: number = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\r\n                const impulsePhaseInt: number = impulsePhase | 0;\r\n                const index: number = impulsePhaseInt % impulseWaveLength;\r\n                let nextWaveIntegral: number = impulseWave[index];\r\n                const phaseRatio: number = impulsePhase - impulsePhaseInt;\r\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\r\n                const sample: number = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\r\n                const fadeIn: number = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\r\n                const fadeOut: number = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\r\n                const combinedFade: number = fadeIn * fadeOut;\r\n                const curvedFade: number = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\r\n                delayLine[i & delayBufferMask] += sample * curvedFade;\r\n                prevWaveIntegral = nextWaveIntegral;\r\n                impulsePhase += impulsePhaseDelta;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass EnvelopeComputer {\r\n    public noteSecondsStart: number = 0.0;\r\n    public noteSecondsEnd: number = 0.0;\r\n    public noteTicksStart: number = 0.0;\r\n    public noteTicksEnd: number = 0.0;\r\n    public noteSizeStart: number = Config.noteSizeMax;\r\n    public noteSizeEnd: number = Config.noteSizeMax;\r\n    public prevNoteSize: number = Config.noteSizeMax;\r\n    public nextNoteSize: number = Config.noteSizeMax;\r\n    private _noteSizeFinal: number = Config.noteSizeMax;\r\n    public prevNoteSecondsStart: number = 0.0;\r\n    public prevNoteSecondsEnd: number = 0.0;\r\n    public prevNoteTicksStart: number = 0.0;\r\n    public prevNoteTicksEnd: number = 0.0;\r\n    private _prevNoteSizeFinal: number = Config.noteSizeMax;\r\n\r\n    public prevSlideStart: boolean = false;\r\n    public prevSlideEnd: boolean = false;\r\n    public nextSlideStart: boolean = false;\r\n    public nextSlideEnd: boolean = false;\r\n    public prevSlideRatioStart: number = 0.0;\r\n    public prevSlideRatioEnd: number = 0.0;\r\n    public nextSlideRatioStart: number = 0.0;\r\n    public nextSlideRatioEnd: number = 0.0;\r\n\r\n    public readonly envelopeStarts: number[] = [];\r\n    public readonly envelopeEnds: number[] = [];\r\n    private readonly _modifiedEnvelopeIndices: number[] = [];\r\n    private _modifiedEnvelopeCount: number = 0;\r\n    public lowpassCutoffDecayVolumeCompensation: number = 1.0;\r\n\r\n    constructor(/*private _perNote: boolean*/) {\r\n        //const length: number = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\r\n        const length: number = EnvelopeComputeIndex.length;\r\n        for (let i: number = 0; i < length; i++) {\r\n            this.envelopeStarts[i] = 1.0;\r\n            this.envelopeEnds[i] = 1.0;\r\n        }\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.noteSecondsEnd = 0.0;\r\n        this.noteTicksEnd = 0.0;\r\n        this._noteSizeFinal = Config.noteSizeMax;\r\n        this.prevNoteSecondsEnd = 0.0;\r\n        this.prevNoteTicksEnd = 0.0;\r\n        this._prevNoteSizeFinal = Config.noteSizeMax;\r\n        this._modifiedEnvelopeCount = 0;\r\n    }\r\n\r\n    public computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number, tickTimeStartReal: number, secondsPerTick: number, tone: Tone | null, timeScale: number): void {\r\n        secondsPerTick *= timeScale;\r\n        const transition: Transition = instrument.getTransition();\r\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\r\n            this.prevNoteSecondsEnd = this.noteSecondsEnd;\r\n            this.prevNoteTicksEnd = this.noteTicksEnd;\r\n            this._prevNoteSizeFinal = this._noteSizeFinal;\r\n            this.noteSecondsEnd = 0.0;\r\n            this.noteTicksEnd = 0.0;\r\n        }\r\n        if (tone != null) {\r\n            if (tone.note != null) {\r\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\r\n            } else {\r\n                this._noteSizeFinal = Config.noteSizeMax;\r\n            }\r\n        }\r\n        const tickTimeEnd: number = tickTimeStart + timeScale;\r\n        const tickTimeEndReal: number = tickTimeStartReal + 1.0;\r\n        const noteSecondsStart: number = this.noteSecondsEnd;\r\n        const noteSecondsEnd: number = noteSecondsStart + secondsPerTick;\r\n        const noteTicksStart: number = this.noteTicksEnd;\r\n        const noteTicksEnd: number = noteTicksStart + 1.0;\r\n        const prevNoteSecondsStart: number = this.prevNoteSecondsEnd;\r\n        const prevNoteSecondsEnd: number = prevNoteSecondsStart + secondsPerTick;\r\n        const prevNoteTicksStart: number = this.prevNoteTicksEnd;\r\n        const prevNoteTicksEnd: number = prevNoteTicksStart + 1.0;\r\n\r\n        const beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\r\n        const beatTimeStart: number = beatsPerTick * tickTimeStart;\r\n        const beatTimeEnd: number = beatsPerTick * tickTimeEnd;\r\n\r\n        let noteSizeStart: number = this._noteSizeFinal;\r\n        let noteSizeEnd: number = this._noteSizeFinal;\r\n        let prevNoteSize: number = this._prevNoteSizeFinal;\r\n        let nextNoteSize: number = 0;\r\n        let prevSlideStart: boolean = false;\r\n        let prevSlideEnd: boolean = false;\r\n        let nextSlideStart: boolean = false;\r\n        let nextSlideEnd: boolean = false;\r\n        let prevSlideRatioStart: number = 0.0;\r\n        let prevSlideRatioEnd: number = 0.0;\r\n        let nextSlideRatioStart: number = 0.0;\r\n        let nextSlideRatioEnd: number = 0.0;\r\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\r\n            const endPinIndex: number = tone.note.getEndPinIndex(currentPart);\r\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = tone.note.pins[endPinIndex];\r\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\r\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\r\n            const ratioStart: number = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\r\n            const ratioEnd: number = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\r\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\r\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\r\n\r\n            if (transition.slides) {\r\n                const noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\r\n                const noteEndTick: number = tone.noteEndPart * Config.ticksPerPart;\r\n                const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n                const maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n                const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\r\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\r\n                        prevSlideStart = true;\r\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\r\n                    }\r\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\r\n                        prevSlideEnd = true;\r\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\r\n                    }\r\n                }\r\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\r\n                    nextNoteSize = tone.nextNote.pins[0].size\r\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\r\n                        nextSlideStart = true;\r\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\r\n                    }\r\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\r\n                        nextSlideEnd = true;\r\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let lowpassCutoffDecayVolumeCompensation: number = 1.0;\r\n        let usedNoteSize: boolean = false;\r\n        for (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\r\n            let automationTarget: AutomationTarget;\r\n            let targetIndex: number;\r\n            let envelope: Envelope;\r\n            if (envelopeIndex == instrument.envelopeCount) {\r\n                if (usedNoteSize /*|| !this._perNote*/) break;\r\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\r\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\r\n                targetIndex = 0;\r\n                envelope = Config.envelopes.dictionary[\"note size\"];\r\n            } else {\r\n                let envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\r\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\r\n                targetIndex = envelopeSettings.index;\r\n                envelope = Config.envelopes[envelopeSettings.envelope];\r\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\r\n            }\r\n            if (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\r\n                const computeIndex: number = automationTarget.computeIndex + targetIndex;\r\n                let envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);\r\n                if (prevSlideStart) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);\r\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\r\n                }\r\n                if (nextSlideStart) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);\r\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\r\n                }\r\n                let envelopeEnd: number = envelopeStart;\r\n                if (instrument.discreteEnvelope == false) {\r\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);\r\n                    if (prevSlideEnd) {\r\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);\r\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\r\n                    }\r\n                    if (nextSlideEnd) {\r\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);\r\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\r\n                    }\r\n                }\r\n\r\n                this.envelopeStarts[computeIndex] *= envelopeStart;\r\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\r\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\r\n\r\n                if (automationTarget.isFilter) {\r\n                    const filterSettings: FilterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\r\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\r\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.noteSecondsStart = noteSecondsStart;\r\n        this.noteSecondsEnd = noteSecondsEnd;\r\n        this.noteTicksStart = noteTicksStart;\r\n        this.noteTicksEnd = noteTicksEnd;\r\n        this.prevNoteSecondsStart = prevNoteSecondsStart;\r\n        this.prevNoteSecondsEnd = prevNoteSecondsEnd;\r\n        this.prevNoteTicksStart = prevNoteTicksStart;\r\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\r\n        this.prevNoteSize = prevNoteSize;\r\n        this.nextNoteSize = nextNoteSize;\r\n        this.noteSizeStart = noteSizeStart;\r\n        this.noteSizeEnd = noteSizeEnd;\r\n        this.prevSlideStart = prevSlideStart;\r\n        this.prevSlideEnd = prevSlideEnd;\r\n        this.nextSlideStart = nextSlideStart;\r\n        this.nextSlideEnd = nextSlideEnd;\r\n        this.prevSlideRatioStart = prevSlideRatioStart;\r\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\r\n        this.nextSlideRatioStart = nextSlideRatioStart;\r\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\r\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\r\n    }\r\n\r\n    public clearEnvelopes(): void {\r\n        for (let envelopeIndex: number = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\r\n            const computeIndex: number = this._modifiedEnvelopeIndices[envelopeIndex];\r\n            this.envelopeStarts[computeIndex] = 1.0;\r\n            this.envelopeEnds[computeIndex] = 1.0;\r\n        }\r\n        this._modifiedEnvelopeCount = 0;\r\n    }\r\n\r\n    public static computeEnvelope(envelope: Envelope, time: number, beats: number, noteSize: number): number {\r\n        switch (envelope.type) {\r\n            case EnvelopeType.noteSize: return Synth.noteSizeToVolumeMult(noteSize);\r\n            case EnvelopeType.none: return 1.0;\r\n            case EnvelopeType.twang: return 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.swell: return 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.tremolo: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n            case EnvelopeType.tremolo2: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n            case EnvelopeType.punch: return Math.max(1.0, 2.0 - time * 10.0);\r\n            case EnvelopeType.flare: const attack: number = 0.25 / Math.sqrt(envelope.speed); return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);\r\n            case EnvelopeType.decay: return Math.pow(2, -envelope.speed * time);\r\n            case EnvelopeType.blip: return 1.0 * +(time < (0.25 / Math.sqrt(envelope.speed)));\r\n            case EnvelopeType.wibble:\r\n                let temp = 0.5 - Math.cos(beats * envelope.speed) * 0.5;\r\n                temp = 1.0 / (1.0 + time * (envelope.speed - (temp / (1.5 / envelope.speed))));\r\n                temp = temp > 0.0 ? temp : 0.0;\r\n                return temp;\r\n            case EnvelopeType.linear: {\r\n                let lin = (1.0 - (time / (16 / envelope.speed)));\r\n                lin = lin > 0.0 ? lin : 0.0;\r\n                return lin;\r\n            }\r\n            case EnvelopeType.rise: {\r\n                let lin = (time / (16 / envelope.speed));\r\n                lin = lin < 1.0 ? lin : 1.0;\r\n                return lin;\r\n            }\r\n            default: throw new Error(\"Unrecognized operator envelope type.\");\r\n        }\r\n\r\n    }\r\n\r\n    public static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope): number {\r\n        // This is a little hokey in the details, but I designed it a while ago and keep it \r\n        // around for compatibility. This decides how much to increase the volume (or\r\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\r\n        // volume overall.\r\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * envelope.speed;\r\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * envelope.speed;\r\n        return 1.0;\r\n    }\r\n}\r\n\r\nclass Tone {\r\n    public instrumentIndex: number;\r\n    public readonly pitches: number[] = Array(Config.maxChordSize+2).fill(0);\r\n    public pitchCount: number = 0;\r\n    public chordSize: number = 0;\r\n    public drumsetPitch: number | null = null;\r\n    public note: Note | null = null;\r\n    public prevNote: Note | null = null;\r\n    public nextNote: Note | null = null;\r\n    public prevNotePitchIndex: number = 0;\r\n    public nextNotePitchIndex: number = 0;\r\n    public freshlyAllocated: boolean = true;\r\n    public atNoteStart: boolean = false;\r\n    public isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\r\n    public passedEndOfNote: boolean = false;\r\n    public forceContinueAtStart: boolean = false;\r\n    public forceContinueAtEnd: boolean = false;\r\n    public noteStartPart: number = 0;\r\n    public noteEndPart: number = 0;\r\n    public ticksSinceReleased: number = 0;\r\n    public liveInputSamplesHeld: number = 0;\r\n    public lastInterval: number = 0;\r\n    public noiseSample: number = 0.0;\r\n    public stringSustainStart: number = 0;\r\n    public stringSustainEnd: number = 0;\r\n    public readonly phases: number[] = [];\r\n    public readonly operatorWaves: OperatorWave[] = [];\r\n    public readonly phaseDeltas: number[] = [];\r\n\t\t\t// advloop addition\r\n        public directions: number[] = [];\r\n        public chipWaveCompletions: number[] = [];\r\n        public chipWavePrevWaves: number[] = [];\r\n        public chipWaveCompletionsLastWave: number[] = [];\r\n           // advloop addition\r\n    public readonly phaseDeltaScales: number[] = [];\r\n    public expression: number = 0.0;\r\n    public expressionDelta: number = 0.0;\r\n    public readonly operatorExpressions: number[] = [];\r\n    public readonly operatorExpressionDeltas: number[] = [];\r\n    public readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\r\n    public prevVibrato: number | null = null;\r\n    public prevStringDecay: number | null = null;\r\n    public pulseWidth: number = 0.0;\r\n    public pulseWidthDelta: number = 0.0;\r\n    public decimalOffset: number = 0.0;\r\n    public supersawDynamism: number = 0.0;\r\n\tpublic supersawDynamismDelta: number = 0.0;\r\n\tpublic supersawUnisonDetunes: number[] = []; // These can change over time, but slowly enough that I'm not including corresponding delta values within a tick run.\r\n\tpublic supersawShape: number = 0.0;\r\n\tpublic supersawShapeDelta: number = 0.0;\r\n\tpublic supersawDelayLength: number = 0.0;\r\n\tpublic supersawDelayLengthDelta: number = 0.0;\r\n\tpublic supersawDelayLine: Float32Array | null = null;\r\n\tpublic supersawDelayIndex: number = -1;\r\n\tpublic supersawPrevPhaseDelta: number | null = null;\r\n    public readonly pickedStrings: PickedString[] = [];\r\n\r\n    public readonly noteFilters: DynamicBiquadFilter[] = [];\r\n    public noteFilterCount: number = 0;\r\n    public initialNoteFilterInput1: number = 0.0;\r\n    public initialNoteFilterInput2: number = 0.0;\r\n\r\n    public specialIntervalExpressionMult: number = 1.0;\r\n    public readonly feedbackOutputs: number[] = [];\r\n    public feedbackMult: number = 0.0;\r\n    public feedbackDelta: number = 0.0;\r\n    public stereoVolumeLStart: number = 0.0;\r\n    public stereoVolumeRStart: number = 0.0;\r\n    public stereoVolumeLDelta: number = 0.0;\r\n    public stereoVolumeRDelta: number = 0.0;\r\n    public stereoDelayStart: number = 0.0;\r\n    public stereoDelayEnd: number = 0.0;\r\n    public stereoDelayDelta: number = 0.0;\r\n    public customVolumeStart: number = 0.0;\r\n    public customVolumeEnd: number = 0.0;\r\n    public filterResonanceStart: number = 0.0;\r\n    public filterResonanceDelta: number = 0.0;\r\n    public isFirstOrder: boolean = false;\r\n\r\n    public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.noiseSample = 0.0;\r\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n            this.phases[i] = 0.0;\r\n\t\t\t\t\t\t// advloop addition\r\n                this.directions[i] = 1;\r\n                this.chipWaveCompletions[i] = 0;\r\n                this.chipWavePrevWaves[i] = 0;\r\n                this.chipWaveCompletionsLastWave[i] = 0;\r\n                // advloop addition\r\n            this.operatorWaves[i] = Config.operatorWaves[0];\r\n            this.feedbackOutputs[i] = 0.0;\r\n            this.prevPitchExpressions[i] = null;\r\n        }\r\n        for (let i: number = 0; i < this.noteFilterCount; i++) {\r\n            this.noteFilters[i].resetOutput();\r\n        }\r\n        this.noteFilterCount = 0;\r\n        this.initialNoteFilterInput1 = 0.0;\r\n        this.initialNoteFilterInput2 = 0.0;\r\n        this.liveInputSamplesHeld = 0;\r\n        this.supersawDelayIndex = -1;\r\n        for (const pickedString of this.pickedStrings) {\r\n            pickedString.reset();\r\n        }\r\n        this.envelopeComputer.reset();\r\n        this.prevVibrato = null;\r\n        this.prevStringDecay = null;\r\n        this.supersawPrevPhaseDelta = null;\r\n        this.drumsetPitch = null;\r\n    }\r\n}\r\n\r\nclass InstrumentState {\r\n    public awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\r\n    public computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\r\n    public tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\r\n    public flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\r\n    public deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\r\n    public attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\r\n    public flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\r\n    public readonly activeTones: Deque<Tone> = new Deque<Tone>();\r\n    public readonly activeModTones: Deque<Tone> = new Deque<Tone>();\r\n    public readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\r\n    public readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\r\n\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public synthesizer: Function | null = null;\r\n    public wave: Float32Array | null = null;\r\n\t\t\t\t // advloop addition\r\n            public isUsingAdvancedLoopControls = false;\r\n            public chipWaveLoopStart = 0;\r\n            public chipWaveLoopEnd = 0;\r\n            public chipWaveLoopMode = 0;\r\n            public chipWavePlayBackwards = false;\r\n            public chipWaveStartOffset = 0;\r\n            // advloop addition\r\n    public noisePitchFilterMult: number = 1.0;\r\n    public unison: Unison | null = null;\r\n    public unisonVoices: number = 1;\r\n    public unisonSpread: number = 0.0;\r\n    public unisonOffset: number = 0.0;\r\n    public unisonExpression: number = 1.4;\r\n    public unisonSign: number = 1.0;\r\n    public chord: Chord | null = null;\r\n    public effects: number = 0;\r\n\r\n    public volumeScale: number = 0;\r\n    public aliases: boolean = false;\r\n    public arpTime: number = 0;\r\n    public vibratoTime: number = 0;\r\n    public nextVibratoTime: number = 0;\r\n    public envelopeTime: number = 0;\r\n\r\n    public eqFilterVolume: number = 1.0;\r\n    public eqFilterVolumeDelta: number = 0.0;\r\n    public mixVolume: number = 1.0;\r\n    public mixVolumeDelta: number = 0.0;\r\n    public delayInputMult: number = 0.0;\r\n    public delayInputMultDelta: number = 0.0;\r\n\r\n    public distortion: number = 0.0;\r\n    public distortionDelta: number = 0.0;\r\n    public distortionDrive: number = 0.0;\r\n    public distortionDriveDelta: number = 0.0;\r\n    public distortionFractionalInput1: number = 0.0;\r\n    public distortionFractionalInput2: number = 0.0;\r\n    public distortionFractionalInput3: number = 0.0;\r\n    public distortionPrevInput: number = 0.0;\r\n    public distortionNextOutput: number = 0.0;\r\n\r\n    public bitcrusherPrevInput: number = 0.0;\r\n    public bitcrusherCurrentOutput: number = 0.0;\r\n    public bitcrusherPhase: number = 1.0;\r\n    public bitcrusherPhaseDelta: number = 0.0;\r\n    public bitcrusherPhaseDeltaScale: number = 1.0;\r\n    public bitcrusherScale: number = 1.0;\r\n    public bitcrusherScaleScale: number = 1.0;\r\n    public bitcrusherFoldLevel: number = 1.0;\r\n    public bitcrusherFoldLevelScale: number = 1.0;\r\n\r\n    public readonly eqFilters: DynamicBiquadFilter[] = [];\r\n    public eqFilterCount: number = 0;\r\n    public initialEqFilterInput1: number = 0.0;\r\n    public initialEqFilterInput2: number = 0.0;\r\n\r\n    public panningDelayLine: Float32Array | null = null;\r\n    public panningDelayPos: number = 0;\r\n    public panningVolumeL: number = 0.0;\r\n    public panningVolumeR: number = 0.0;\r\n    public panningVolumeDeltaL: number = 0.0;\r\n    public panningVolumeDeltaR: number = 0.0;\r\n    public panningOffsetL: number = 0.0;\r\n    public panningOffsetR: number = 0.0;\r\n    public panningOffsetDeltaL: number = 0.0;\r\n    public panningOffsetDeltaR: number = 0.0;\r\n\r\n    public chorusDelayLineL: Float32Array | null = null;\r\n    public chorusDelayLineR: Float32Array | null = null;\r\n    public chorusDelayLineDirty: boolean = false;\r\n    public chorusDelayPos: number = 0;\r\n    public chorusPhase: number = 0;\r\n    public chorusVoiceMult: number = 0;\r\n    public chorusVoiceMultDelta: number = 0;\r\n    public chorusCombinedMult: number = 0;\r\n    public chorusCombinedMultDelta: number = 0;\r\n\r\n    public echoDelayLineL: Float32Array | null = null;\r\n    public echoDelayLineR: Float32Array | null = null;\r\n    public echoDelayLineDirty: boolean = false;\r\n    public echoDelayPos: number = 0;\r\n    public echoDelayOffsetStart: number = 0;\r\n    public echoDelayOffsetEnd: number | null = null;\r\n    public echoDelayOffsetRatio: number = 0.0;\r\n    public echoDelayOffsetRatioDelta: number = 0.0;\r\n    public echoMult: number = 0.0;\r\n    public echoMultDelta: number = 0.0;\r\n    public echoShelfA1: number = 0.0;\r\n    public echoShelfB0: number = 0.0;\r\n    public echoShelfB1: number = 0.0;\r\n    public echoShelfSampleL: number = 0.0;\r\n    public echoShelfSampleR: number = 0.0;\r\n    public echoShelfPrevInputL: number = 0.0;\r\n    public echoShelfPrevInputR: number = 0.0;\r\n\r\n    public reverbDelayLine: Float32Array | null = null;\r\n    public reverbDelayLineDirty: boolean = false;\r\n    public reverbDelayPos: number = 0;\r\n    public reverbMult: number = 0.0;\r\n    public reverbMultDelta: number = 0.0;\r\n    public reverbShelfA1: number = 0.0;\r\n    public reverbShelfB0: number = 0.0;\r\n    public reverbShelfB1: number = 0.0;\r\n    public reverbShelfSample0: number = 0.0;\r\n    public reverbShelfSample1: number = 0.0;\r\n    public reverbShelfSample2: number = 0.0;\r\n    public reverbShelfSample3: number = 0.0;\r\n    public reverbShelfPrevInput0: number = 0.0;\r\n    public reverbShelfPrevInput1: number = 0.0;\r\n    public reverbShelfPrevInput2: number = 0.0;\r\n    public reverbShelfPrevInput3: number = 0.0;\r\n\r\n    //public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(false);\r\n\r\n    public readonly spectrumWave: SpectrumWaveState = new SpectrumWaveState();\r\n    public readonly harmonicsWave: HarmonicsWaveState = new HarmonicsWaveState();\r\n    public readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\r\n\r\n    constructor() {\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\r\n        }\r\n    }\r\n\r\n\r\n    public allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\r\n        if (effectsIncludePanning(instrument.effects)) {\r\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\r\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\r\n            }\r\n        }\r\n        if (effectsIncludeChorus(instrument.effects)) {\r\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\r\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\r\n            }\r\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\r\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\r\n            }\r\n        }\r\n        if (effectsIncludeEcho(instrument.effects)) {\r\n            // account for tempo and delay automation changing delay length during a tick?\r\n            const safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\r\n            const baseEchoDelayBufferSize: number = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\r\n            const safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\r\n\r\n            if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\r\n                this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\r\n                this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\r\n            } else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\r\n                // The echo delay length may change whlie the song is playing if tempo changes,\r\n                // so buffers may need to be reallocated, but we don't want to lose any echoes\r\n                // so we need to copy the contents of the old buffer to the new one.\r\n                const newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\r\n                const newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\r\n                const oldMask: number = this.echoDelayLineL.length - 1;\r\n\r\n                for (let i = 0; i < this.echoDelayLineL.length; i++) {\r\n                    newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\r\n                    newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\r\n                }\r\n\r\n                this.echoDelayPos = this.echoDelayLineL.length;\r\n                this.echoDelayLineL = newDelayLineL;\r\n                this.echoDelayLineR = newDelayLineR;\r\n            }\r\n        }\r\n        if (effectsIncludeReverb(instrument.effects)) {\r\n            // TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\r\n            if (this.reverbDelayLine == null) {\r\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\r\n            }\r\n        }\r\n    }\r\n\r\n    public deactivate(): void {\r\n        this.bitcrusherPrevInput = 0.0;\r\n        this.bitcrusherCurrentOutput = 0.0;\r\n        this.bitcrusherPhase = 1.0;\r\n        for (let i: number = 0; i < this.eqFilterCount; i++) {\r\n            this.eqFilters[i].resetOutput();\r\n        }\r\n        this.eqFilterCount = 0;\r\n        this.initialEqFilterInput1 = 0.0;\r\n        this.initialEqFilterInput2 = 0.0;\r\n        this.distortionFractionalInput1 = 0.0;\r\n        this.distortionFractionalInput2 = 0.0;\r\n        this.distortionFractionalInput3 = 0.0;\r\n        this.distortionPrevInput = 0.0;\r\n        this.distortionNextOutput = 0.0;\r\n        this.panningDelayPos = 0;\r\n        if (this.panningDelayLine != null) for (let i: number = 0; i < this.panningDelayLine.length; i++) this.panningDelayLine[i] = 0.0;\r\n        this.echoDelayOffsetEnd = null;\r\n        this.echoShelfSampleL = 0.0;\r\n        this.echoShelfSampleR = 0.0;\r\n        this.echoShelfPrevInputL = 0.0;\r\n        this.echoShelfPrevInputR = 0.0;\r\n        this.reverbShelfSample0 = 0.0;\r\n        this.reverbShelfSample1 = 0.0;\r\n        this.reverbShelfSample2 = 0.0;\r\n        this.reverbShelfSample3 = 0.0;\r\n        this.reverbShelfPrevInput0 = 0.0;\r\n        this.reverbShelfPrevInput1 = 0.0;\r\n        this.reverbShelfPrevInput2 = 0.0;\r\n        this.reverbShelfPrevInput3 = 0.0;\r\n\r\n        this.volumeScale = 1.0;\r\n        this.aliases = false;\r\n\r\n        this.awake = false;\r\n        this.flushingDelayLines = false;\r\n        this.deactivateAfterThisTick = false;\r\n        this.attentuationProgress = 0.0;\r\n        this.flushedSamples = 0;\r\n    }\r\n\r\n    public resetAllEffects(): void {\r\n        this.deactivate();\r\n        // LFOs are reset here rather than in deactivate() for periodic oscillation that stays \"on the beat\". Resetting in deactivate() will cause it to reset with each note.\r\n        this.vibratoTime = 0;\r\n        this.nextVibratoTime = 0;\r\n        this.arpTime = 0;\r\n        this.envelopeTime = 0;\r\n\r\n        if (this.chorusDelayLineDirty) {\r\n            for (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\r\n            for (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\r\n        }\r\n        if (this.echoDelayLineDirty) {\r\n            for (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\r\n            for (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\r\n        }\r\n        if (this.reverbDelayLineDirty) {\r\n            for (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\r\n        }\r\n\r\n        this.chorusPhase = 0.0;\r\n    }\r\n\r\n    public compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\r\n        this.computed = true;\r\n\r\n        this.type = instrument.type;\r\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\r\n        this.unison = Config.unisons[instrument.unison];\r\n        this.chord = instrument.getChord();\r\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\r\n        this.effects = instrument.effects;\t\r\n\r\n        this.aliases = instrument.aliases;\r\n        this.volumeScale = 1.0;\r\n\r\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\r\n\r\n        const samplesPerSecond: number = synth.samplesPerSecond;\r\n        this.updateWaves(instrument, samplesPerSecond);\r\n\r\n        //const ticksIntoBar: number = synth.getTicksIntoBar();\r\n        //const tickTimeStart: number = ticksIntoBar;\r\n        //const tickTimeEnd:   number = ticksIntoBar + 1.0;\r\n        //const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\r\n        //const currentPart: number = synth.getCurrentPart();\r\n        //this.envelopeComputer.computeEnvelopes(instrument, currentPart, tickTimeStart, secondsPerTick, tone);\r\n        //const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\r\n        //const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\r\n\r\n        const usesDistortion: boolean = effectsIncludeDistortion(this.effects);\r\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(this.effects);\r\n        const usesPanning: boolean = effectsIncludePanning(this.effects);\r\n        const usesChorus: boolean = effectsIncludeChorus(this.effects);\r\n        const usesEcho: boolean = effectsIncludeEcho(this.effects);\r\n        const usesReverb: boolean = effectsIncludeReverb(this.effects);\r\n\r\n        if (usesDistortion) {\r\n            let useDistortionStart: number = instrument.distortion;\r\n            let useDistortionEnd: number = instrument.distortion;\r\n\r\n            // Check for distortion mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\r\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\r\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const distortionSliderStart = Math.min(1.0, /*envelopeStarts[InstrumentAutomationIndex.distortion] **/ useDistortionStart / (Config.distortionRange - 1));\r\n            const distortionSliderEnd = Math.min(1.0, /*envelopeEnds[  InstrumentAutomationIndex.distortion] **/ useDistortionEnd / (Config.distortionRange - 1));\r\n            const distortionStart: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\r\n            const distortionEnd: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\r\n            const distortionDriveStart: number = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\r\n            const distortionDriveEnd: number = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\r\n            this.distortion = distortionStart;\r\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\r\n            this.distortionDrive = distortionDriveStart;\r\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\r\n        }\r\n\r\n        if (usesBitcrusher) {\r\n            let freqSettingStart: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherFrequency])*/;\r\n            let freqSettingEnd: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherFrequency])*/;\r\n\r\n            // Check for freq crush mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\r\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false);\r\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let quantizationSettingStart: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherQuantization])*/;\r\n            let quantizationSettingEnd: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherQuantization])*/;\r\n\r\n            // Check for bitcrush mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\r\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false);\r\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const basePitch: number = Config.keys[synth.song!.key].basePitch + (Config.pitchesPerOctave * synth.song!.octave); // TODO: What if there's a key change mid-song?\r\n            const freqStart: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\r\n            const freqEnd: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\r\n            const phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\r\n            const phaseDeltaEnd: number = Math.min(1.0, freqEnd / samplesPerSecond);\r\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\r\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\r\n\r\n            const scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\r\n            const scaleEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\r\n            this.bitcrusherScale = scaleStart;\r\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\r\n\r\n            const foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\r\n            const foldLevelEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\r\n            this.bitcrusherFoldLevel = foldLevelStart;\r\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\r\n        }\r\n\r\n        let eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\r\n        if (instrument.eqFilterType) {\r\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\r\n            const eqFilterSettingsStart: FilterSettings = instrument.eqFilter;\r\n            if (instrument.eqSubFilters[1] == null)\r\n                instrument.eqSubFilters[1] = new FilterSettings();\r\n            const eqFilterSettingsEnd: FilterSettings = instrument.eqSubFilters[1];\r\n\r\n            // Change location based on slider values\r\n            let startSimpleFreq: number = instrument.eqFilterSimpleCut;\r\n            let startSimpleGain: number = instrument.eqFilterSimplePeak;\r\n            let endSimpleFreq: number = instrument.eqFilterSimpleCut;\r\n            let endSimpleGain: number = instrument.eqFilterSimplePeak;\r\n\r\n            let filterChanges: boolean = false;\r\n\r\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\r\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\r\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\r\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\r\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n\r\n            let startPoint: FilterControlPoint;\r\n\r\n            if (filterChanges) {\r\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\r\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\r\n\r\n                startPoint = eqFilterSettingsStart.controlPoints[0];\r\n                let endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\r\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\r\n\r\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\r\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n\r\n            } else {\r\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\r\n\r\n                startPoint = eqFilterSettingsStart.controlPoints[0];\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\r\n\r\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\r\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n\r\n            }\r\n\r\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\r\n\r\n            this.eqFilterCount = 1;\r\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\r\n        }\r\n        else {\r\n            const eqFilterSettings: FilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\r\n            //const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\r\n            //const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\r\n            for (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\r\n                //const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\r\n                //const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\r\n                //const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\r\n                //const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\r\n                let startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\r\n                let endPoint: FilterControlPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\r\n\r\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\r\n                if (startPoint.type != endPoint.type) {\r\n                    startPoint = endPoint;\r\n                }\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\r\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\r\n                if (this.eqFilters.length <= i) this.eqFilters[i] = new DynamicBiquadFilter();\r\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\r\n\r\n            }\r\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\r\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\r\n        }\r\n\r\n        const mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n        this.mixVolume = mainInstrumentVolume /** envelopeStarts[InstrumentAutomationIndex.mixVolume]*/;\r\n        let mixVolumeEnd: number = mainInstrumentVolume /** envelopeEnds[  InstrumentAutomationIndex.mixVolume]*/;\r\n\r\n        // Check for mod-related volume delta\r\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\r\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n            const startVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\r\n            const endVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true)\r\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n        }\r\n\r\n        // Check for SONG mod-related volume delta\r\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\r\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\r\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\r\n        }\r\n\r\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\r\n\r\n        let eqFilterVolumeStart: number = eqFilterVolume;\r\n        let eqFilterVolumeEnd: number = eqFilterVolume;\r\n        let delayInputMultStart: number = 1.0;\r\n        let delayInputMultEnd: number = 1.0;\r\n\r\n        if (usesPanning) {\r\n            //const panEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.panning] * 2.0 - 1.0;\r\n            //const panEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.panning] * 2.0 - 1.0;\r\n\r\n            let usePanStart: number = instrument.pan;\r\n            let usePanEnd: number = instrument.pan;\r\n            // Check for pan mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\r\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\r\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let panStart: number = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter /** panEnvelopeStart*/));\r\n            let panEnd: number = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter /** panEnvelopeEnd  */));\r\n\r\n            const volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\r\n            const volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\r\n            const volumeEndL: number = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\r\n            const volumeEndR: number = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\r\n            const maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\r\n\r\n            let usePanDelayStart: number = instrument.panDelay;\r\n            let usePanDelayEnd: number = instrument.panDelay;\r\n            // Check for pan delay mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\r\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\r\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const delayStart: number = panStart * usePanDelayStart * maxDelaySamples / 10;\r\n            const delayEnd: number = panEnd * usePanDelayEnd * maxDelaySamples / 10;\r\n            const delayStartL: number = Math.max(0.0, delayStart);\r\n            const delayStartR: number = Math.max(0.0, -delayStart);\r\n            const delayEndL: number = Math.max(0.0, delayEnd);\r\n            const delayEndR: number = Math.max(0.0, -delayEnd);\r\n\r\n            this.panningVolumeL = volumeStartL;\r\n            this.panningVolumeR = volumeStartR;\r\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\r\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\r\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\r\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\r\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\r\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\r\n        }\r\n\r\n        if (usesChorus) {\r\n            //const chorusEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.chorus];\r\n            //const chorusEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.chorus];\r\n            let useChorusStart: number = instrument.chorus;\r\n            let useChorusEnd: number = instrument.chorus;\r\n            // Check for chorus mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\r\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\r\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let chorusStart: number = Math.min(1.0, /*chorusEnvelopeStart **/ useChorusStart / (Config.chorusRange - 1));\r\n            let chorusEnd: number = Math.min(1.0, /*chorusEnvelopeEnd   **/ useChorusEnd / (Config.chorusRange - 1));\r\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\r\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\r\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\r\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\r\n            this.chorusVoiceMult = chorusStart;\r\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\r\n            this.chorusCombinedMult = chorusCombinedMultStart;\r\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\r\n        }\r\n\r\n        let maxEchoMult = 0.0;\r\n        let averageEchoDelaySeconds: number = 0.0;\r\n        if (usesEcho) {\r\n            //const echoSustainEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.echoSustain];\r\n            //const echoSustainEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.echoSustain];\r\n            let useEchoSustainStart: number = instrument.echoSustain;\r\n            let useEchoSustainEnd: number = instrument.echoSustain;\r\n            // Check for echo mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\r\n                useEchoSustainStart = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false) );\r\n                useEchoSustainEnd = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true) );\r\n            }\r\n            const echoMultStart: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeStart **/ useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\r\n            const echoMultEnd: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeEnd   **/ useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\r\n            this.echoMult = echoMultStart;\r\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\r\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\r\n\r\n            // TODO: After computing a tick's settings once for multiple run lengths (which is\r\n            // good for audio worklet threads), compute the echo delay envelopes at tick (or\r\n            // part) boundaries to interpolate between two delay taps.\r\n            //const echoDelayEnvelopeStart:   number = envelopeStarts[InstrumentAutomationIndex.echoDelay];\r\n            //const echoDelayEnvelopeEnd:     number = envelopeEnds[  InstrumentAutomationIndex.echoDelay];\r\n            let useEchoDelayStart: number = instrument.echoDelay;\r\n            let useEchoDelayEnd: number = instrument.echoDelay;\r\n            let ignoreTicks: boolean = false;\r\n            // Check for pan delay mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\r\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false);\r\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true);\r\n                ignoreTicks = true;\r\n            }\r\n\r\n            const tmpEchoDelayOffsetStart: number = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\r\n            const tmpEchoDelayOffsetEnd: number = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\r\n            if (this.echoDelayOffsetEnd != null && !ignoreTicks) {\r\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\r\n            } else {\r\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\r\n            }\r\n\r\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\r\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\r\n\r\n            this.echoDelayOffsetRatio = 0.0;\r\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\r\n\r\n            const shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\r\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\r\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\r\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\r\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\r\n        }\r\n\r\n        let maxReverbMult = 0.0;\r\n        if (usesReverb) {\r\n            //const reverbEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.reverb];\r\n            //const reverbEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.reverb];\r\n\r\n            let useReverbStart: number = instrument.reverb;\r\n            let useReverbEnd: number = instrument.reverb;\r\n\r\n            // Check for mod reverb, instrument level\r\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\r\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\r\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n            // Check for mod reverb, song scalar\r\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\r\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\r\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\r\n            }\r\n\r\n            const reverbStart: number = Math.min(1.0, Math.pow(/*reverbEnvelopeStart **/ useReverbStart / Config.reverbRange, 0.667)) * 0.425;\r\n            const reverbEnd: number = Math.min(1.0, Math.pow(/*reverbEnvelopeEnd   **/ useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\r\n\r\n            this.reverbMult = reverbStart;\r\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\r\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\r\n\r\n            const shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\r\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\r\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\r\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\r\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\r\n        }\r\n\r\n        if (this.tonesAddedInThisTick) {\r\n            this.attentuationProgress = 0.0;\r\n            this.flushedSamples = 0;\r\n            this.flushingDelayLines = false;\r\n        } else if (!this.flushingDelayLines) {\r\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\r\n            // end of the first tick. It's possible for filters and the panning delay line to\r\n            // continue past the end of the tone but they should have mostly dissipated by the\r\n            // end of the tick anyway.\r\n            if (this.attentuationProgress == 0.0) {\r\n                eqFilterVolumeEnd = 0.0;\r\n            } else {\r\n                eqFilterVolumeStart = 0.0;\r\n                eqFilterVolumeEnd = 0.0;\r\n            }\r\n\r\n            const attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\r\n            const halfLifeMult: number = -Math.log2(attenuationThreshold);\r\n            let delayDuration: number = 0.0;\r\n\r\n            if (usesChorus) {\r\n                delayDuration += Config.chorusMaxDelay;\r\n            }\r\n\r\n            if (usesEcho) {\r\n                const attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\r\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\r\n                const echoDuration: number = halfLife * halfLifeMult;\r\n                delayDuration += echoDuration;\r\n            }\r\n\r\n            if (usesReverb) {\r\n                const averageMult: number = maxReverbMult * 2.0;\r\n                const averageReverbDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\r\n                const attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\r\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\r\n                const reverbDuration: number = halfLife * halfLifeMult;\r\n                delayDuration += reverbDuration;\r\n            }\r\n\r\n            const secondsInTick: number = samplesPerTick / samplesPerSecond;\r\n            const progressInTick: number = secondsInTick / delayDuration;\r\n            const progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\r\n            if (progressAtEndOfTick >= 1.0) {\r\n                delayInputMultEnd = 0.0;\r\n            }\r\n\r\n            this.attentuationProgress = progressAtEndOfTick;\r\n            if (this.attentuationProgress >= 1.0) {\r\n                this.flushingDelayLines = true;\r\n            }\r\n        } else {\r\n            // Flushing delay lines to zero since the signal has mostly dissipated.\r\n            eqFilterVolumeStart = 0.0;\r\n            eqFilterVolumeEnd = 0.0;\r\n            delayInputMultStart = 0.0;\r\n            delayInputMultEnd = 0.0;\r\n\r\n            let totalDelaySamples: number = 0;\r\n            if (usesChorus) totalDelaySamples += synth.chorusDelayBufferSize;\r\n            if (usesEcho) totalDelaySamples += this.echoDelayLineL!.length;\r\n            if (usesReverb) totalDelaySamples += Config.reverbDelayBufferSize;\r\n\r\n            this.flushedSamples += roundedSamplesPerTick;\r\n            if (this.flushedSamples >= totalDelaySamples) {\r\n                this.deactivateAfterThisTick = true;\r\n            }\r\n        }\r\n\r\n        this.eqFilterVolume = eqFilterVolumeStart;\r\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\r\n        this.delayInputMult = delayInputMultStart;\r\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\r\n    }\r\n\r\n    public updateWaves(instrument: Instrument, samplesPerSecond: number): void {\r\n        this.volumeScale = 1.0;\r\n        if (instrument.type == InstrumentType.chip) {\r\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\r\n\t\t\t\t\t\t // advloop addition\r\n                this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\r\n                this.chipWaveLoopStart = instrument.chipWaveLoopStart;\r\n                this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\r\n                this.chipWaveLoopMode = instrument.chipWaveLoopMode;\r\n                this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\r\n                this.chipWaveStartOffset = instrument.chipWaveStartOffset;\r\n               // advloop addition\r\n\r\n               this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            this.wave = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\r\n            this.volumeScale = 0.05;\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            for (let i: number = 0; i < Config.drumCount; i++) {\r\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\r\n            }\r\n            this.wave = null;\r\n        } else {\r\n            this.wave = null;\r\n        }\r\n    }\r\n\r\n    public getDrumsetWave(pitch: number): Float32Array {\r\n        if (this.type == InstrumentType.drumset) {\r\n            return this.drumsetSpectrumWaves[pitch].wave!;\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\r\n        }\r\n    }\r\n\r\n    public static drumsetIndexReferenceDelta(index: number): number {\r\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\r\n    }\r\n\r\n    private static _drumsetIndexToSpectrumOctave(index: number): number {\r\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\r\n    }\r\n}\r\n\r\nclass ChannelState {\r\n    public readonly instruments: InstrumentState[] = [];\r\n    public muted: boolean = false;\r\n    public singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\r\n}\r\n\r\nexport class Synth {\r\n\r\n    private syncSongState(): void {\r\n        const channelCount: number = this.song!.getChannelCount();\r\n        for (let i: number = this.channels.length; i < channelCount; i++) {\r\n            this.channels[i] = new ChannelState();\r\n        }\r\n        this.channels.length = channelCount;\r\n        for (let i: number = 0; i < channelCount; i++) {\r\n            const channel: Channel = this.song!.channels[i];\r\n            const channelState: ChannelState = this.channels[i];\r\n            for (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\r\n                channelState.instruments[j] = new InstrumentState();\r\n            }\r\n            channelState.instruments.length = channel.instruments.length;\r\n\r\n            if (channelState.muted != channel.muted) {\r\n                channelState.muted = channel.muted;\r\n                if (channelState.muted) {\r\n                    for (const instrumentState of channelState.instruments) {\r\n                        instrumentState.resetAllEffects();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public initModFilters(song: Song | null): void {\r\n        if (song != null) {\r\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\r\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\r\n                    instrument.tmpEqFilterEnd = null;\r\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\r\n                    instrument.tmpNoteFilterEnd = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public warmUpSynthesizer(song: Song | null): void {\r\n        // Don't bother to generate the drum waves unless the song actually\r\n        // uses them, since they may require a lot of computation.\r\n        if (song != null) {\r\n            this.syncSongState();\r\n            const samplesPerTick: number = this.getSamplesPerTick();\r\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\r\n                    Synth.getInstrumentSynthFunction(instrument);\r\n                    instrumentState.vibratoTime = 0;\r\n                    instrumentState.nextVibratoTime = 0;\r\n                    instrumentState.envelopeTime = 0;\r\n                    instrumentState.arpTime = 0;\r\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\r\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\r\n                }\r\n\r\n            }\r\n        }\r\n        // JummBox needs to run synth functions for at least one sample (for JIT purposes)\r\n\t\t// before starting audio callbacks to avoid skipping the initial output.\r\n        var dummyArray = new Float32Array(1);\r\n        this.isPlayingSong = true;\r\n        this.synthesize(dummyArray, dummyArray, 1, true);\r\n        this.isPlayingSong = false;\r\n    }\r\n\r\n    public computeLatestModValues(): void {\r\n\r\n        if (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n            let latestModTimes: (number | null)[] = [];\r\n            let latestModInsTimes: (number | null)[][][] = [];\r\n            this.modValues = [];\r\n            this.nextModValues = [];\r\n            this.modInsValues = [];\r\n            this.nextModInsValues = [];\r\n            this.heldMods = [];\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                latestModInsTimes[channel] = [];\r\n                this.modInsValues[channel] = [];\r\n                this.nextModInsValues[channel] = [];\r\n\r\n                for (let instrument: number = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\r\n                    this.modInsValues[channel][instrument] = [];\r\n                    this.nextModInsValues[channel][instrument] = [];\r\n                    latestModInsTimes[channel][instrument] = [];\r\n                }\r\n            }\r\n\r\n            // Find out where we're at in the fraction of the current bar.\r\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n            // For mod channels, calculate last set value for each mod\r\n            for (let channelIndex: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\r\n                if (!(this.song.channels[channelIndex].muted)) {\r\n\r\n                    let pattern: Pattern | null;\r\n\r\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n                        pattern = this.song.getPattern(channelIndex, currentBar);\r\n\r\n                        if (pattern != null) {\r\n                            let instrumentIdx: number = pattern.instruments[0];\r\n                            let instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\r\n                            let latestPinParts: number[] = [];\r\n                            let latestPinValues: number[] = [];\r\n\r\n                            let partsInBar: number = (currentBar == this.bar)\r\n                                ? currentPart\r\n                                : this.findPartsInBar(currentBar);\r\n\r\n                            for (const note of pattern.notes) {\r\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n                                    if (note.start == partsInBar) { // This can happen with next bar mods, and the value of the aligned note's start pin will be used.\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\r\n                                    }\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\r\n                                    }\r\n                                    else {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\r\n\r\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // Set modulator value, if it wasn't set in another pattern already scanned\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                if (latestPinParts[mod] != null) {\r\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\r\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\r\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        // Generate list of used instruments\r\n                                        let usedInstruments: number[] = [];\r\n                                        // All\r\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                                            for (let i: number = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\r\n                                                usedInstruments.push(i);\r\n                                            }\r\n                                        }\r\n                                        // Active\r\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod], currentBar);\r\n                                            if (tgtPattern != null)\r\n                                                usedInstruments = tgtPattern.instruments;\r\n                                        } else {\r\n                                            usedInstruments.push(instrument.modInstruments[mod]);\r\n                                        }\r\n                                        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\r\n                                            // Iterate through all used instruments by this modulator\r\n                                            // Special indices for mod filter targets, since they control multiple things.\r\n                                            const eqFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\r\n                                            const noteFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\r\n                                            let modulatorAdjust: number = instrument.modulators[mod];\r\n                                            if (eqFilterParam) {\r\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\r\n                                            } else if (noteFilterParam) {\r\n                                                // Skip all possible indices for eq filter\r\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\r\n                                            }\r\n\r\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\r\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\r\n\r\n                                                if (eqFilterParam) {\r\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n                                                    if (instrument.modFilterTypes[mod] == 0) {\r\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\r\n                                                    } else {\r\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                                                            if (tgtInstrument.tmpEqFilterStart != null && tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\r\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\r\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\r\n                                                                i = Config.filterMorphCount;\r\n                                                            }\r\n                                                        }\r\n                                                        if (tgtInstrument.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {\r\n                                                            if (instrument.modFilterTypes[mod] % 2)\r\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\r\n                                                            else\r\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\r\n                                                        }\r\n                                                    }\r\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\r\n                                                } else if (noteFilterParam) {\r\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n                                                    if (instrument.modFilterTypes[mod] == 0) {\r\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\r\n                                                    } else {\r\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\r\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\r\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\r\n                                                                i = Config.filterMorphCount;\r\n                                                            }\r\n                                                        }\r\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\r\n                                                            if (instrument.modFilterTypes[mod] % 2)\r\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\r\n                                                            else\r\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\r\n                                                        }\r\n                                                    }\r\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\r\n                                                }\r\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\r\n\r\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\r\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\r\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\r\n    public determineInvalidModulators(instrument: Instrument): void {\r\n        if (this.song == null)\r\n            return;\r\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n            instrument.invalidModulators[mod] = true;\r\n            // For song modulator, valid if any setting used\r\n            if (instrument.modChannels[mod] == -1) {\r\n                if (instrument.modulators[mod] != 0)\r\n                    instrument.invalidModulators[mod] = false;\r\n                continue;\r\n            }\r\n            const channel: Channel | null = this.song.channels[instrument.modChannels[mod]];\r\n            if (channel == null) continue;\r\n            let tgtInstrumentList: Instrument[] = [];\r\n            if (instrument.modInstruments[mod] >= channel.instruments.length) { // All or active\r\n                tgtInstrumentList = channel.instruments;\r\n            } else {\r\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\r\n            }\r\n            for (let i: number = 0; i < tgtInstrumentList.length; i++) {\r\n                const tgtInstrument: Instrument | null = tgtInstrumentList[i];\r\n                if (tgtInstrument == null) continue;\r\n                const str: string = Config.modulators[instrument.modulators[mod]].name;\r\n                // Check effects\r\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\r\n                    // Instrument type specific\r\n                    || ((tgtInstrument.type != InstrumentType.fm && tgtInstrument.type != InstrumentType.fm6op) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\r\n                    || tgtInstrument.type != InstrumentType.fm6op && (str == \"fm slider 5\" || str == \"fm slider 6\")\r\n                    || ((tgtInstrument.type != InstrumentType.pwm && tgtInstrument.type != InstrumentType.supersaw) && (str == \"pulse width\" || str == \"decimal offset\"))\r\n                    || ((tgtInstrument.type != InstrumentType.supersaw) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\r\n                    // Arp check\r\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\r\n                    // EQ Filter check\r\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\r\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\r\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\r\n                    // Note Filter check\r\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\r\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\r\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true)))) {\r\n\r\n                    instrument.invalidModulators[mod] = false;\r\n                    i = tgtInstrumentList.length;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private static operatorAmplitudeCurve(amplitude: number): number {\r\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n    }\r\n\r\n    public samplesPerSecond: number = 44100;\r\n    public panningDelayBufferSize: number;\r\n    public panningDelayBufferMask: number;\r\n    public chorusDelayBufferSize: number;\r\n    public chorusDelayBufferMask: number;\r\n    // TODO: reverb\r\n\r\n    public song: Song | null = null;\r\n    public preferLowerLatency: boolean = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\r\n    public anticipatePoorPerformance: boolean = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\r\n    public liveInputDuration: number = 0;\r\n    public liveBassInputDuration: number = 0;\r\n    public liveInputStarted: boolean = false;\r\n    public liveBassInputStarted: boolean = false;\r\n    public liveInputPitches: number[] = [];\r\n    public liveBassInputPitches: number[] = [];\r\n    public liveInputChannel: number = 0;\r\n    public liveBassInputChannel: number = 0;\r\n    public liveInputInstruments: number[] = [];\r\n    public liveBassInputInstruments: number[] = [];\r\n    public loopRepeatCount: number = -1;\r\n    public volume: number = 1.0;\r\n    public oscRefreshEventTimer: number = 0;\r\n    public oscEnabled: boolean = true;\r\n    public enableMetronome: boolean = false;\r\n    public countInMetronome: boolean = false;\r\n    public renderingSong: boolean = false;\r\n    public heldMods: HeldMod[] = [];\r\n    private wantToSkip: boolean = false;\r\n    private playheadInternal: number = 0.0;\r\n    private bar: number = 0;\r\n    private prevBar: number | null = null;\r\n    private nextBar: number | null = null;\r\n    private beat: number = 0;\r\n    private part: number = 0;\r\n    private tick: number = 0;\r\n    public isAtStartOfTick: boolean = true;\r\n    public isAtEndOfTick: boolean = true;\r\n    public tickSampleCountdown: number = 0;\r\n    private modValues: (number | null)[] = [];\r\n    private modInsValues: (number | null)[][][] = [];\r\n    private nextModValues: (number | null)[] = [];\r\n    private nextModInsValues: (number | null)[][][] = [];\r\n    private isPlayingSong: boolean = false;\r\n    private isRecording: boolean = false;\r\n    private liveInputEndTime: number = 0.0;\r\n    private browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\r\n\r\n    public static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\r\n    public static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\r\n    private tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\r\n    public tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\r\n    public loopBarStart: number = -1;\r\n    public loopBarEnd: number = -1;\r\n\r\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n    private static readonly fm6SynthFunctionCache: Dictionary<Function> = {};\r\n    private static readonly effectsFunctionCache: Function[] = Array(1 << 7).fill(undefined); // keep in sync with the number of post-process effects.\r\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\r\n\r\n    private readonly channels: ChannelState[] = [];\r\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\r\n\r\n    private startedMetronome: boolean = false;\r\n    private metronomeSamplesRemaining: number = -1;\r\n    private metronomeAmplitude: number = 0.0;\r\n    private metronomePrevAmplitude: number = 0.0;\r\n    private metronomeFilter: number = 0.0;\r\n    private limit: number = 0.0;\r\n\r\n    private tempMonoInstrumentSampleBuffer: Float32Array | null = null;\r\n\r\n    private audioCtx: any | null = null;\r\n    private scriptNode: any | null = null;\r\n\r\n    public get playing(): boolean {\r\n        return this.isPlayingSong;\r\n    }\r\n\r\n    public get recording(): boolean {\r\n        return this.isRecording;\r\n    }\r\n\r\n    public get playhead(): number {\r\n        return this.playheadInternal;\r\n    }\r\n\r\n    public set playhead(value: number) {\r\n        if (this.song != null) {\r\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n            let remainder: number = this.playheadInternal;\r\n            this.bar = Math.floor(remainder);\r\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\r\n            this.beat = Math.floor(remainder);\r\n            remainder = Config.partsPerBeat * (remainder - this.beat);\r\n            this.part = Math.floor(remainder);\r\n            remainder = Config.ticksPerPart * (remainder - this.part);\r\n            this.tick = Math.floor(remainder);\r\n            this.tickSampleCountdown = 0;\r\n            this.isAtStartOfTick = true;\r\n            this.prevBar = null;\r\n        }\r\n    }\r\n\r\n    public getSamplesPerBar(): number {\r\n        if (this.song == null) throw new Error();\r\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n    }\r\n\r\n    public getTicksIntoBar(): number {\r\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n    }\r\n    public getCurrentPart(): number {\r\n        return (this.beat * Config.partsPerBeat + this.part);\r\n    }\r\n\r\n    private findPartsInBar(bar: number): number {\r\n        if (this.song == null) return 0;\r\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n            if (pattern != null) {\r\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\r\n                        for (const note of pattern.notes) {\r\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                // Find the earliest next bar note.\r\n                                if (partsInBar > note.start)\r\n                                    partsInBar = note.start;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return partsInBar;\r\n    }\r\n\r\n    // Returns the total samples in the song\r\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n        if (this.song == null)\r\n            return -1;\r\n\r\n        // Compute the window to be checked (start bar to end bar)\r\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n        let hasTempoMods: boolean = false;\r\n        let hasNextBarMods: boolean = false;\r\n        let prevTempo: number = this.song.tempo;\r\n\r\n        // Determine if any tempo or next bar mods happen anywhere in the window\r\n        for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\r\n            for (let bar: number = startBar; bar < endBar; bar++) {\r\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                if (pattern != null) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\r\n                            hasTempoMods = true;\r\n                        }\r\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\r\n                            hasNextBarMods = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n        if (startBar > 0) {\r\n            let latestTempoPin: number | null = null;\r\n            let latestTempoValue: number = 0;\r\n\r\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n                for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\r\n                    let pattern = this.song.getPattern(channel, bar);\r\n\r\n                    if (pattern != null) {\r\n                        let instrumentIdx: number = pattern.instruments[0];\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n                        let partsInBar: number = this.findPartsInBar(bar);\r\n\r\n                        for (const note of pattern.notes) {\r\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\r\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestTempoPin = note.end;\r\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\r\n                                    }\r\n                                    else {\r\n                                        latestTempoPin = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\r\n\r\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\r\n                if (latestTempoPin != null) {\r\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                    bar = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTempoMods || hasNextBarMods) {\r\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n            let bar: number = startBar;\r\n            let ended: boolean = false;\r\n            let totalSamples: number = 0;\r\n\r\n            while (!ended) {\r\n                // Compute the subsection of the pattern that will play\r\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n                let currentPart: number = 0;\r\n\r\n                if (hasNextBarMods) {\r\n                    partsInBar = this.findPartsInBar(bar);\r\n                }\r\n\r\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\r\n                if (hasTempoMods) {\r\n                    let foundMod: boolean = false;\r\n                    for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\r\n                        if (foundMod == false) {\r\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                            if (pattern != null) {\r\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\r\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n                                        foundMod = true;\r\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\r\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n                                        for (const note of pattern.notes) {\r\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                                // Compute samples up to this note\r\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                                                if (note.start < partsInBar) {\r\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n                                                        // Compute samples up to this pin\r\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n                                                            const prevPinTempo: number = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            let currPinTempo: number = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            }\r\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n                                                            if (currPinTempo != prevPinTempo) {\r\n\r\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n                                                                // The starting formula is\r\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n                                                                //\r\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n                                                                //\r\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n                                                            }\r\n                                                            else {\r\n\r\n                                                                // No tempo change between the two pins.\r\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n                                                            }\r\n                                                            prevTempo = currPinTempo;\r\n                                                        }\r\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Compute samples for the rest of the bar\r\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                bar++;\r\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n                    bar = this.song.loopStart;\r\n                    if (loop > 0) loop--;\r\n                }\r\n                if (bar >= endBar) {\r\n                    ended = true;\r\n                }\r\n\r\n            }\r\n\r\n            return Math.ceil(totalSamples);\r\n        }\r\n        else {\r\n            // No tempo or next bar mods... phew! Just calculate normally.\r\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n        }\r\n    }\r\n\r\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n        if (this.song == null) throw new Error();\r\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\r\n        if (enableIntro) bars += this.song.loopStart;\r\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n        return bars;\r\n    }\r\n\r\n    constructor(song: Song | string | null = null) {\r\n        this.computeDelayBufferSizes();\r\n        if (song != null) this.setSong(song);\r\n    }\r\n\r\n    public setSong(song: Song | string): void {\r\n        if (typeof (song) == \"string\") {\r\n            this.song = new Song(song);\r\n        } else if (song instanceof Song) {\r\n            this.song = song;\r\n        }\r\n        this.prevBar = null;\r\n    }\r\n\r\n    private computeDelayBufferSizes(): void {\r\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\r\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\r\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\r\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\r\n    }\r\n\r\n    private activateAudio(): void {\r\n        const bufferSize: number = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\r\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\r\n            if (this.scriptNode != null) this.deactivateAudio();\r\n            const latencyHint: string = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\r\n            this.samplesPerSecond = this.audioCtx.sampleRate;\r\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\r\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n            this.scriptNode.channelCountMode = 'explicit';\r\n            this.scriptNode.channelInterpretation = 'speakers';\r\n            this.scriptNode.connect(this.audioCtx.destination);\r\n\r\n            this.computeDelayBufferSizes();\r\n        }\r\n        this.audioCtx.resume();\r\n    }\r\n\r\n    private deactivateAudio(): void {\r\n        if (this.audioCtx != null && this.scriptNode != null) {\r\n            this.scriptNode.disconnect(this.audioCtx.destination);\r\n            this.scriptNode = null;\r\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n            this.audioCtx = null;\r\n        }\r\n    }\r\n\r\n    public maintainLiveInput(): void {\r\n        this.activateAudio();\r\n        this.liveInputEndTime = performance.now() + 10000.0;\r\n    }\r\n\r\n    public play(): void {\r\n        if (this.isPlayingSong) return;\r\n        this.initModFilters(this.song);\r\n        this.computeLatestModValues();\r\n        this.activateAudio();\r\n        this.warmUpSynthesizer(this.song);\r\n        this.isPlayingSong = true;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.isPlayingSong) return;\r\n        this.isPlayingSong = false;\r\n        this.isRecording = false;\r\n        this.modValues = [];\r\n        this.nextModValues = [];\r\n        this.heldMods = [];\r\n        if (this.song != null) {\r\n            this.song.inVolumeCap = 0.0;\r\n            this.song.outVolumeCap = 0.0;\r\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\r\n                this.modInsValues[channelIndex] = [];\r\n                this.nextModInsValues[channelIndex] = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    public startRecording(): void {\r\n        this.preferLowerLatency = true;\r\n        this.isRecording = true;\r\n        this.play();\r\n    }\r\n\r\n    public resetEffects(): void {\r\n        this.limit = 0.0;\r\n        this.freeAllTones();\r\n        if (this.song != null) {\r\n            for (const channelState of this.channels) {\r\n                for (const instrumentState of channelState.instruments) {\r\n                    instrumentState.resetAllEffects();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public setModValue(volumeStart: number, volumeEnd: number, channelIndex: number, instrumentIndex: number, setting: number): number {\r\n        let val: number = volumeStart + Config.modulators[setting].convertRealFactor;\r\n        let nextVal: number = volumeEnd + Config.modulators[setting].convertRealFactor;\r\n        // should these be turned into a function?\r\n        if (Config.modulators[setting].optionalModify == \"invert-0to50\") {\r\n            val = 50 - val;\r\n            nextVal = 50 - nextVal;\r\n        }\r\n        if (Config.modulators[setting].optionalModify == \"invert-0to99\") {\r\n            val = 99 - val;\r\n            nextVal = 99 - nextVal;\r\n        }\r\n        if (Config.modulators[setting].forSong) {\r\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n                this.modValues[setting] = val;\r\n                this.nextModValues[setting] = nextVal;\r\n            }\r\n        } else {\r\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\r\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\r\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\r\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\r\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\r\n            }\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    public getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n        const forSong: boolean = Config.modulators[setting].forSong;\r\n        if (forSong) {\r\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n            }\r\n        } else if (channel != undefined && instrument != undefined) {\r\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n    public isAnyModActive(channel: number, instrument: number): boolean {\r\n        for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n            if ((this.modValues != undefined && this.modValues[setting] != null)\r\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public unsetMod(setting: number, channel?: number, instrument?: number) {\r\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\r\n            this.modValues[setting] = null;\r\n            this.nextModValues[setting] = null;\r\n            for (let i: number = 0; i < this.heldMods.length; i++) {\r\n                if (channel != undefined && instrument != undefined) {\r\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\r\n                        this.heldMods.splice(i, 1);\r\n                } else {\r\n                    if (this.heldMods[i].setting == setting)\r\n                        this.heldMods.splice(i, 1);\r\n                }\r\n            }\r\n            if (channel != undefined && instrument != undefined) {\r\n                this.modInsValues[channel][instrument][setting] = null;\r\n                this.nextModInsValues[channel][instrument][setting] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number) {\r\n        const instrument: Instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\r\n\r\n        if (forNoteFilter) {\r\n            if (instrument.noteFilterType)\r\n                return false;\r\n            if (instrument.tmpNoteFilterEnd != null)\r\n                return true;\r\n        }\r\n        else {\r\n            if (instrument.eqFilterType)\r\n                return false;\r\n            if (instrument.tmpEqFilterEnd != null)\r\n                return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    public isModActive(setting: number, channel?: number, instrument?: number): boolean {\r\n        const forSong: boolean = Config.modulators[setting].forSong;\r\n        if (forSong) {\r\n            return (this.modValues != undefined && this.modValues[setting] != null);\r\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\r\n            return (this.modInsValues[channel][instrument][setting] != null);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Force a modulator to be held at the given volumeStart for a brief duration.\r\n    public forceHoldMods(volumeStart: number, channelIndex: number, instrumentIndex: number, setting: number): void {\r\n        let found: boolean = false;\r\n        for (let i: number = 0; i < this.heldMods.length; i++) {\r\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\r\n                this.heldMods[i].volume = volumeStart;\r\n                this.heldMods[i].holdFor = 24;\r\n                found = true;\r\n            }\r\n        }\r\n        // Default: hold for 24 ticks / 12 parts (half a beat).\r\n        if (!found)\r\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\r\n    }\r\n\r\n    public snapToStart(): void {\r\n        this.bar = 0;\r\n        this.resetEffects();\r\n        this.snapToBar();\r\n    }\r\n\r\n    public goToBar(bar: number): void {\r\n        this.bar = bar;\r\n        this.resetEffects();\r\n        this.playheadInternal = this.bar;\r\n    }\r\n\r\n    public snapToBar(): void {\r\n        this.playheadInternal = this.bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = 0;\r\n    }\r\n\r\n    public jumpIntoLoop(): void {\r\n        if (!this.song) return;\r\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n            const oldBar: number = this.bar;\r\n            this.bar = this.song.loopStart;\r\n            this.playheadInternal += this.bar - oldBar;\r\n\r\n            if (this.playing)\r\n                this.computeLatestModValues();\r\n        }\r\n    }\r\n\r\n    public goToNextBar(): void {\r\n        if (!this.song) return;\r\n        this.prevBar = this.bar;\r\n        const oldBar: number = this.bar;\r\n        this.bar++;\r\n        if (this.bar >= this.song.barCount) {\r\n            this.bar = 0;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public goToPrevBar(): void {\r\n        if (!this.song) return;\r\n        this.prevBar = null;\r\n        const oldBar: number = this.bar;\r\n        this.bar--;\r\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\r\n            this.bar = this.song.barCount - 1;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    private getNextBar(): number {\r\n        let nextBar: number = this.bar + 1;\r\n        if (this.isRecording) {\r\n            if (nextBar >= this.song!.barCount) {\r\n                nextBar = this.song!.barCount - 1;\r\n            }\r\n        } else if (this.bar == this.loopBarEnd && !this.renderingSong) {\r\n            nextBar = this.loopBarStart;\r\n        }\r\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd+1, this.song!.loopStart + this.song!.loopLength)) {\r\n            nextBar = this.song!.loopStart;\r\n        }\r\n        return nextBar;\r\n    }\r\n\r\n    public skipBar(): void {\r\n        if (!this.song) return;\r\n        const samplesPerTick: number = this.getSamplesPerTick();\r\n        if (this.loopBarEnd != this.bar)\r\n            this.bar++;\r\n        else {\r\n            this.bar = this.loopBarStart;\r\n        }\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = samplesPerTick;\r\n\t    this.isAtStartOfTick = true;\r\n\r\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\r\n            this.bar = this.song.loopStart;\r\n            if (this.loopBarStart != -1)\r\n                this.bar = this.loopBarStart;\r\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n        }\r\n\r\n    }\r\n\r\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\r\n        const outputBuffer = audioProcessingEvent.outputBuffer;\r\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\r\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\r\n            this.browserAutomaticallyClearsAudioBuffer = false;\r\n        }\r\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\r\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\r\n            const length: number = outputBuffer.length;\r\n            for (let i: number = 0; i < length; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n        }\r\n\r\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\r\n            this.deactivateAudio();\r\n        } else {\r\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n\r\n            if (this.oscEnabled) {\r\n                if (this.oscRefreshEventTimer <= 0) {\r\n                    events.raise(\"oscillascopeUpdate\", outputDataL, outputDataR);\r\n                    this.oscRefreshEventTimer = 2;\r\n                } else {\r\n                    this.oscRefreshEventTimer--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n        if (this.song == null) {\r\n            for (let i: number = 0; i < outputBufferLength; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n            return;\r\n        }\r\n\r\n        const song: Song = this.song;\r\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\r\n        this.song.outVolumeCap = 0.0;\r\n\r\n        let samplesPerTick: number = this.getSamplesPerTick();\r\n        let ended: boolean = false;\r\n\r\n        // Check the bounds of the playhead:\r\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\r\n            this.tickSampleCountdown = samplesPerTick;\r\n            this.isAtStartOfTick = true;\r\n        }\r\n        if (playSong) {\r\n            if (this.beat >= song.beatsPerBar) {\r\n                this.beat = 0;\r\n                this.part = 0;\r\n                this.tick = 0;\r\n                this.tickSampleCountdown = samplesPerTick;\r\n                this.isAtStartOfTick = true;\r\n\r\n                this.prevBar = this.bar;\r\n                this.bar = this.getNextBar();\r\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\r\n            }\r\n            if (this.bar >= song.barCount) {\r\n                this.bar = 0;\r\n                if (this.loopRepeatCount != -1) {\r\n                    ended = true;\r\n                    this.pause();\r\n                }\r\n            }\r\n        }\r\n\r\n        //const synthStartTime: number = performance.now();\r\n\r\n        this.syncSongState();\r\n\r\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\r\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\r\n        }\r\n\r\n        // Post processing parameters:\r\n        const volume: number = +this.volume;\r\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\r\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\r\n        let limit: number = +this.limit;\r\n\t    \t\t\tlet skippedBars = [];\r\n        let firstSkippedBufferIndex = -1;\r\n\r\n        let bufferIndex: number = 0;\r\n        while (bufferIndex < outputBufferLength && !ended) {\r\n\r\n            this.nextBar = this.getNextBar();\r\n            if (this.nextBar >= song.barCount) this.nextBar = null;\r\n\r\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n            const samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\r\n            const runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\r\n            const runEnd: number = bufferIndex + runLength;\r\n\r\n            // Handle mod synth\r\n            if (this.isPlayingSong || this.renderingSong) {\r\n\r\n                // First modulation pass. Determines active tones.\r\n                // Runs everything but Dot X/Y mods, to let them always come after morph.\r\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\r\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.activeModTones.get(i);\r\n                            const channel: Channel = song.channels[channelIndex];\r\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\r\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\r\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\r\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\r\n                                continue;\r\n                            }\r\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                 // Second modulation pass.\r\n                // Only for Dot X/Y mods.\r\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.activeModTones.get(i);\r\n                            const channel: Channel = song.channels[channelIndex];\r\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\r\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\r\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\r\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\r\n\r\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle next bar mods if they were set\r\n            if (this.wantToSkip) {\r\n\t\t    \t\t\t\t\t// Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\r\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\r\n                let barVisited = skippedBars.includes(this.bar);\r\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\r\n                    this.pause();\r\n                    return;\r\n                }\r\n                if (firstSkippedBufferIndex == -1) {\r\n                    firstSkippedBufferIndex = bufferIndex;\r\n                }\r\n                if (!barVisited)\r\n                    skippedBars.push(this.bar);\r\n                this.wantToSkip = false;\r\n                this.skipBar();\r\n\t\t    \tcontinue;\r\n            }\r\n\r\n            for (let channelIndex: number = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\r\n                const channel: Channel = song.channels[channelIndex];\r\n                const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                if (this.isAtStartOfTick) {\r\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\r\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\r\n                }\r\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\r\n                    const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n\r\n                    if (this.isAtStartOfTick) {\r\n                        let tonesPlayedInThisInstrument: number = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\r\n\r\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.releasedTones.get(i);\r\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\r\n                                this.freeReleasedTone(instrumentState, i);\r\n                                i--;\r\n                                continue;\r\n                            }\r\n                            const shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\r\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\r\n                            tonesPlayedInThisInstrument++;\r\n                        }\r\n\r\n                        if (instrumentState.awake) {\r\n                            if (!instrumentState.computed) {\r\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\r\n                            }\r\n\r\n                            instrumentState.computed = false;\r\n                            //instrumentState.envelopeComputer.clearEnvelopes();\r\n                        }\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.activeTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.liveInputTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.releasedTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    if (instrumentState.awake) {\r\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\r\n                    }\r\n\r\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n                    const tickSampleCountdown: number = this.tickSampleCountdown;\r\n                    const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n                    const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n                    const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n                    const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n                    const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n                    const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n                    const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\r\n\r\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\r\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\r\n                    }\r\n\r\n                    if (useVibratoSpeed == 0) {\r\n                        instrumentState.vibratoTime = 0;\r\n                        instrumentState.nextVibratoTime = 0;\r\n                    }\r\n                    else {\r\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.enableMetronome || this.countInMetronome) {\r\n                if (this.part == 0) {\r\n                    if (!this.startedMetronome) {\r\n                        const midBeat: boolean = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\r\n                        const periods: number = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\r\n                        const hz: number = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\r\n                        const amplitude: number = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\r\n                        const samplesPerPeriod: number = this.samplesPerSecond / hz;\r\n                        const radiansPerSample: number = Math.PI * 2.0 / samplesPerPeriod;\r\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\r\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\r\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\r\n                        this.metronomePrevAmplitude = 0.0;\r\n\r\n                        this.startedMetronome = true;\r\n                    }\r\n                    if (this.metronomeSamplesRemaining > 0) {\r\n                        const stopIndex: number = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\r\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\r\n                        for (let i: number = bufferIndex; i < stopIndex; i++) {\r\n                            outputDataL[i] += this.metronomeAmplitude;\r\n                            outputDataR[i] += this.metronomeAmplitude;\r\n                            const tempAmplitude: number = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\r\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\r\n                            this.metronomeAmplitude = tempAmplitude;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.startedMetronome = false;\r\n                }\r\n            }\r\n\r\n            // Post processing:\r\n            for (let i: number = bufferIndex; i < runEnd; i++) {\r\n                // A compressor/limiter.\r\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\r\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\r\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n                const abs: number = absL > absR ? absL : absR;\r\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n                const limitRange: number = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\r\n                // Determine the target amplification based on the range of the curve\r\n                const limitTarget: number =\r\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\r\n                    + (+(limitRange == 1)) * (1.05)\r\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\r\n                // Move the limit towards the target\r\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n                outputDataL[i] = sampleL * limitedVolume;\r\n                outputDataR[i] = sampleR * limitedVolume;\r\n\r\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n            }\r\n\r\n            bufferIndex += runLength;\r\n\r\n            this.isAtStartOfTick = false;\r\n            this.tickSampleCountdown -= runLength;\r\n            if (this.tickSampleCountdown <= 0) {\r\n                this.isAtStartOfTick = true;\r\n\r\n                // Track how long tones have been released, and free them if there are too many.\r\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\r\n                for (const channelState of this.channels) {\r\n                    for (const instrumentState of channelState.instruments) {\r\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.releasedTones.get(i);\r\n                            if (tone.isOnLastTick) {\r\n                                this.freeReleasedTone(instrumentState, i);\r\n                                i--;\r\n                            } else {\r\n                                tone.ticksSinceReleased++;\r\n                            }\r\n                        }\r\n                        if (instrumentState.deactivateAfterThisTick) {\r\n                            instrumentState.deactivate();\r\n                        }\r\n                        instrumentState.tonesAddedInThisTick = false;\r\n                    }\r\n                }\r\n\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        let instrumentState: InstrumentState = this.channels[channel].instruments[instrumentIdx];\r\n\r\n                        // Update arpeggio time, which is used to calculate arpeggio position\r\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\r\n                            useArpeggioSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false)));\r\n                            if (Number.isInteger(useArpeggioSpeed)) {\r\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                            } else {\r\n                                // Linear interpolate arpeggio values\r\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                        }\r\n\r\n                        // Update envelope time, which is used to calculate (all envelopes') position\r\n                        let useEnvelopeSpeed: number = instrument.envelopeSpeed;\r\n                        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\r\n                            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\r\n                            if (Number.isInteger(useEnvelopeSpeed)) {\r\n                                instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\r\n                            } else {\r\n                                // Linear interpolate envelope values\r\n                                instrumentState.envelopeTime += (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update next-used filters after each run\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        if (instrument.tmpEqFilterEnd != null) {\r\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\r\n                        } else {\r\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\r\n                        }\r\n                        if (instrument.tmpNoteFilterEnd != null) {\r\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\r\n                        } else {\r\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.tick++;\r\n                this.tickSampleCountdown += samplesPerTick;\r\n                if (this.tick == Config.ticksPerPart) {\r\n                    this.tick = 0;\r\n                    this.part++;\r\n                    this.liveInputDuration--;\r\n                    this.liveBassInputDuration--;\r\n                    // Decrement held modulator counters after each run\r\n                    for (let i: number = 0; i < this.heldMods.length; i++) {\r\n                        this.heldMods[i].holdFor--;\r\n                        if (this.heldMods[i].holdFor <= 0) {\r\n                            this.heldMods.splice(i, 1);\r\n                        }\r\n                    }\r\n\r\n                    if (this.part == Config.partsPerBeat) {\r\n                        this.part = 0;\r\n\r\n                        if (playSong) {\r\n                            this.beat++;\r\n                            if (this.beat == song.beatsPerBar) {\r\n                                // bar changed, reset for next bar:\r\n                                this.beat = 0;\r\n\r\n                                if (this.countInMetronome) {\r\n                                    this.countInMetronome = false;\r\n                                } else {\r\n                                    this.prevBar = this.bar;\r\n                                    this.bar = this.getNextBar();\r\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\r\n                                    if (this.bar >= song.barCount) {\r\n                                        this.bar = 0;\r\n                                        if (this.loopRepeatCount != -1) {\r\n                                            ended = true;\r\n                                            this.resetEffects();\r\n                                            this.pause();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update mod values so that next values copy to current values\r\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\r\n                    this.modValues[setting] = this.nextModValues[setting];\r\n            }\r\n\r\n            // Set samples per tick if song tempo mods changed it\r\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\r\n                samplesPerTick = this.getSamplesPerTick();\r\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n            }\r\n\r\n            // Bound LFO times to be within their period (to keep values from getting large)\r\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\r\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\r\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\r\n                    const instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\r\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n                    instrumentState.envelopeTime = (instrumentState.envelopeTime % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\r\n                }\r\n            }\r\n\r\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrument: number = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {\r\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Optimization: Avoid persistent reverb values in the float denormal range.\r\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\r\n        this.limit = limit;\r\n\r\n        if (playSong && !this.countInMetronome) {\r\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\r\n        }\r\n\r\n        /*\r\n        const synthDuration: number = performance.now() - synthStartTime;\r\n        // Performance measurements:\r\n        samplesAccumulated += outputBufferLength;\r\n        samplePerformance += synthDuration;\r\n    \t\r\n        if (samplesAccumulated >= 44100 * 4) {\r\n            const secondsGenerated = samplesAccumulated / 44100;\r\n            const secondsRequired = samplePerformance / 1000;\r\n            const ratio = secondsRequired / secondsGenerated;\r\n            console.log(ratio);\r\n            samplePerformance = 0;\r\n            samplesAccumulated = 0;\r\n        }\r\n        */\r\n    }\r\n\r\n    private freeTone(tone: Tone): void {\r\n        this.tonePool.pushBack(tone);\r\n    }\r\n\r\n    private newTone(): Tone {\r\n        if (this.tonePool.count() > 0) {\r\n            const tone: Tone = this.tonePool.popBack();\r\n            tone.freshlyAllocated = true;\r\n            return tone;\r\n        }\r\n        return new Tone();\r\n    }\r\n\r\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\r\n        instrumentState.releasedTones.pushFront(tone);\r\n        tone.atNoteStart = false;\r\n        tone.passedEndOfNote = true;\r\n    }\r\n\r\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\r\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\r\n        instrumentState.releasedTones.remove(toneIndex);\r\n    }\r\n\r\n    public freeAllTones(): void {\r\n        for (const channelState of this.channels) {\r\n            for (const instrumentState of channelState.instruments) {\r\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\r\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\r\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\r\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\r\n            }\r\n        }\r\n    }\r\n\r\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const pitches: number[] = this.liveInputPitches;\r\n        const bassPitches: number[] = this.liveBassInputPitches;\r\n\r\n        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n            const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\r\n            let toneCount: number = 0;\r\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\r\n                const instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                if (instrument.getChord().singleTone) {\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= toneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\r\n                        tone = this.newTone();\r\n                        toneList.set(toneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(toneCount);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    for (let i: number = 0; i < pitches.length; i++) {\r\n                        tone.pitches[i] = pitches[i];\r\n                    }\r\n                    tone.pitchCount = pitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = instrumentIndex;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                    tone.atNoteStart = this.liveInputStarted;\r\n                    tone.forceContinueAtStart = false;\r\n                    tone.forceContinueAtEnd = false;\r\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                } else {\r\n                    //const transition: Transition = instrument.getTransition();\r\n\r\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\r\n\r\n                    for (let i: number = 0; i < pitches.length; i++) {\r\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                        let tone: Tone;\r\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                            tone = this.tempMatchedPitchTones[toneCount]!;\r\n                            this.tempMatchedPitchTones[toneCount] = null;\r\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\r\n                                this.releaseTone(instrumentState, tone);\r\n                                tone = this.newTone();\r\n                            }\r\n                            toneList.pushBack(tone);\r\n                        } else {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        tone.pitches[0] = pitches[i];\r\n                        tone.pitchCount = 1;\r\n                        tone.chordSize = pitches.length;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = tone.prevNote = tone.nextNote = null;\r\n                        tone.atNoteStart = this.liveInputStarted;\r\n                        tone.forceContinueAtStart = false;\r\n                        tone.forceContinueAtEnd = false;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\r\n                const instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                if (instrument.getChord().singleTone) {\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= toneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\r\n                        tone = this.newTone();\r\n                        toneList.set(toneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(toneCount);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    for (let i: number = 0; i < bassPitches.length; i++) {\r\n                        tone.pitches[i] = bassPitches[i];\r\n                    }\r\n                    tone.pitchCount = bassPitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = instrumentIndex;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                    tone.atNoteStart = this.liveBassInputStarted;\r\n                    tone.forceContinueAtStart = false;\r\n                    tone.forceContinueAtEnd = false;\r\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                } else {\r\n                    //const transition: Transition = instrument.getTransition();\r\n\r\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\r\n\r\n                    for (let i: number = 0; i < bassPitches.length; i++) {\r\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                        let tone: Tone;\r\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                            tone = this.tempMatchedPitchTones[toneCount]!;\r\n                            this.tempMatchedPitchTones[toneCount] = null;\r\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\r\n                                this.releaseTone(instrumentState, tone);\r\n                                tone = this.newTone();\r\n                            }\r\n                            toneList.pushBack(tone);\r\n                        } else {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        tone.pitches[0] = bassPitches[i];\r\n                        tone.pitchCount = 1;\r\n                        tone.chordSize = bassPitches.length;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = tone.prevNote = tone.nextNote = null;\r\n                        tone.atNoteStart = this.liveBassInputStarted;\r\n                        tone.forceContinueAtStart = false;\r\n                        tone.forceContinueAtEnd = false;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            while (toneList.count() > toneCount) {\r\n                this.releaseTone(instrumentState, toneList.popBack());\r\n            }\r\n\r\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\r\n        }\r\n\r\n        this.liveInputStarted = false;\r\n        this.liveBassInputStarted = false;\r\n    }\r\n\r\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\r\n    // seamless transition across patterns, otherwise returns null.\r\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\r\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\r\n            // The adjacent pattern does not contain the same instrument as the current pattern.\r\n\r\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\r\n                // The current or adjacent pattern contains more than one instrument, don't bother\r\n                // trying to connect them.\r\n                return null;\r\n            }\r\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\r\n            // Try to connect them.\r\n            const otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\r\n\r\n            if (forceContinue) {\r\n                // Even non-seamless instruments can be connected across patterns if forced.\r\n                return otherInstrument.getChord();\r\n            }\r\n\r\n            // Otherwise, check that both instruments are seamless across patterns.\r\n            const otherTransition: Transition = otherInstrument.getTransition();\r\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\r\n                return otherInstrument.getChord();\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\r\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\r\n        }\r\n    }\r\n\r\n    public static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\r\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\r\n        const firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\r\n        for (const pitch of firstNote.pitches) {\r\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\r\n        // The tones are about to seamlessly transition to a new note. The pitches\r\n        // from the old note may or may not match any of the pitches in the new\r\n        // note, and not necessarily in order, but if any do match, they'll sound\r\n        // better if those tones continue to have the same pitch. Attempt to find\r\n        // the right spot for each old tone in the new chord if possible.\r\n\r\n        for (let i: number = 0; i < toneList.count(); i++) {\r\n            const tone: Tone = toneList.get(i);\r\n            const pitch: number = tone.pitches[0] + tone.lastInterval;\r\n            for (let j: number = 0; j < notePitches.length; j++) {\r\n                if (notePitches[j] == pitch) {\r\n                    this.tempMatchedPitchTones[j] = tone;\r\n                    toneList.remove(i);\r\n                    i--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Any tones that didn't get matched should just fill in the gaps.\r\n        while (toneList.count() > 0) {\r\n            const tone: Tone = toneList.popFront();\r\n            for (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\r\n                if (this.tempMatchedPitchTones[j] == null) {\r\n                    this.tempMatchedPitchTones[j] = tone;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\r\n        const currentPart: number = this.getCurrentPart();\r\n        const currentTick: number = this.tick + Config.ticksPerPart * currentPart;\r\n\r\n        if (playSong && song.getChannelIsMod(channelIndex)) {\r\n\r\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\r\n            let notes: (Note | null)[] = [];\r\n            let prevNotes: (Note | null)[] = [];\r\n            let nextNotes: (Note | null)[] = [];\r\n            let fillCount: number = Config.modCount;\r\n            while (fillCount--) {\r\n                notes.push(null);\r\n                prevNotes.push(null);\r\n                nextNotes.push(null);\r\n            }\r\n\r\n            if (pattern != null && !channel.muted) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= currentPart) {\r\n                        // Actually need to check which note starts closer to the start of this note.\r\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\r\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                    }\r\n                    else if (pattern.notes[i].start > currentPart) {\r\n                        // Actually need to check which note starts closer to the end of this note.\r\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let modToneCount: number = 0;\r\n            const newInstrumentIndex: number = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\r\n            const instrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                if (notes[mod] != null) {\r\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n\r\n                }\r\n\r\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\r\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\r\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\r\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\r\n                    }\r\n                }\r\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\r\n\r\n                if (notes[mod] != null) {\r\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\r\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\r\n\r\n                    let forceContinueAtStart: boolean = false;\r\n                    let forceContinueAtEnd: boolean = false;\r\n                    const atNoteStart: boolean = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= modToneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\r\n                        const oldTone: Tone = toneList.get(modToneCount);\r\n                        if (oldTone.isOnLastTick) {\r\n                            this.freeTone(oldTone);\r\n                        } else {\r\n                            this.releaseTone(instrumentState, oldTone);\r\n                        }\r\n                        tone = this.newTone();\r\n                        toneList.set(modToneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(modToneCount);\r\n                    }\r\n                    modToneCount++;\r\n\r\n                    for (let i: number = 0; i < notes[mod]!.pitches.length; i++) {\r\n                        tone.pitches[i] = notes[mod]!.pitches[i];\r\n                    }\r\n                    tone.pitchCount = notes[mod]!.pitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = newInstrumentIndex;\r\n                    tone.note = notes[mod];\r\n                    tone.noteStartPart = notes[mod]!.start;\r\n                    tone.noteEndPart = notes[mod]!.end;\r\n                    tone.prevNote = prevNoteForThisInstrument;\r\n                    tone.nextNote = nextNoteForThisInstrument;\r\n                    tone.prevNotePitchIndex = 0;\r\n                    tone.nextNotePitchIndex = 0;\r\n                    tone.atNoteStart = atNoteStart;\r\n                    tone.passedEndOfNote = false;\r\n                    tone.forceContinueAtStart = forceContinueAtStart;\r\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\r\n                }\r\n            }\r\n            // Automatically free or release seamless tones if there's no new note to take over.\r\n            while (toneList.count() > modToneCount) {\r\n                const tone: Tone = toneList.popBack();\r\n                const channel: Channel = song.channels[channelIndex];\r\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\r\n                    this.releaseTone(instrumentState, tone);\r\n                } else {\r\n                    this.freeTone(tone);\r\n                }\r\n            }\r\n\r\n        }\r\n        else if (!song.getChannelIsMod(channelIndex)) {\r\n\r\n            let note: Note | null = null;\r\n            let prevNote: Note | null = null;\r\n            let nextNote: Note | null = null;\r\n\r\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= currentPart) {\r\n                        prevNote = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\r\n                        note = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start > currentPart) {\r\n                        nextNote = pattern.notes[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (note != null) {\r\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n                }\r\n            }\r\n\r\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\r\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\r\n                const newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\r\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\r\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\r\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n                    while (sourceInstrumentState.activeTones.count() > 0) {\r\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\r\n                    }\r\n                }\r\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\r\n            } else {\r\n                channelState.singleSeamlessInstrument = null;\r\n            }\r\n\r\n            for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n                const toneList: Deque<Tone> = instrumentState.activeTones;\r\n                let toneCount: number = 0;\r\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\r\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\r\n                    let prevNoteForThisInstrument: Note | null = prevNote;\r\n                    let nextNoteForThisInstrument: Note | null = nextNote;\r\n\r\n                    const partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\r\n                    const transition: Transition = instrument.getTransition();\r\n                    const chord: Chord = instrument.getChord();\r\n                    let forceContinueAtStart: boolean = false;\r\n                    let forceContinueAtEnd: boolean = false;\r\n                    let tonesInPrevNote: number = 0;\r\n                    let tonesInNextNote: number = 0;\r\n                    if (note.start == 0) {\r\n                        // If the beginning of the note coincides with the beginning of the pattern,\r\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\r\n                        if (prevPattern != null) {\r\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\r\n                            if (lastNote != null && lastNote.end == partsPerBar) {\r\n                                const patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\r\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\r\n                                if (chordOfCompatibleInstrument != null) {\r\n                                    prevNoteForThisInstrument = lastNote;\r\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\r\n                                    forceContinueAtStart = patternForcesContinueAtStart;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (prevNoteForThisInstrument != null) {\r\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\r\n                    }\r\n                    if (note.end == partsPerBar) {\r\n                        // If the end of the note coincides with the end of the pattern, look for an\r\n                        // adjacent note at the beginning of the next pattern.\r\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\r\n                        if (nextPattern != null) {\r\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\r\n                            if (firstNote != null && firstNote.start == 0) {\r\n                                const nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\r\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\r\n                                if (chordOfCompatibleInstrument != null) {\r\n                                    nextNoteForThisInstrument = firstNote;\r\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\r\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (nextNoteForThisInstrument != null) {\r\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\r\n                    }\r\n\r\n                    if (chord.singleTone) {\r\n                        const atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick);\r\n                        let tone: Tone;\r\n                        if (toneList.count() <= toneCount) {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\r\n                            const oldTone: Tone = toneList.get(toneCount);\r\n                            if (oldTone.isOnLastTick) {\r\n                                this.freeTone(oldTone);\r\n                            } else {\r\n                                this.releaseTone(instrumentState, oldTone);\r\n                            }\r\n                            tone = this.newTone();\r\n                            toneList.set(toneCount, tone);\r\n                        } else {\r\n                            tone = toneList.get(toneCount);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        for (let i: number = 0; i < note.pitches.length; i++) {\r\n                            tone.pitches[i] = note.pitches[i];\r\n                        }\r\n                        tone.pitchCount = note.pitches.length;\r\n                        tone.chordSize = 1;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = note;\r\n                        tone.noteStartPart = note.start;\r\n                        tone.noteEndPart = note.end;\r\n                        tone.prevNote = prevNoteForThisInstrument;\r\n                        tone.nextNote = nextNoteForThisInstrument;\r\n                        tone.prevNotePitchIndex = 0;\r\n                        tone.nextNotePitchIndex = 0;\r\n                        tone.atNoteStart = atNoteStart;\r\n                        tone.passedEndOfNote = false;\r\n                        tone.forceContinueAtStart = forceContinueAtStart;\r\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    } else {\r\n                        const transition: Transition = instrument.getTransition();\r\n\r\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\r\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\r\n                        }\r\n\r\n                        let strumOffsetParts: number = 0;\r\n                        for (let i: number = 0; i < note.pitches.length; i++) {\r\n\r\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\r\n                            let noteForThisTone: Note = note;\r\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\r\n                            let noteStartPart: number = noteForThisTone.start + strumOffsetParts;\r\n                            let passedEndOfNote: boolean = false;\r\n\r\n                            // Strumming may mean that a note's actual start time may be after the\r\n                            // note's displayed start time. If the note start hasn't been reached yet,\r\n                            // carry over the previous tone if available and seamless, otherwise skip\r\n                            // the new tone until it is ready to start.\r\n                            if (noteStartPart > currentPart) {\r\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\r\n                                    // Continue the previous note's chord until the current one takes over.\r\n                                    nextNoteForThisTone = noteForThisTone;\r\n                                    noteForThisTone = prevNoteForThisTone;\r\n                                    prevNoteForThisTone = null;\r\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\r\n                                    passedEndOfNote = true;\r\n                                } else {\r\n                                    // This and the rest of the tones in the chord shouldn't start yet.\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            let noteEndPart: number = noteForThisTone.end;\r\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\r\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\r\n                            }\r\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\r\n                                strumOffsetParts += chord.strumParts;\r\n                            }\r\n\r\n                            const atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick);\r\n                            let tone: Tone;\r\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                                tone = this.tempMatchedPitchTones[toneCount]!;\r\n                                this.tempMatchedPitchTones[toneCount] = null;\r\n                                toneList.pushBack(tone);\r\n                            } else if (toneList.count() <= toneCount) {\r\n                                tone = this.newTone();\r\n                                toneList.pushBack(tone);\r\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\r\n                                const oldTone: Tone = toneList.get(toneCount);\r\n                                if (oldTone.isOnLastTick) {\r\n                                    this.freeTone(oldTone);\r\n                                } else {\r\n                                    this.releaseTone(instrumentState, oldTone);\r\n                                }\r\n                                tone = this.newTone();\r\n                                toneList.set(toneCount, tone);\r\n                            } else {\r\n                                tone = toneList.get(toneCount);\r\n                            }\r\n                            toneCount++;\r\n\r\n                            tone.pitches[0] = noteForThisTone.pitches[i];\r\n                            tone.pitchCount = 1;\r\n                            tone.chordSize = noteForThisTone.pitches.length;\r\n                            tone.instrumentIndex = instrumentIndex;\r\n                            tone.note = noteForThisTone;\r\n                            tone.noteStartPart = noteStartPart;\r\n                            tone.noteEndPart = noteEndPart;\r\n                            tone.prevNote = prevNoteForThisTone;\r\n                            tone.nextNote = nextNoteForThisTone;\r\n                            tone.prevNotePitchIndex = i;\r\n                            tone.nextNotePitchIndex = i;\r\n                            tone.atNoteStart = atNoteStart;\r\n                            tone.passedEndOfNote = passedEndOfNote;\r\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\r\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\r\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                        }\r\n                    }\r\n                }\r\n                // Automatically free or release seamless tones if there's no new note to take over.\r\n                while (toneList.count() > toneCount) {\r\n                    const tone: Tone = toneList.popBack();\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n                        this.releaseTone(instrumentState, tone);\r\n                    } else {\r\n                        this.freeTone(tone);\r\n                    }\r\n                }\r\n\r\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\r\n        for (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\r\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\r\n            if (oldTone != null) {\r\n                if (oldTone.isOnLastTick) {\r\n                    this.freeTone(oldTone);\r\n                } else {\r\n                    this.releaseTone(instrumentState, oldTone);\r\n                }\r\n                this.tempMatchedPitchTones[i] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n\r\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\r\n        tone.envelopeComputer.clearEnvelopes();\r\n    }\r\n\r\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\r\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n\r\n        if (tone.note != null) {\r\n            const ticksIntoBar: number = this.getTicksIntoBar();\r\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n            const tickSampleCountdown: number = this.tickSampleCountdown;\r\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n            const endRatio: number = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\r\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n            const tickTimeStart: number = Config.ticksPerPart * partTimeStart;\r\n            const tickTimeEnd: number = Config.ticksPerPart * partTimeEnd;\r\n            const endPinIndex: number = tone.note.getEndPinIndex(this.getCurrentPart());\r\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = tone.note.pins[endPinIndex];\r\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\r\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\r\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\r\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\r\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\r\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\r\n\r\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\r\n        }\r\n    }\r\n\r\n    private static computeChordExpression(chordSize: number): number {\r\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n    }\r\n\r\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n        instrumentState.awake = true;\r\n        instrumentState.tonesAddedInThisTick = true;\r\n        if (!instrumentState.computed) {\r\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\r\n        }\r\n        const transition: Transition = instrument.getTransition();\r\n        const chord: Chord = instrument.getChord();\r\n        const chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\r\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\r\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\r\n        const sampleTime: number = 1.0 / this.samplesPerSecond;\r\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n        const ticksIntoBar: number = this.getTicksIntoBar();\r\n        const partTimeStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n        const partTimeEnd: number = (ticksIntoBar + 1.0) / Config.ticksPerPart;\r\n        const currentPart: number = this.getCurrentPart();\r\n\r\n        let specialIntervalMult: number = 1.0;\r\n        tone.specialIntervalExpressionMult = 1.0;\r\n\r\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\r\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n        //}\r\n\r\n        let toneIsOnLastTick: boolean = shouldFadeOutFast;\r\n        let intervalStart: number = 0.0;\r\n        let intervalEnd: number = 0.0;\r\n        let fadeExpressionStart: number = 1.0;\r\n        let fadeExpressionEnd: number = 1.0;\r\n        let chordExpressionStart: number = chordExpression;\r\n        let chordExpressionEnd: number = chordExpression;\r\n\r\n        let expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\r\n        let basePitch: number = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\r\n        let baseExpression: number = 1.0;\r\n        let pitchDamping: number = 48;\r\n        if (instrument.type == InstrumentType.spectrum) {\r\n            baseExpression = Config.spectrumBaseExpression;\r\n            if (isNoiseChannel) {\r\n                basePitch = Config.spectrumBasePitch;\r\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\r\n            }\r\n            expressionReferencePitch = Config.spectrumBasePitch;\r\n            pitchDamping = 28;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            basePitch = Config.spectrumBasePitch;\r\n            baseExpression = Config.drumsetBaseExpression;\r\n            expressionReferencePitch = basePitch;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            // dogebox2 code, makes basic noise affected by keys in pitch channels\r\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\r\n            // maybe also lower expression in pitch channels?\r\n            baseExpression = Config.noiseBaseExpression;\r\n            expressionReferencePitch = basePitch;\r\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n        } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\r\n            baseExpression = Config.fmBaseExpression;\r\n        } else if (instrument.type == InstrumentType.chip){\r\n                baseExpression = Config.chipBaseExpression;\r\n\t\t\t\tif (Config.chipWaves[instrument.chipWave].isCustomSampled) {\r\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isPercussion){\r\n\t\t\t\t\t\tbasePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tbasePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!); \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\r\n\t\t\t\t\t\tbasePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune!\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\r\n\t\t\t\t\tbasePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune!;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            } else if (instrument.type == InstrumentType.customChipWave) {\r\n            baseExpression = Config.chipBaseExpression;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            baseExpression = Config.harmonicsBaseExpression;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            baseExpression = Config.pwmBaseExpression;\r\n        } else if (instrument.type == InstrumentType.supersaw) {\r\n\t\t\tbaseExpression = Config.supersawBaseExpression;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            baseExpression = Config.pickedStringBaseExpression;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            baseExpression = 1.0;\r\n            expressionReferencePitch = 0;\r\n            pitchDamping = 1.0;\r\n            basePitch = 0;\r\n        } else {\r\n            throw new Error(\"Unknown instrument type in computeTone.\");\r\n        }\r\n\r\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\r\n            tone.reset();\r\n\t\t\t    // advloop addition\r\n            if (instrument.type == InstrumentType.chip && instrument.isUsingAdvancedLoopControls) {\r\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\r\n                const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;\r\n                // const lastOffset = (chipWaveLength - 0.01) / chipWaveLength;\r\n                // @TODO: This is silly and I should actually figure out how to\r\n                // properly keep lastOffset as 1.0 and not get it wrapped back\r\n                // to 0 once it's in `Synth.loopableChipSynth`.\r\n                const lastOffset = 0.999999999999999;\r\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\r\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\r\n                    tone.chipWaveCompletions[i] = 0;\r\n                    tone.chipWavePrevWaves[i] = 0;\r\n                    tone.chipWaveCompletionsLastWave[i] = 0;\r\n                }\r\n            }\r\n                // advloop addition\r\n        }\r\n        tone.freshlyAllocated = false;\r\n\r\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n            tone.phaseDeltas[i] = 0.0;\r\n            tone.phaseDeltaScales[i] = 0.0;\r\n            tone.operatorExpressions[i] = 0.0;\r\n            tone.operatorExpressionDeltas[i] = 0.0;\r\n        }\r\n        tone.expression = 0.0;\r\n        tone.expressionDelta = 0.0;\r\n        for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); i++) {\r\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\r\n        }\r\n\r\n        if (released) {\r\n            const startTicksSinceReleased: number = tone.ticksSinceReleased;\r\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + 1.0;\r\n            intervalStart = intervalEnd = tone.lastInterval;\r\n            const fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\r\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\r\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\r\n\r\n            if (shouldFadeOutFast) {\r\n                fadeExpressionEnd = 0.0;\r\n            }\r\n\r\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\r\n        } else if (tone.note == null) {\r\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\r\n            tone.lastInterval = 0;\r\n            tone.ticksSinceReleased = 0;\r\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\r\n        } else {\r\n            const note: Note = tone.note;\r\n            const nextNote: Note | null = tone.nextNote;\r\n\r\n            const noteStartPart: number = tone.noteStartPart;\r\n            const noteEndPart: number = tone.noteEndPart;\r\n\r\n\r\n            const endPinIndex: number = note.getEndPinIndex(currentPart);\r\n            const startPin: NotePin = note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = note.pins[endPinIndex];\r\n            const noteStartTick: number = noteStartPart * Config.ticksPerPart;\r\n            const noteEndTick: number = noteEndPart * Config.ticksPerPart;\r\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n            tone.ticksSinceReleased = 0;\r\n\r\n            const tickTimeStart: number = currentPart * Config.ticksPerPart + this.tick;\r\n            const tickTimeEnd: number = tickTimeStart + 1.0;\r\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n            fadeExpressionStart = 1.0;\r\n            fadeExpressionEnd = 1.0;\r\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n            tone.lastInterval = intervalEnd;\r\n\r\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\r\n                const fadeOutTicks: number = -instrument.getFadeOutTicks();\r\n                if (fadeOutTicks > 0.0) {\r\n                    // If the tone should fade out before the end of the note, do so here.\r\n                    const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\r\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\r\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        tone.isOnLastTick = toneIsOnLastTick;\r\n\r\n        let tmpNoteFilter: FilterSettings = instrument.noteFilter;\r\n        let startPoint: FilterControlPoint;\r\n        let endPoint: FilterControlPoint;\r\n\r\n        if (instrument.noteFilterType) {\r\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\r\n            const noteFilterSettingsStart: FilterSettings = instrument.noteFilter;\r\n            if (instrument.noteSubFilters[1] == null)\r\n                instrument.noteSubFilters[1] = new FilterSettings();\r\n            const noteFilterSettingsEnd: FilterSettings = instrument.noteSubFilters[1];\r\n\r\n            // Change location based on slider values\r\n            let startSimpleFreq: number = instrument.noteFilterSimpleCut;\r\n            let startSimpleGain: number = instrument.noteFilterSimplePeak;\r\n            let endSimpleFreq: number = instrument.noteFilterSimpleCut;\r\n            let endSimpleGain: number = instrument.noteFilterSimplePeak;\r\n            let filterChanges: boolean = false;\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\r\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\r\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\r\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\r\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n\r\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\r\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\r\n\r\n            startPoint = noteFilterSettingsStart.controlPoints[0];\r\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\r\n\r\n            // Temporarily override so that envelope computer uses appropriate computed note filter\r\n            instrument.noteFilter = noteFilterSettingsStart;\r\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\r\n        }\r\n\r\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\r\n        const envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\r\n        let useEnvelopeSpeed: number = Config.arpSpeedScale[instrument.envelopeSpeed];\r\n        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\r\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\r\n            if (Number.isInteger(useEnvelopeSpeed)) {\r\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\r\n            } else {\r\n                // Linear interpolate envelope values\r\n                useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\r\n            }\r\n        }\r\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, useEnvelopeSpeed);\r\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\r\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\r\n        instrument.noteFilter = tmpNoteFilter;\r\n\r\n        if (tone.note != null && transition.slides) {\r\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\r\n            const prevNote: Note | null = tone.prevNote;\r\n            const nextNote: Note | null = tone.nextNote;\r\n            if (prevNote != null) {\r\n                const intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\r\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\r\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\r\n                if (!chord.singleTone) {\r\n                    const chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\r\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\r\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\r\n                }\r\n            }\r\n            if (nextNote != null) {\r\n                const intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\r\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\r\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\r\n                if (!chord.singleTone) {\r\n                    const chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\r\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\r\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (effectsIncludePitchShift(instrument.effects)) {\r\n            let pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\r\n            let pitchShiftScalarStart: number = 1.0;\r\n            let pitchShiftScalarEnd: number = 1.0;\r\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\r\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\r\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\r\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\r\n            }\r\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.pitchShift];\r\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.pitchShift];\r\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\r\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\r\n        }\r\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.detune];\r\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.detune];\r\n            let modDetuneStart: number = instrument.detune;\r\n            let modDetuneEnd: number = instrument.detune;\r\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\r\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\r\n            }\r\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\r\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\r\n            }\r\n            intervalStart += Synth.detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\r\n            intervalEnd += Synth.detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\r\n        }\r\n\r\n        if (effectsIncludeVibrato(instrument.effects)) {\r\n            let delayTicks: number;\r\n            let vibratoAmplitudeStart: number;\r\n            let vibratoAmplitudeEnd: number;\r\n            // Custom vibrato\r\n            if (instrument.vibrato == Config.vibratos.length) {\r\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\r\n                // Special case: if vibrato delay is max, NEVER vibrato.\r\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\r\n                    delayTicks = Number.POSITIVE_INFINITY;\r\n                vibratoAmplitudeStart = instrument.vibratoDepth;\r\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\r\n            } else {\r\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\r\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\r\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\r\n            }\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\r\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\r\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\r\n                    delayTicks = Number.POSITIVE_INFINITY;\r\n\r\n            }\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\r\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\r\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\r\n            }\r\n\r\n\r\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\r\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\r\n            // of the next run if available.\r\n            let vibratoStart: number;\r\n            if (tone.prevVibrato != null) {\r\n                vibratoStart = tone.prevVibrato;\r\n            } else {\r\n                let vibratoLfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\r\n                const vibratoDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\r\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\r\n                if (delayTicks > 0.0) {\r\n                    const ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\r\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\r\n                }\r\n            }\r\n\r\n            let vibratoLfoEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\r\n            const vibratoDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\r\n            if (instrument.type != InstrumentType.mod) {\r\n                let vibratoEnd: number = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\r\n                if (delayTicks > 0.0) {\r\n                    const ticksUntilVibratoEnd: number = delayTicks - envelopeComputer.noteTicksEnd;\r\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\r\n                }\r\n\r\n                tone.prevVibrato = vibratoEnd;\r\n\r\n                intervalStart += vibratoStart;\r\n                intervalEnd += vibratoEnd;\r\n            }\r\n        }\r\n\r\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\r\n            // Fade in the beginning of the note.\r\n            const fadeInSeconds: number = instrument.getFadeInSeconds();\r\n            if (fadeInSeconds > 0.0) {\r\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStart / fadeInSeconds);\r\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEnd / fadeInSeconds);\r\n            }\r\n        }\r\n\r\n\r\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\r\n            // It's possible that the note will change while the user is editing it,\r\n            // but the tone's pitches don't get updated because the tone has already\r\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n            tone.drumsetPitch = tone.pitches[0];\r\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n        }\r\n\r\n        let noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\r\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\r\n            tone.noteFilterCount = 0;\r\n        } else {\r\n\r\n            const noteAllFreqsEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\r\n            const noteAllFreqsEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\r\n\r\n            // Simple note filter\r\n            if (instrument.noteFilterType) {\r\n                const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\r\n                const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\r\n                const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\r\n                const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\r\n\r\n                startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\r\n                endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\r\n\r\n                if (tone.noteFilters.length < 1) tone.noteFilters[0] = new DynamicBiquadFilter();\r\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\r\n                noteFilterExpression *= startPoint!.getVolumeCompensationMult();\r\n\r\n                tone.noteFilterCount = 1;\r\n            }\r\n            else {\r\n                const noteFilterSettings: FilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\r\n\r\n                for (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\r\n                    const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\r\n                    const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\r\n                    const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\r\n                    const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\r\n                    let startPoint: FilterControlPoint = noteFilterSettings.controlPoints[i];\r\n                    const endPoint: FilterControlPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\r\n\r\n                    // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\r\n                    if (startPoint.type != endPoint.type) {\r\n                        startPoint = endPoint;\r\n                    }\r\n\r\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\r\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\r\n                    if (tone.noteFilters.length <= i) tone.noteFilters[i] = new DynamicBiquadFilter();\r\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\r\n                }\r\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\r\n            }\r\n        }\r\n\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            const drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\r\n            //const timeScale: number = Config.arpSpeedScale[instrument.envelopeSpeed];\r\n            //secondsPerTick *= timeScale;\r\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\r\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope)\r\n\r\n            // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\r\n            let drumsetFilterEnvelopeStart: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);\r\n\r\n            // Apply slide interpolation to drumset envelope.\r\n            if (envelopeComputer.prevSlideStart) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);\r\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;\r\n            }\r\n            if (envelopeComputer.nextSlideStart) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);\r\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;\r\n            }\r\n            \r\n            let drumsetFilterEnvelopeEnd: number = drumsetFilterEnvelopeStart;\r\n\r\n            if ( instrument.discreteEnvelope == false ) {\r\n                drumsetFilterEnvelopeEnd = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);\r\n\r\n                if (envelopeComputer.prevSlideEnd) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);\r\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;\r\n                }\r\n                if (envelopeComputer.nextSlideEnd) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);\r\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;\r\n                }\r\n            }\r\n\r\n            const point: FilterControlPoint = this.tempDrumSetControlPoint;\r\n            point.type = FilterType.lowPass;\r\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);\r\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\r\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\r\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\r\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\r\n            if (tone.noteFilters.length == tone.noteFilterCount) tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\r\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\r\n            tone.noteFilterCount++;\r\n        }\r\n\r\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\r\n\r\n        if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\r\n            // phase modulation!\r\n\r\n            let sineExpressionBoost: number = 1.0;\r\n            let totalCarrierExpression: number = 0.0;\r\n\r\n            let arpeggioInterval: number = 0;\r\n            const arpeggiates: boolean = chord.arpeggiates;\r\n            if (tone.pitchCount > 1 && arpeggiates) {\r\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\r\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n            }\r\n\r\n\r\n            const carrierCount: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\r\n            for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op? 6 : Config.operatorCount); i++) {\r\n\r\n                const associatedCarrierIndex: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.associatedCarrier[i]-1:Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\r\n                const pitch: number = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n                const pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\r\n                const pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\r\n                const baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart);\r\n                const baseFreqEnd: number = Instrument.frequencyFromPitch(pitchEnd);\r\n                const hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n                const targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\r\n                const targetFreqEnd: number = freqMult * baseFreqEnd + hzOffset;\r\n\r\n                \r\n                const freqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\r\n                const freqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\r\n                let freqStart: number;\r\n                let freqEnd: number;\r\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\r\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\r\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\r\n                } else {\r\n                    freqStart = targetFreqStart;\r\n                    freqEnd = targetFreqEnd;\r\n                }\r\n                tone.phaseDeltas[i] = freqStart * sampleTime;\r\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\r\n\r\n                let amplitudeStart: number = instrument.operators[i].amplitude;\r\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\r\n                if (i < 4){\r\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\r\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n                    }\r\n                } else {\r\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex)) {\r\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n                    }\r\n                }\r\n\r\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\r\n                let expressionStart: number = amplitudeMultStart;\r\n                let expressionEnd: number = amplitudeMultEnd;\r\n\r\n\r\n                if (i < carrierCount) {\r\n                    // carrier\r\n                    let pitchExpressionStart: number;\r\n                    if (tone.prevPitchExpressions[i] != null) {\r\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\r\n                    } else {\r\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\r\n                    }\r\n                    const pitchExpressionEnd: number = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\r\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\r\n                    expressionStart *= pitchExpressionStart;\r\n                    expressionEnd *= pitchExpressionEnd;\r\n\r\n                    totalCarrierExpression += amplitudeCurveEnd;\r\n                } else {\r\n                    // modulator\r\n                    expressionStart *= Config.sineWaveLength * 1.5;\r\n                    expressionEnd *= Config.sineWaveLength * 1.5;\r\n\r\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\r\n                }\r\n\r\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\r\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\r\n\r\n                // Check for mod-related volume delta\r\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\r\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\r\n                // You can use the mix volume modulator instead to avoid this effect.\r\n\r\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                    const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\r\n                    const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\r\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n                }\r\n\r\n                tone.operatorExpressions[i] = expressionStart;\r\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n            }\r\n\r\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\r\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\r\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\r\n            const expressionStart: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\r\n            const expressionEnd: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\r\n            tone.expression = expressionStart;\r\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n\r\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\r\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n            }\r\n\r\n            let feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n\r\n            let feedbackStart: number = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\r\n            let feedbackEnd: number = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\r\n            tone.feedbackMult = feedbackStart;\r\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\r\n\r\n\r\n        } else {\r\n            const freqEndRatio: number = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\r\n\t\t\tconst basePhaseDeltaScale: number = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\r\n\r\n\r\n            let pitch: number = tone.pitches[0];\r\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {\r\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\r\n                if (chord.customInterval) {\r\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\r\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n                } else {\r\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n                }\r\n            }\r\n\r\n            const startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\r\n            const endPitch: number = basePitch + (pitch + intervalEnd) * intervalScale;\r\n            let pitchExpressionStart: number;\r\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\r\n            if (tone.prevPitchExpressions[0] != null) {\r\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\r\n            } else {\r\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\r\n            }\r\n            const pitchExpressionEnd: number = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\r\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\r\n            let settingsExpressionMult: number = baseExpression * noteFilterExpression;\r\n\r\n            if (instrument.type == InstrumentType.noise) {\r\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\r\n            }\r\n            if (instrument.type == InstrumentType.chip) {\r\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\r\n            }\r\n            if (instrument.type == InstrumentType.pwm) {\r\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = basePulseWidth;\r\n                let pulseWidthModEnd: number = basePulseWidth;\r\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\r\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\r\n                tone.pulseWidth = pulseWidthStart;\r\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\r\n\r\n                //decimal offset mods\r\n                let decimalOffsetModStart: number = instrument.decimalOffset;\r\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\r\n                }\r\n \r\n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\r\n                tone.decimalOffset = decimalOffsetStart;\r\n                \r\n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\r\n            }\r\n            if (instrument.type == InstrumentType.pickedString) {\r\n                // Check for sustain mods\r\n                let useSustainStart: number = instrument.stringSustain;\r\n                let useSustainEnd: number = instrument.stringSustain;\r\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\r\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\r\n                }\r\n\r\n                tone.stringSustainStart = useSustainStart;\r\n                tone.stringSustainEnd = useSustainEnd;\r\n\r\n                // Increase expression to compensate for string decay.\r\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\r\n\r\n            }\r\n\r\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\r\n                // These instruments have two waves at different frequencies for the unison feature.\r\n                //const unison: Unison = Config.unisons[instrument.unison];\r\n                const unisonVoices: number = instrument.unisonVoices;\r\n                const unisonSpread: number = instrument.unisonSpread;\r\n                const unisonOffset: number = instrument.unisonOffset;\r\n                const unisonExpression: number = instrument.unisonExpression;\r\n                //const unisonSign: number = Config.unisons[instrument.unisonSign];\r\n                //const unison: Unison = [voices:, ];\r\n                const voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unisonVoices / 2.0;\r\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\r\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\r\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\r\n                const unisonAStart: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\r\n                const unisonAEnd: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\r\n                const unisonBStart: number = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;\r\n                const unisonBEnd: number = Math.pow(2.0, (unisonOffset- unisonSpread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;\r\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;\r\n                tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;\r\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);\r\n                tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\r\n            } else {\r\n                tone.phaseDeltas[0] = startFreq * sampleTime;\r\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\r\n            }\r\n\r\n             // TODO: make expressionStart and expressionEnd variables earlier and modify those\r\n\t\t\t// instead of these supersawExpression variables.\r\n\t\t\tlet supersawExpressionStart: number = 1.0;\r\n\t\t\tlet supersawExpressionEnd: number = 1.0;\r\n\t\t\tif (instrument.type == InstrumentType.supersaw) {\r\n\t\t\t\tconst minFirstVoiceAmplitude: number = 1.0 / Math.sqrt(Config.supersawVoiceCount);\r\n\r\n                // Dynamism mods\r\n                let useDynamismStart: number = instrument.supersawDynamism / Config.supersawDynamismMax;\r\n                let useDynamismEnd: number = instrument.supersawDynamism / Config.supersawDynamismMax;\r\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\r\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\r\n                }\r\n\r\n\t\t\t\tconst curvedDynamismStart: number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[EnvelopeComputeIndex.supersawDynamism]), 0.2);\r\n\t\t\t\tconst curvedDynamismEnd:   number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[  EnvelopeComputeIndex.supersawDynamism]), 0.2);\r\n\t\t\t\tconst firstVoiceAmplitudeStart: number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\r\n\t\t\t\tconst firstVoiceAmplitudeEnd:   number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\r\n\r\n\t\t\t\tconst dynamismStart: number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\r\n\t\t\t\tconst dynamismEnd:   number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\r\n\t\t\t\ttone.supersawDynamism = dynamismStart;\r\n\t\t\t\ttone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\r\n\r\n\t\t\t\tconst initializeSupersaw: boolean = (tone.supersawDelayIndex == -1);\r\n\t\t\t\tif (initializeSupersaw) {\r\n\t\t\t\t\t// Goal: generate sawtooth phases such that the combined initial amplitude\r\n\t\t\t\t\t// cancel out to minimize pop. Algorithm: generate sorted phases, iterate over\r\n\t\t\t\t\t// their sawtooth drop points to find a combined zero crossing, then offset the\r\n\t\t\t\t\t// phases so they start there.\r\n\r\n\t\t\t\t\t// Generate random phases in ascending order by adding positive randomly\r\n\t\t\t\t\t// sized gaps between adjacent phases. For a proper distribution of random\r\n\t\t\t\t\t// events, the gaps sizes should be an \"exponential distribution\", which is\r\n\t\t\t\t\t// just: -Math.log(Math.random()). At the end, normalize the phases to a 0-1\r\n\t\t\t\t\t// range by dividing by the final value of the accumulator.\r\n\t\t\t\t\tlet accumulator: number = 0.0;\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t\ttone.phases[i] = accumulator;\r\n\t\t\t\t\t\taccumulator += -Math.log(Math.random());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst amplitudeSum: number = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\r\n\t\t\t\t\tconst slope: number = amplitudeSum;\r\n\r\n\t\t\t\t\t// Find the initial amplitude of the sum of sawtooths with the normalized\r\n\t\t\t\t\t// set of phases.\r\n\t\t\t\t\tlet sample: number = 0.0;\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\r\n\t\t\t\t\t\tconst normalizedPhase: number = tone.phases[i] / accumulator;\r\n\t\t\t\t\t\ttone.phases[i] = normalizedPhase;\r\n\t\t\t\t\t\tsample += (normalizedPhase - 0.5) * amplitude;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find the phase of the zero crossing of the sum of the sawtooths. You can\r\n\t\t\t\t\t// use a constant slope and the distance between sawtooth drops to determine if\r\n\t\t\t\t\t// the zero crossing occurs between them. Note that a small phase means that\r\n\t\t\t\t\t// the corresponding drop for that wave is far away, and a big phase means the\r\n\t\t\t\t\t// drop is nearby, so to iterate forward through the drops we iterate backward\r\n\t\t\t\t\t// through the phases.\r\n\t\t\t\t\tlet zeroCrossingPhase: number = 1.0;\r\n\t\t\t\t\tlet prevDrop: number = 0.0;\r\n\t\t\t\t\tfor (let i: number = Config.supersawVoiceCount - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tconst nextDrop: number = 1.0 - tone.phases[i];\r\n\t\t\t\t\t\tconst phaseDelta: number = nextDrop - prevDrop;\r\n\t\t\t\t\t\tif (sample < 0.0) {\r\n\t\t\t\t\t\t\tconst distanceToZeroCrossing: number = -sample / slope;\r\n\t\t\t\t\t\t\tif (distanceToZeroCrossing < phaseDelta) {\r\n\t\t\t\t\t\t\t\tzeroCrossingPhase = prevDrop + distanceToZeroCrossing;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\r\n\t\t\t\t\t\tsample += phaseDelta * slope - amplitude;\r\n\t\t\t\t\t\tprevDrop = nextDrop;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t\ttone.phases[i] += zeroCrossingPhase;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Randomize the (initially sorted) order of the phases (aside from the\r\n\t\t\t\t\t// first one) so that they don't correlate to the detunes that are also\r\n\t\t\t\t\t// based on index.\r\n\t\t\t\t\tfor (let i: number = 1; i < Config.supersawVoiceCount - 1; i++) {\r\n\t\t\t\t\t\tconst swappedIndex: number = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\r\n\t\t\t\t\t\tconst temp: number = tone.phases[i];\r\n\t\t\t\t\t\ttone.phases[i] = tone.phases[swappedIndex];\r\n\t\t\t\t\t\ttone.phases[swappedIndex] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst baseSpreadSlider: number = instrument.supersawSpread / Config.supersawSpreadMax;\r\n\t\t\t\t// Spread mods\r\n\t\t\t\tlet useSpreadStart: number = baseSpreadSlider;\r\n\t\t\t\tlet useSpreadEnd:   number = baseSpreadSlider;\r\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\r\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\r\n                }\r\n\r\n\t\t\t\tconst spreadSliderStart: number = useSpreadStart * envelopeStarts[EnvelopeComputeIndex.supersawSpread];\r\n\t\t\t\tconst spreadSliderEnd:   number = useSpreadEnd * envelopeEnds[  EnvelopeComputeIndex.supersawSpread];\r\n\t\t\t\t// Just use the average detune for the current tick in the below loop.\r\n\t\t\t\tconst averageSpreadSlider: number = (spreadSliderStart + spreadSliderEnd) * 0.5;\r\n\t\t\t\tconst curvedSpread: number = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\r\n\t\t\t\tfor (let i = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t// Spread out the detunes around the center;\r\n\t\t\t\t\tconst offset: number = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\r\n\t\t\t\t\ttone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst baseShape: number = instrument.supersawShape / Config.supersawShapeMax;\r\n\t\t\t\t// Saw shape mods\r\n\t\t\t\tlet useShapeStart: number = baseShape * envelopeStarts[EnvelopeComputeIndex.supersawShape];\r\n\t\t\t\tlet useShapeEnd:   number = baseShape * envelopeEnds[  EnvelopeComputeIndex.supersawShape];\r\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\r\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\r\n                }\r\n\r\n\t\t\t\tconst shapeStart: number = useShapeStart * envelopeStarts[EnvelopeComputeIndex.supersawShape];\r\n\t\t\t\tconst shapeEnd:   number = useShapeEnd * envelopeEnds[EnvelopeComputeIndex.supersawShape];\r\n\t\t\t\ttone.supersawShape = shapeStart;\r\n\t\t\t\ttone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\r\n\r\n                //decimal offset mods\r\n                let decimalOffsetModStart: number = instrument.decimalOffset;\r\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\r\n                }\r\n \r\n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\r\n                // ...is including tone.decimalOffset still necessary?\r\n                tone.decimalOffset = decimalOffsetStart;\r\n\r\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = basePulseWidth;\r\n                let pulseWidthModEnd: number = basePulseWidth;\r\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                let pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\r\n                let pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\r\n                pulseWidthStart -= decimalOffsetStart / 10000;\r\n                pulseWidthEnd -= decimalOffsetStart / 10000;\r\n\t\t\t\tconst phaseDeltaStart: number = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\r\n\t\t\t\tconst phaseDeltaEnd: number = startFreq * sampleTime * freqEndRatio;\r\n\t\t\t\ttone.supersawPrevPhaseDelta = phaseDeltaEnd;\r\n\t\t\t\tconst delayLengthStart = pulseWidthStart / phaseDeltaStart;\r\n\t\t\t\tconst delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\r\n\t\t\t\ttone.supersawDelayLength = delayLengthStart;\r\n\t\t\t\ttone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\r\n\t\t\t\tconst minBufferLength: number = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\r\n\r\n\t\t\t\tif (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\r\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\r\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\r\n\t\t\t\t\tconst likelyMaximumLength: number = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\r\n\t\t\t\t\tconst newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\r\n\t\t\t\t\tif (!initializeSupersaw && tone.supersawDelayLine != null) {\r\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\r\n\t\t\t\t\t\t// transfer the old data to the new buffer.\r\n\t\t\t\t\t\tconst oldDelayBufferMask: number = (tone.supersawDelayLine.length - 1) >> 0;\r\n\t\t\t\t\t\tconst startCopyingFromIndex: number = tone.supersawDelayIndex;\r\n\t\t\t\t\t\tfor (let i: number = 0; i < tone.supersawDelayLine.length; i++) {\r\n\t\t\t\t\t\t\tnewDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttone.supersawDelayLine = newDelayLine;\r\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\r\n\t\t\t\t} else if (initializeSupersaw) {\r\n\t\t\t\t\ttone.supersawDelayLine.fill(0.0);\r\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst pulseExpressionRatio: number = Config.pwmBaseExpression / Config.supersawBaseExpression;\r\n\t\t\t\tsupersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\r\n\t\t\t\tsupersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\r\n\t\t\t}\r\n\r\n\t\t\tlet expressionStart: number = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume] * supersawExpressionStart;\r\n\t\t\tlet expressionEnd:   number = settingsExpressionMult * fadeExpressionEnd   * chordExpressionEnd   * pitchExpressionEnd   * envelopeEnds[  EnvelopeComputeIndex.noteVolume] * supersawExpressionEnd;\r\n\r\n            // Check for mod-related volume delta\r\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\r\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\r\n                const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true)\r\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n            }\r\n\r\n            tone.expression = expressionStart;\r\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n\r\n            if (instrument.type == InstrumentType.pickedString) {\r\n                let stringDecayStart: number;\r\n                if (tone.prevStringDecay != null) {\r\n                    stringDecayStart = tone.prevStringDecay;\r\n                } else {\r\n                    const sustainEnvelopeStart: number = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\r\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\r\n                }\r\n                const sustainEnvelopeEnd: number = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\r\n                let stringDecayEnd: number = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\r\n                tone.prevStringDecay = stringDecayEnd;\r\n\r\n                //const unison: Unison = Config.unisons[instrument.unison];\r\n                const unisonVoices: number = instrument.unisonVoices;\r\n                for (let i: number = tone.pickedStrings.length; i < unisonVoices; i++) {\r\n                    tone.pickedStrings[i] = new PickedString();\r\n                }\r\n\r\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\r\n                    for (const pickedString of tone.pickedStrings) {\r\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\r\n                        pickedString.delayIndex = -1;\r\n                    }\r\n                }\r\n\r\n                for (let i: number = 0; i < unisonVoices; i++) {\r\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n        let effect: number = 0.0;\r\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\r\n        }\r\n        return effect;\r\n    }\r\n\r\n\r\n    public static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n        if (instrument.type == InstrumentType.fm) {\r\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                const wrappedFmSynth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\r\n\r\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\r\n\r\n            }\r\n            return Synth.fmSynthFunctionCache[fingerprint];\r\n        } else if (instrument.type == InstrumentType.chip) {\r\n\t\t                 // advloop addition\r\n                if (instrument.isUsingAdvancedLoopControls) {\r\n                    return Synth.loopableChipSynth;\r\n                }\r\n                // advloop addition\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            return Synth.harmonicsSynth;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            return Synth.pulseWidthSynth;\r\n        } else if (instrument.type == InstrumentType.supersaw) {\r\n\t\t\treturn Synth.supersawSynth;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            return Synth.pickedStringSynth;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            return Synth.noiseSynth;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            return Synth.spectrumSynth;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            return Synth.drumsetSynth;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            return Synth.modSynth;\r\n        } else if (instrument.type == InstrumentType.fm6op) {\r\n            const fingerprint: string = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\r\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < instrument.customAlgorithm.carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount+2 - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = instrument.customFeedbackType.indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j = 0; j < Config.operatorCount+2; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                const wrappedFm6Synth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\r\n\r\n\t\t\t\tSynth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\r\n            }\r\n            return Synth.fm6SynthFunctionCache[fingerprint];\r\n        }else{\r\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n        }\r\n    }\r\n// advloop addition\r\n        static wrap(x: number, b: number): number {\r\n            return (x % b + b) % b;\r\n        }\r\n        static loopableChipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n            // @TODO:\r\n            // - Longer declicking? This is more difficult than I thought.\r\n            //   When determining this automatically is difficult (or the input\r\n            //   samples are expected to vary too much), this is left up to the\r\n            //   user.\r\n            const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\r\n            // const aliases = false;\r\n            const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n            const wave: Float32Array = instrumentState.wave!;\r\n            const volumeScale: number = instrumentState.volumeScale;\r\n            const waveLength: number = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\r\n            let chipWaveLoopEnd: number = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\r\n            let chipWaveLoopStart: number = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\r\n\t\t\t// @TODO: This is where to set things up for the release loop mode.\r\n           // const ticksSinceReleased = tone.ticksSinceReleased;\r\n            // if (ticksSinceReleased > 0) {\r\n            //     chipWaveLoopStart = 0;\r\n            //     chipWaveLoopEnd = waveLength - 1;\r\n            // }\r\n            let chipWaveLoopLength: number = chipWaveLoopEnd - chipWaveLoopStart;\r\n\t\t\tif (chipWaveLoopLength < 2) {\r\n                chipWaveLoopStart = 0;\r\n                chipWaveLoopEnd = waveLength;\r\n                chipWaveLoopLength = waveLength;\r\n            }\r\n            const chipWaveLoopMode: number = instrumentState.chipWaveLoopMode;\r\n            const chipWavePlayBackwards: boolean = instrumentState.chipWavePlayBackwards;\r\n            const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n            if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval)\r\n                tone.phases[1] = tone.phases[0];\r\n            let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n            let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n            let directionA: number = tone.directions[0];\r\n            let directionB: number = tone.directions[1];\r\n            let chipWaveCompletionA: number = tone.chipWaveCompletions[0];\r\n            let chipWaveCompletionB: number = tone.chipWaveCompletions[1];\r\n            if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\r\n                // If playing once or looping, we force the correct direction,\r\n                // since it shouldn't really change. This is mostly so that if\r\n                // the mode is changed midway through playback, it won't get\r\n                // stuck on the wrong direction.\r\n                if (!chipWavePlayBackwards) {\r\n                    directionA = 1;\r\n                    directionB = 1;\r\n                } else {\r\n                    directionA = -1;\r\n                    directionB = -1;\r\n                }\r\n            }\r\n            if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {\r\n                // If looping or ping-ponging, we clear the completion status,\r\n                // as it's not relevant anymore. This is mostly so that if the\r\n                // mode is changed midway through playback, it won't get stuck\r\n                // on zero volume.\r\n                chipWaveCompletionA = 0;\r\n                chipWaveCompletionB = 0;\r\n            }\r\n            let lastWaveA: number = tone.chipWaveCompletionsLastWave[0];\r\n            let lastWaveB: number = tone.chipWaveCompletionsLastWave[1];\r\n            const chipWaveCompletionFadeLength: number = 1000;\r\n            const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n            const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n            let expression: number = +tone.expression;\r\n            const expressionDelta: number = +tone.expressionDelta;\r\n            let phaseA: number = Synth.wrap(tone.phases[0], 1) * waveLength;\r\n            let phaseB: number = Synth.wrap(tone.phases[1], 1) * waveLength;\r\n            let prevWaveIntegralA: number = 0;\r\n            let prevWaveIntegralB: number = 0;\r\n            if (!aliases) {\r\n                const phaseAInt = Math.floor(phaseA);\r\n                const phaseBInt = Math.floor(phaseB);\r\n                const indexA = Synth.wrap(phaseAInt, waveLength);\r\n               const indexB = Synth.wrap(phaseBInt, waveLength);\r\n                const phaseRatioA = phaseA - phaseAInt;\r\n                const phaseRatioB = phaseB - phaseBInt;\r\n                prevWaveIntegralA = +wave[indexA];\r\n                prevWaveIntegralB = +wave[indexB];\r\n                prevWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralA) * phaseRatioA;\r\n                prevWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralB) * phaseRatioB;\r\n           }\r\n            const filters = tone.noteFilters;\r\n            const filterCount: number = tone.noteFilterCount | 0;\r\n            let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n            let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n            const applyFilters: Function = Synth.applyFilters;\r\n            const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n            let prevWaveA: number = tone.chipWavePrevWaves[0];\r\n            let prevWaveB: number = tone.chipWavePrevWaves[1];\r\n            for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n                if (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {\r\n                    chipWaveCompletionA++;\r\n                }\r\n                if (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {\r\n                    chipWaveCompletionB++;\r\n                }\r\n               let wrapped: number = 0;\r\n                phaseA += phaseDeltaA * directionA;\r\n                phaseB += phaseDeltaB * directionB;\r\n                if (chipWaveLoopMode === 2) {\r\n                    // once\r\n                    if (directionA === 1) {\r\n                        if (phaseA > waveLength) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < 0) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > waveLength) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseB < 0) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                } else if (chipWaveLoopMode === 3) {\r\n                    // loop once\r\n                    if (directionA === 1) {\r\n                        if (phaseA > chipWaveLoopEnd) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < chipWaveLoopStart) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > chipWaveLoopEnd) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseB < chipWaveLoopStart) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                } else if (chipWaveLoopMode === 0) {\r\n                    // loop\r\n                    if (directionA === 1) {\r\n                        if (phaseA > chipWaveLoopEnd) {\r\n                            phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopStart;\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < chipWaveLoopStart) {\r\n                            phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopEnd;\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > chipWaveLoopEnd) {\r\n                            phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopStart;\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionB === -1) {\r\n                        if (phaseB < chipWaveLoopStart) {\r\n                            phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopEnd;\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                } else if (chipWaveLoopMode === 1) {\r\n                    // ping-pong\r\n                    if (directionA === 1) {\r\n                        if (phaseA > chipWaveLoopEnd) {\r\n                            phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopEnd;\r\n                            directionA = -1;\r\n                           wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < chipWaveLoopStart) {\r\n                            phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopStart;\r\n                            directionA = 1;\r\n                           wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > chipWaveLoopEnd) {\r\n                            phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopEnd;\r\n                            directionB = -1;\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionB === -1) {\r\n                        if (phaseB < chipWaveLoopStart) {\r\n                            phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopStart;\r\n                            directionB = 1;\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n               }\r\n                let waveA = 0;\r\n                let waveB = 0;\r\n                let inputSample = 0;\r\n                if (aliases) {\r\n                    waveA = wave[Synth.wrap(Math.floor(phaseA), waveLength)];\r\n                    waveB = wave[Synth.wrap(Math.floor(phaseB), waveLength)];\r\n                    prevWaveA = waveA;\r\n                    prevWaveB = waveB;\r\n                    const completionFadeA: number = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    const completionFadeB: number = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    inputSample = 0;\r\n                    if (chipWaveCompletionA > 0) {\r\n                        inputSample += lastWaveA * completionFadeA;\r\n                    } else {\r\n                        inputSample += waveA;\r\n                    }\r\n                    if (chipWaveCompletionB > 0) {\r\n                        inputSample += lastWaveB * completionFadeB;\r\n                    } else {\r\n                        inputSample += waveB;\r\n                    }\r\n                }\r\n                else {\r\n                    const phaseAInt = Math.floor(phaseA);\r\n                    const phaseBInt = Math.floor(phaseB);\r\n                    const indexA = Synth.wrap(phaseAInt, waveLength);\r\n                    const indexB = Synth.wrap(phaseBInt, waveLength);\r\n                    let nextWaveIntegralA = wave[indexA];\r\n                    let nextWaveIntegralB = wave[indexB];\r\n                    const phaseRatioA = phaseA - phaseAInt;\r\n                    const phaseRatioB = phaseB - phaseBInt;\r\n                    nextWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralA) * phaseRatioA;\r\n                    nextWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralB) * phaseRatioB;\r\n                    if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\r\n                        let pwia = 0;\r\n                        let pwib = 0;\r\n                        const phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);\r\n                        const phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);\r\n                        const phaseAInt = Math.floor(phaseA_);\r\n                        const phaseBInt = Math.floor(phaseB_);\r\n                        const indexA = Synth.wrap(phaseAInt, waveLength);\r\n                        const indexB = Synth.wrap(phaseBInt, waveLength);\r\n                        pwia = wave[indexA];\r\n                        pwib = wave[indexB];\r\n                        pwia += (wave[Synth.wrap(indexA + 1, waveLength)] - pwia) * (phaseA_ - phaseAInt) * directionA;\r\n                        pwib += (wave[Synth.wrap(indexB + 1, waveLength)] - pwib) * (phaseB_ - phaseBInt) * directionB;\r\n                        prevWaveIntegralA = pwia;\r\n                        prevWaveIntegralB = pwib;\r\n\t\t\t\t   }\r\n                   if (chipWaveLoopMode === 1 && wrapped !== 0) {\r\n                       waveA = prevWaveA;\r\n                       waveB = prevWaveB;\r\n                   } else {\r\n                       waveA = (nextWaveIntegralA - prevWaveIntegralA) / (phaseDeltaA * directionA);\r\n                       waveB = (nextWaveIntegralB - prevWaveIntegralB) / (phaseDeltaB * directionB);\r\n                   }\r\n                   prevWaveA = waveA;\r\n                   prevWaveB = waveB;\r\n\t\t\t\t   prevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\t\t   prevWaveIntegralB = nextWaveIntegralB;\r\n                    const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    if (chipWaveCompletionA > 0) {\r\n                        inputSample += lastWaveA * completionFadeA;\r\n                    } else {\r\n                        inputSample += waveA;\r\n                    }\r\n                    if (chipWaveCompletionB > 0) {\r\n                        inputSample += lastWaveB * completionFadeB;\r\n                    } else {\r\n                        inputSample += waveB * unisonSign;\r\n                    }\r\n                }\r\n                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n                initialFilterInput2 = initialFilterInput1;\r\n                initialFilterInput1 = inputSample * volumeScale;\r\n                phaseDeltaA *= phaseDeltaScaleA;\r\n                phaseDeltaB *= phaseDeltaScaleB;\r\n                const output = sample * expression;\r\n                expression += expressionDelta;\r\n                data[sampleIndex] += output;\r\n            }\r\n            tone.phases[0] = phaseA / waveLength;\r\n            tone.phases[1] = phaseB / waveLength;\r\n            tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n            tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n            tone.directions[0] = directionA;\r\n            tone.directions[1] = directionB;\r\n            tone.chipWaveCompletions[0] = chipWaveCompletionA;\r\n            tone.chipWaveCompletions[1] = chipWaveCompletionB;\r\n            tone.chipWavePrevWaves[0] = prevWaveA;\r\n            tone.chipWavePrevWaves[1] = prevWaveB;\r\n            tone.chipWaveCompletionsLastWave[0] = lastWaveA;\r\n            tone.chipWaveCompletionsLastWave[1] = lastWaveB;\r\n            tone.expression = expression;\r\n            synth.sanitizeFilters(filters);\r\n            tone.initialNoteFilterInput1 = initialFilterInput1;\r\n            tone.initialNoteFilterInput2 = initialFilterInput2;\r\n        }\r\n        // advloop addition\r\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const volumeScale = instrumentState.volumeScale;\r\n\r\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n        let prevWaveIntegralA: number = 0;\r\n        let prevWaveIntegralB: number = 0;\r\n\r\n        if (!aliases) {\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            prevWaveIntegralA = +wave[indexA];\r\n            prevWaveIntegralB = +wave[indexB];\r\n            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n        }\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            let waveA: number;\r\n            let waveB: number;\r\n            let inputSample: number;\r\n\r\n            if (aliases) {\r\n                waveA = wave[(0 | phaseA) % waveLength];\r\n                waveB = wave[(0 | phaseB) % waveLength];\r\n                inputSample = waveA + waveB;\r\n            } else {\r\n                const phaseAInt: number = phaseA | 0;\r\n                const phaseBInt: number = phaseB | 0;\r\n                const indexA: number = phaseAInt % waveLength;\r\n                const indexB: number = phaseBInt % waveLength;\r\n                let nextWaveIntegralA: number = wave[indexA];\r\n                let nextWaveIntegralB: number = wave[indexB];\r\n                const phaseRatioA: number = phaseA - phaseAInt;\r\n                const phaseRatioB: number = phaseB - phaseBInt;\r\n                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n                waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n                waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n                prevWaveIntegralA = nextWaveIntegralA;\r\n                prevWaveIntegralB = nextWaveIntegralB;\r\n                inputSample = waveA + waveB * unisonSign;\r\n            }\r\n\r\n            const sample: number = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample * volumeScale;\r\n\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n            phaseDeltaB *= phaseDeltaScaleB;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = +wave[indexA];\r\n        let prevWaveIntegralB: number = +wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            const waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            const waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const inputSample: number = waveA + waveB * unisonSign;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n            phaseDeltaB *= phaseDeltaScaleB;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\r\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\r\n        // The source code is processed as a string before being compiled, in order to\r\n        // handle the unison feature. If unison is disabled or set to none, then only one\r\n        // string voice is required, otherwise two string voices are required. We only want\r\n        // to compute the minimum possible number of string voices, so omit the code for\r\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\r\n        // each required voice, replacing the \"#\" with the voice index.\r\n\r\n        const voiceCount: number = instrumentState.unisonVoices;\r\n        let pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\r\n        if (pickedStringFunction == undefined) {\r\n            let pickedStringSource: string = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\r\n\r\n\r\n            pickedStringSource += `\r\n\t\t\t\tconst Config = beepbox.Config;\r\n\t\t\t\tconst Synth = beepbox.Synth;\r\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\r\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\r\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\r\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\r\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\r\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\r\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\r\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\r\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\r\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\r\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\r\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\r\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\r\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\r\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\r\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\r\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\r\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\r\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\r\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\r\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\r\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\r\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\r\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\r\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\r\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\r\n\t\t\t\t\r\n\t\t\t\tlet expression = +tone.expression;\r\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\r\n\t\t\t\t\r\n\t\t\t\tconst filters = tone.noteFilters;\r\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\t\t\tconst applyFilters = Synth.applyFilters;\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\r\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\r\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\r\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\r\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\r\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\r\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\r\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\r\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\r\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\r\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\r\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\r\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\r\n\t\t\t\t\tdelayIndex#++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = (`\r\n\r\n            const sampleList: string[] = [];\r\n            for (let voice: number = 0; voice < voiceCount; voice++) {\r\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice == 1 ? \" * unisonSign\" : \"\"));\r\n            }\r\n\r\n            pickedStringSource += sampleList.join(\" + \");\r\n\r\n            pickedStringSource += `) * expression;\r\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\tdata[sampleIndex] += sample;\r\n\t\t\t\t\t\r\n\t\t\t\t\texpression += expressionDelta;\r\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\r\n\t\t\t\t\tallPassG# += allPassGDelta#;\r\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\r\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\r\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\r\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\r\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);\r\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\r\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\r\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\r\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\r\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\r\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\r\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\r\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\r\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\r\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\r\n\t\t\t\tpickedString#.allPassG = allPassG#;\r\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\r\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\r\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\r\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\r\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\r\n\t\t\t\t\r\n\t\t\t\ttone.expression = expression;\r\n\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t\t\t}`\r\n\r\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\r\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\r\n                const lines = [];\r\n                for (let voice: number = 0; voice < voiceCount; voice++) {\r\n                    lines.push(line.replace(/\\#/g, String(voice)));\r\n                }\r\n                return lines.join(\"\\n\");\r\n            });\r\n\r\n            //console.log(pickedStringSource);\r\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\r\n\t\t\tSynth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\r\n        }\r\n\r\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\r\n    }\r\n\r\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\r\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\r\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\r\n\r\n        const usesDistortion: boolean = effectsIncludeDistortion(instrumentState.effects);\r\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(instrumentState.effects);\r\n        const usesEqFilter: boolean = instrumentState.eqFilterCount > 0;\r\n        const usesPanning: boolean = effectsIncludePanning(instrumentState.effects);\r\n        const usesChorus: boolean = effectsIncludeChorus(instrumentState.effects);\r\n        const usesEcho: boolean = effectsIncludeEcho(instrumentState.effects);\r\n        const usesReverb: boolean = effectsIncludeReverb(instrumentState.effects);\r\n        let signature: number = 0; if (usesDistortion) signature = signature | 1;\r\n        signature = signature << 1; if (usesBitcrusher) signature = signature | 1;\r\n        signature = signature << 1; if (usesEqFilter) signature = signature | 1;\r\n        signature = signature << 1; if (usesPanning) signature = signature | 1;\r\n        signature = signature << 1; if (usesChorus) signature = signature | 1;\r\n        signature = signature << 1; if (usesEcho) signature = signature | 1;\r\n        signature = signature << 1; if (usesReverb) signature = signature | 1;\r\n\r\n        let effectsFunction: Function = Synth.effectsFunctionCache[signature];\r\n        if (effectsFunction == undefined) {\r\n            let effectsSource: string = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\r\n\r\n            const usesDelays: boolean = usesChorus || usesReverb || usesEcho;\r\n\r\n            effectsSource += `\r\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\r\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\r\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`\r\n            }\r\n\r\n            if (usesDistortion) {\r\n                // Distortion can sometimes create noticeable aliasing.\r\n                // It seems the established industry best practice for distortion antialiasing\r\n                // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\r\n                // at the original nyquist frequency), perform the distortion, then downsample\r\n                // (the lowpass again followed by dropping in-between samples). This is\r\n                // \"mathematically correct\" in that it preserves only the intended frequencies,\r\n                // but it has several unfortunate tradeoffs depending on the choice of filter,\r\n                // introducing latency and/or time smearing, since no true brick wall filter\r\n                // exists. For the time being, I've opted to instead generate in-between input\r\n                // samples using fractional delay all-pass filters, and after distorting them,\r\n                // I \"downsample\" these with a simple weighted sum.\r\n\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\r\n\t\t\t\tlet distortion = instrumentState.distortion;\r\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\r\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\r\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\r\n\t\t\t\tconst distortionFractionalResolution = 4.0;\r\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\r\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\r\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\r\n\t\t\t\t\r\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\r\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\r\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\r\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\r\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\r\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\r\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\r\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\r\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\r\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\r\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\r\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\r\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet filters = instrumentState.eqFilters;\r\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\r\n\t\t\t\tconst applyFilters = Synth.applyFilters;`\r\n            }\r\n\r\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\r\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\r\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\r\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\r\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\r\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\r\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\r\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\r\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\r\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\r\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\r\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\r\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\r\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\r\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\r\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\r\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\r\n\t\t\t\t\r\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\r\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\r\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\r\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\r\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\r\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\r\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\r\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\r\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\r\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\r\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\r\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\r\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\r\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\r\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\r\n\t\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\r\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\r\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\r\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\r\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\r\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\r\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\r\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\r\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\r\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\r\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\r\n\t\t\t\t\r\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\r\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\r\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\r\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\r\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\r\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\r\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\r\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\r\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\r\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\r\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\r\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\r\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\r\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\r\n\t\t\t\t\r\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\r\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\r\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\r\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\r\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\r\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\r\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\r\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\r\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\r\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\r\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\r\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\r\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`\r\n\r\n            if (usesDistortion) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\r\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\r\n\t\t\t\t\tsample = distortionNextOutput;\r\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\r\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\r\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\r\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\r\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\r\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\r\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\r\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\r\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\r\n\t\t\t\t\tsample *= distortionOversampleCompensation;\r\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\r\n\t\t\t\t\tdistortion += distortionDelta;\r\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\r\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\r\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\r\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\r\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\r\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\r\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\r\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\r\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\r\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\r\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = sample;\r\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;`\r\n            }\r\n\r\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\r\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tsample *= eqFilterVolume;\r\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\r\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\r\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\r\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\r\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\r\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\r\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\r\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\r\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\r\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\r\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\r\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\r\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\r\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`\r\n            } else {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet sampleL = sample;\r\n\t\t\t\t\tlet sampleR = sample;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\r\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\r\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\r\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\r\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\r\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\r\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\r\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\r\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\r\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\r\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\r\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\r\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\r\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\r\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\r\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\r\n\t\t\t\t\tsampleL += echoShelfSampleL;\r\n\t\t\t\t\tsampleR += echoShelfSampleR;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\r\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\r\n\t\t\t\t\techoMult += echoMultDelta;\r\n                    `\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\r\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\r\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\r\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\r\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\r\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\r\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\r\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\r\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\r\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\r\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\r\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\r\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\r\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\r\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\r\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\r\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\r\n\t\t\t\t\treverb += reverbDelta;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\r\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\r\n\t\t\t\t\tmixVolume += mixVolumeDelta;`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\r\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`\r\n            }\r\n\r\n            if (usesDistortion) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortion = distortion;\r\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\r\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\r\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\r\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\r\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\r\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\r\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\r\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\r\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\r\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\r\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\r\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`\r\n\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\t// The filter input here is downstream from another filter so we\r\n\t\t\t\t// better make sure it's safe too.\r\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\r\n\t\t\t\t\tinitialFilterInput1 = 0.0;\r\n\t\t\t\t\tinitialFilterInput2 = 0.0;\r\n\t\t\t\t}\r\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\r\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\r\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\r\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`\r\n            }\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\r\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\r\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\r\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\r\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\r\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\r\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\r\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\r\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\r\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\r\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\r\n\t\t\t\tinstrumentState.echoMult = echoMult;\r\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\r\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\r\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\r\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\r\n\t\t\t\tinstrumentState.reverbMult = reverb;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\r\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\r\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\r\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\r\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`\r\n            }\r\n\r\n            effectsSource += \"}\";\r\n\r\n            //console.log(effectsSource);\r\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\r\n            Synth.effectsFunctionCache[signature] = effectsFunction;\r\n        }\r\n\r\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\r\n    }\r\n\r\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n\r\n        let phaseDelta: number = tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phase: number = (tone.phases[0] % 1);\r\n\r\n        let pulseWidth: number = tone.pulseWidth;\r\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            const sawPhaseA: number = phase % 1;\r\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n            let pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \r\n            if (!instrument.aliases) {\r\n                if (sawPhaseA < phaseDelta) {\r\n                    var t = sawPhaseA / phaseDelta;\r\n                    pulseWave += (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseA > 1.0 - phaseDelta) {\r\n                    var t = (sawPhaseA - 1.0) / phaseDelta;\r\n                    pulseWave += (t + t + t * t + 1) * 0.5;\r\n                }\r\n                if (sawPhaseB < phaseDelta) {\r\n                    var t = sawPhaseB / phaseDelta;\r\n                    pulseWave -= (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseB > 1.0 - phaseDelta) {\r\n                    var t = (sawPhaseB - 1.0) / phaseDelta;\r\n                    pulseWave -= (t + t + t * t + 1) * 0.5;\r\n                }\r\n            }\r\n\r\n            const inputSample: number = pulseWave;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n            pulseWidth += pulseWidthDelta;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase;\r\n        tone.phaseDeltas[0] = phaseDelta;\r\n        tone.expression = expression;\r\n        tone.pulseWidth = pulseWidth;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static supersawSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n\t\tconst voiceCount: number = Config.supersawVoiceCount|0;\r\n\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n\t\tlet expression: number = +tone.expression;\r\n\t\tconst expressionDelta: number = +tone.expressionDelta;\r\n\t\tlet phases: number[] = tone.phases;\r\n\r\n\t\tlet dynamism: number = +tone.supersawDynamism;\r\n\t\tconst dynamismDelta: number = +tone.supersawDynamismDelta;\r\n\t\tconst unisonDetunes: number[] = tone.supersawUnisonDetunes;\r\n\t\tlet shape: number = +tone.supersawShape;\r\n\t\tconst shapeDelta: number = +tone.supersawShapeDelta;\r\n\t\tlet delayLength: number = +tone.supersawDelayLength;\r\n\t\tconst delayLengthDelta: number = +tone.supersawDelayLengthDelta;\r\n\t\tconst delayLine: Float32Array = tone.supersawDelayLine!;\r\n\t\tconst delayBufferMask: number = (delayLine.length - 1) >> 0;\r\n\t\tlet delayIndex: number = tone.supersawDelayIndex|0;\r\n\t\tdelayIndex = (delayIndex & delayBufferMask) + delayLine.length;\r\n\r\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n\t\tconst filterCount: number = tone.noteFilterCount|0;\r\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n\t\tconst applyFilters: Function = Synth.applyFilters;\r\n\r\n\t\tconst stopIndex: number = bufferIndex + runLength;\r\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t// The phase initially starts at a zero crossing so apply\r\n\t\t\t// the delta before first sample to get a nonzero value.\r\n\t\t\tlet phase: number = (phases[0] + phaseDelta) % 1.0;\r\n\t\t\tlet supersawSample: number = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\r\n\r\n\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \r\n            if (!instrumentState.aliases) {\r\n                if (phase < phaseDelta) {\r\n                    var t: number = phase / phaseDelta;\r\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\r\n                } else if (phase > 1.0 - phaseDelta) {\r\n                    var t: number = (phase - 1.0) / phaseDelta;\r\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\r\n                }\r\n            }\r\n\r\n\t\t\tphases[0] = phase;\r\n\r\n\t\t\tfor (let i: number = 1; i < voiceCount; i++) {\r\n\t\t\t\tconst detunedPhaseDelta: number = phaseDelta * unisonDetunes[i];\r\n\t\t\t\t// The phase initially starts at a zero crossing so apply\r\n\t\t\t\t// the delta before first sample to get a nonzero value.\r\n\t\t\t\tlet phase: number = (phases[i] + detunedPhaseDelta) % 1.0;\r\n\t\t\t\tsupersawSample += phase * dynamism;\r\n\r\n\t\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \r\n                if (!instrumentState.aliases) {\r\n                    if (phase < detunedPhaseDelta) {\r\n                        const t: number = phase / detunedPhaseDelta;\r\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\r\n                    } else if (phase > 1.0 - detunedPhaseDelta) {\r\n                        const t: number = (phase - 1.0) / detunedPhaseDelta;\r\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\r\n                    }\r\n                }\r\n\r\n\t\t\t\tphases[i] = phase;\r\n\t\t\t}\r\n\r\n\t\t\tdelayLine[delayIndex & delayBufferMask] = supersawSample;\r\n\t\t\tconst delaySampleTime: number = delayIndex - delayLength;\r\n\t\t\tconst lowerIndex: number = delaySampleTime | 0;\r\n\t\t\tconst upperIndex: number = lowerIndex + 1;\r\n\t\t\tconst delayRatio: number = delaySampleTime - lowerIndex;\r\n\t\t\tconst prevDelaySample: number = delayLine[lowerIndex & delayBufferMask];\r\n\t\t\tconst nextDelaySample: number = delayLine[upperIndex & delayBufferMask];\r\n\t\t\tconst delaySample: number = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\r\n\t\t\tdelayIndex++;\r\n\r\n\t\t\tconst inputSample: number = supersawSample - delaySample * shape;\r\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\tinitialFilterInput1 = inputSample;\r\n\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tdynamism += dynamismDelta;\r\n\t\t\tshape += shapeDelta;\r\n\t\t\tdelayLength += delayLengthDelta;\r\n\r\n\t\t\tconst output: number = sample * expression;\r\n\t\t\texpression += expressionDelta;\r\n\r\n\t\t\tdata[sampleIndex] += output;\r\n\t\t}\r\n\r\n\t\ttone.phaseDeltas[0] = phaseDelta;\r\n\t\ttone.expression = expression;\r\n\t\ttone.supersawDynamism = dynamism;\r\n\t\ttone.supersawShape = shape;\r\n\t\ttone.supersawDelayLength = delayLength;\r\n\t\ttone.supersawDelayIndex = delayIndex;\r\n\r\n\t\tsynth.sanitizeFilters(filters);\r\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t}\r\n\r\n    private static fmSourceTemplate: string[] = (`\r\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\tconst sineWave = Config.sineWave;\r\n\t\t\t\r\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\r\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\r\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\r\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\r\n        const operator#Wave      = tone.operatorWaves[#].samples;\r\n\t\tlet feedbackMult         = +tone.feedbackMult;\r\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\r\n        let expression = +tone.expression;\r\n\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\r\n\t\tconst filters = tone.noteFilters;\r\n\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\tconst applyFilters = Synth.applyFilters;\r\n\t\t\r\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\r\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\r\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\t\t\t\t\r\n\t\t\tconst inputSample = fmOutput;\r\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\r\n\t\t\t\tfeedbackMult += feedbackDelta;\r\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\r\n\t\t\t\toperator#Phase += operator#PhaseDelta;\r\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\r\n\t\t\t\r\n\t\t\tconst output = sample * expression;\r\n\t\t\texpression += expressionDelta;\r\n\r\n\t\t\tdata[sampleIndex] += output;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\r\n\t\t    tone.feedbackOutputs[#] = operator#Output;\r\n\t\t    tone.feedbackMult = feedbackMult;\r\n\t\t    tone.expression = expression;\r\n\t\t\t\r\n\t\tsynth.sanitizeFilters(filters);\r\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t\t`).split(\"\\n\");\r\n\r\n    private static operatorSourceTemplate: string[] = (`\r\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\r\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\r\n                const operator#Sample   = operator#Wave[operator#Index];\r\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n\t\t`).split(\"\\n\");\r\n\r\n    private static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        let phaseDelta: number = +tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        if (tone.phases[0] == 0.0) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phase = Math.random() * Config.chipNoiseLength;\r\n        }\r\n        const phaseMask: number = Config.chipNoiseLength - 1;\r\n        let noiseSample: number = +tone.noiseSample;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta * instrumentState.noisePitchFilterMult);\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const waveSample: number = wave[phase & phaseMask];\r\n\r\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\r\n\r\n            const inputSample: number = noiseSample;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDelta;\r\n        tone.expression = expression;\r\n        tone.noiseSample = noiseSample;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const samplesInPeriod: number = (1 << 7);\r\n        let phaseDelta: number = tone.phaseDeltas[0] * samplesInPeriod;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let noiseSample: number = +tone.noiseSample;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\r\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\r\n\r\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & phaseMask;\r\n            let waveSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\r\n\r\n\r\n            const inputSample: number = noiseSample;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDelta / samplesInPeriod;\r\n        tone.expression = expression;\r\n        tone.noiseSample = noiseSample;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        let wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\r\n        const referenceDelta: number = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!);\r\n        let phaseDelta: number = tone.phaseDeltas[0] / referenceDelta;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\r\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & phaseMask;\r\n            let noiseSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\r\n\r\n            const inputSample: number = noiseSample;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\r\n        // Note: present modulator value is tone.expressionStarts[0].\r\n\r\n        if (!synth.song) return;\r\n\r\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\r\n        // Flagged as invalid because unused by current settings, skip\r\n        if (instrument.invalidModulators[mod]) return;\r\n\r\n        let setting: number = instrument.modulators[mod];\r\n\r\n        // Generate list of used instruments\r\n        let usedInstruments: number[] = [];\r\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\r\n            usedInstruments.push(0);\r\n        } else {\r\n            // All\r\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                for (let i: number = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\r\n                    usedInstruments.push(i);\r\n                }\r\n            }\r\n            // Active\r\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\r\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar)!.instruments;\r\n            } else {\r\n                usedInstruments.push(instrument.modInstruments[mod]);\r\n            }\r\n        }\r\n\r\n        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\r\n\r\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\r\n\r\n            // If mods are being held (for smoother playback while recording mods), use those values instead.\r\n            for (let i: number = 0; i < synth.heldMods.length; i++) {\r\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n                    if (synth.heldMods[i].setting == setting)\r\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\r\n                }\r\n                else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\r\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\r\n                }\r\n            }\r\n\r\n            // Reset arps, but only at the start of the note\r\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\r\n                synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\r\n            }\r\n            // Denote next bar skip\r\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\r\n                synth.wantToSkip = true;\r\n            }\r\n            // Extra info for eq filter target needs to be set as well\r\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\r\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n\r\n                if (!tgtInstrument.eqFilterType) {\r\n\r\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\r\n\r\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\r\n\r\n                        let pinIdx: number = 0;\r\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\r\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\r\n                        // 0 to 1 based on distance to next morph\r\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n\r\n                        // Compute the new settings to go to.\r\n                        if (tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\r\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\r\n                        } else {\r\n                            // No mutation will occur to the filter object so we can safely return it without copying\r\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\r\n                        }\r\n\r\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\r\n                    else {\r\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\r\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\r\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\r\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\r\n                            }\r\n                        }\r\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\r\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\r\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\r\n                        }\r\n\r\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\r\n                            if (dotTarget % 2) { // X\r\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\r\n                            } else { // Y\r\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Extra info for note filter target needs to be set as well\r\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\r\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n\r\n                if (!tgtInstrument.noteFilterType) {\r\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\r\n\r\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\r\n\r\n                        let pinIdx: number = 0;\r\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\r\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\r\n                        // 0 to 1 based on distance to next morph\r\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n\r\n                        // Compute the new settings to go to.\r\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\r\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\r\n                        } else {\r\n                            // No mutation will occur to the filter object so we can safely return it without copying\r\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\r\n                        }\r\n\r\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\r\n                    else {\r\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\r\n\r\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\r\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\r\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\r\n                            }\r\n                        }\r\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\r\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\r\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\r\n                        }\r\n\r\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\r\n                            if (dotTarget % 2) { // X\r\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\r\n                            } else { // Y\r\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number {\r\n        let phase: number = Math.random() * waveLength;\r\n        const phaseMask: number = waveLength - 1;\r\n\r\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n        // otherwise they pop. Try to find a zero crossing.\r\n        let indexPrev: number = phase & phaseMask;\r\n        let wavePrev: number = wave[indexPrev];\r\n        const stride: number = 16;\r\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n            const indexNext: number = (indexPrev + stride) & phaseMask;\r\n            const waveNext: number = wave[indexNext];\r\n            if (wavePrev * waveNext <= 0.0) {\r\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n                for (let i: number = 0; i < stride; i++) {\r\n                    const innerIndexNext: number = (indexPrev + 1) & phaseMask;\r\n                    const innerWaveNext: number = wave[innerIndexNext];\r\n                    if (wavePrev * innerWaveNext <= 0.0) {\r\n                        // Found the zero crossing again! Now let's find the exact intersection.\r\n                        const slope: number = innerWaveNext - wavePrev;\r\n                        phase = indexPrev;\r\n                        if (Math.abs(slope) > 0.00000001) {\r\n                            phase += -wavePrev / slope;\r\n                        }\r\n                        phase = Math.max(0, phase) % waveLength;\r\n                        break;\r\n                    } else {\r\n                        indexPrev = innerIndexNext;\r\n                        wavePrev = innerWaveNext;\r\n                    }\r\n                }\r\n                break;\r\n            } else {\r\n                indexPrev = indexNext;\r\n                wavePrev = waveNext;\r\n            }\r\n        }\r\n\r\n        return phase;\r\n    }\r\n\r\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n    }\r\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n    }\r\n    public static noteSizeToVolumeMult(size: number): number {\r\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\r\n    }\r\n    public static volumeMultToNoteSize(volumeMult: number): number {\r\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\r\n    }\r\n\r\n    public static fadeInSettingToSeconds(setting: number): number {\r\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\r\n    }\r\n    public static secondsToFadeInSetting(seconds: number): number {\r\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\r\n    }\r\n    public static fadeOutSettingToTicks(setting: number): number {\r\n        return Config.fadeOutTicks[setting];\r\n    }\r\n    public static ticksToFadeOutSetting(ticks: number): number {\r\n        let lower: number = Config.fadeOutTicks[0];\r\n        if (ticks <= lower) return 0;\r\n        for (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\r\n            let upper: number = Config.fadeOutTicks[i];\r\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\r\n            lower = upper;\r\n        }\r\n        return Config.fadeOutTicks.length - 1;\r\n    }\r\n\r\n    public static detuneToCents(detune: number): number {\r\n        // BeepBox formula, for reference:\r\n        // return detune * (Math.abs(detune) + 1) / 2;\r\n        return detune - Config.detuneCenter;\r\n    }\r\n    public static centsToDetune(cents: number): number {\r\n        // BeepBox formula, for reference:\r\n        // return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\r\n        return cents + Config.detuneCenter;\r\n    }\r\n\r\n    public static getOperatorWave(waveform: number, pulseWidth: number) {\r\n        if (waveform != 2) {\r\n            return Config.operatorWaves[waveform];\r\n        }\r\n        else {\r\n            return Config.pwmOperatorWaves[pulseWidth];\r\n        }\r\n    }\r\n\r\n    private getSamplesPerTick(): number {\r\n        if (this.song == null) return 0;\r\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\r\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\r\n        }\r\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n    }\r\n\r\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\r\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n        return this.samplesPerSecond / tickPerSecond;\r\n    }\r\n\r\n    public static fittingPowerOfTwo(x: number): number {\r\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\r\n    }\r\n\r\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\r\n        let reset: boolean = false;\r\n        for (const filter of filters) {\r\n            const output1: number = Math.abs(filter.output1);\r\n            const output2: number = Math.abs(filter.output2);\r\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\r\n            if (!(output1 < 100) || !(output2 < 100)) {\r\n                reset = true;\r\n                break;\r\n            }\r\n            if (output1 < epsilon) filter.output1 = 0.0;\r\n            if (output2 < epsilon) filter.output2 = 0.0;\r\n        }\r\n        if (reset) {\r\n            for (const filter of filters) {\r\n                filter.output1 = 0.0;\r\n                filter.output2 = 0.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\r\n        while (true) {\r\n            lastIndex--;\r\n            const index: number = lastIndex & mask;\r\n            const sample: number = Math.abs(delayLine[index]);\r\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\r\n            delayLine[index] = 0.0;\r\n        }\r\n    }\r\n\r\n    public static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\r\n        for (let i: number = 0; i < filterCount; i++) {\r\n            const filter: DynamicBiquadFilter = filters[i];\r\n            const output1: number = filter.output1;\r\n            const output2: number = filter.output2;\r\n            const a1: number = filter.a1;\r\n            const a2: number = filter.a2;\r\n            const b0: number = filter.b0;\r\n            const b1: number = filter.b1;\r\n            const b2: number = filter.b2;\r\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\r\n            filter.a1 = a1 + filter.a1Delta;\r\n            filter.a2 = a2 + filter.a2Delta;\r\n            if (filter.useMultiplicativeInputCoefficients) {\r\n                filter.b0 = b0 * filter.b0Delta;\r\n                filter.b1 = b1 * filter.b1Delta;\r\n                filter.b2 = b2 * filter.b2Delta;\r\n            } else {\r\n                filter.b0 = b0 + filter.b0Delta;\r\n                filter.b1 = b1 + filter.b1Delta;\r\n                filter.b2 = b2 + filter.b2Delta;\r\n            }\r\n            filter.output2 = output1;\r\n            filter.output1 = sample;\r\n            // Updating the input values is waste if the next filter doesn't exist...\r\n            input2 = output2;\r\n            input1 = output1;\r\n        }\r\n        return sample;\r\n    }\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n"],"mappings":"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,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI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GvB,SAEJ,GAAgC,MAA5BA,EAAuB,KAGvB,SAEJ,MAAMyY,EAAmBzY,EAAuB,KAE1C0Y,EAAkB,CACpB,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAGEC,EAAqB,CACvB,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAGEC,EAAyB,CAC3B,OACA,QACA,SACA,MACA,YACA,UACA,YACA,eACA,mBACA,QACA,cACA,UACA,QACA,kBACA,QACA,gBACA,iBACA,aACA,mBACA,kBACA,OACA,gBACA,eACA,gBACA,cACA,YACA,YACA,cACA,UACA,YACA,UACA,YACA,eAEAF,EAAMG,SAASJ,GACfF,GAA0B,EACnBI,EAASE,SAASJ,IACzBF,GAA0B,EAG1BvY,EAAuB,KAAI0Y,EAA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"}